<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Newres Al Haider on Newres Al Haider</title>
    <link>/</link>
    <description>Recent content in Newres Al Haider on Newres Al Haider</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Newres Al Haider</copyright>
    <lastBuildDate>Thu, 21 Dec 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spec-stacular Spider-Man</title>
      <link>/post/spec-stacular-spider-man/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0200</pubDate>
      
      <guid>/post/spec-stacular-spider-man/</guid>
      <description>&lt;p&gt;Spider-Man is one of the most iconic heroes of the Marvel universe. Created by Stan Lee and Steve Ditko, Spider-Man is a regular teenager named Peter Parker, who due to being bitten by a radio-active spider, gains abilities such as the proportional strength of a spider, wall crawling and a spider sense to detect upcoming danger. One of the biggest draws of Spider-Man that although he is a superhero and fought various villains from cosmic beings to petty criminals, he also had to deal with regular everyday problems, such as money issues, school life and the pressure of a job.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/2018-04/spec-stacular-spider-man/spectacular-spider-man.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;The Spectacular Spider-Man © Marvel Entertainment&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;In software there are also everyday problems which one has to tackle before one can defeat the villains of the domain at hand. One of these everyday problems is the issue of data validation. Data validation is the process of ensuring that the elements of the data are correct. This process has to be done in pretty much all domains when working with actual data. Consider the financial domain where a financial product can only be made available if the right requirements are fulfilled in the request. If the request is not written correctly then the request needs to be denied. In the legal and regulatory domains certain information that is required for a law must be fulfilled, otherwise costly corrections or fines can follow. Another good example is the clinical domain, where the a patients data needs to be transferred to an application. Here is it essential that this data fulfills the requirement for requesting a clinical procedure or a medication, as any mistake can lead to huge negative impact on the health of the patient.&lt;/p&gt;

&lt;p&gt;One relatively recent tool that can be used to solve this problem is the &lt;a href=&#34;https://clojure.org/guides/spec&#34; target=&#34;_blank&#34;&gt;clojure.spec&lt;/a&gt; library in the Clojure programming language. IN this article we aim to explain, alongside Spider-Man, how this specs can be used to tackle the data validation problem in a spectacular way. As this library relies on the Clojure language some knowledge of Clojure is needed. In order to make this article understandable to those without such prior expertise we introduce some aspects of Clojure. In particular we focus on two features of it: the way information (data) is represented and the fact that it is a Lisp.&lt;/p&gt;

&lt;p&gt;In Clojure data is represented with relatively few elements that are combined together. Take for example a scenario where we want to a profile of Spider-Man, as taken from the Marvel wiki entry on Spider-Man &lt;a href=&#34;http://marvel.com/universe/Spider-Man_(Peter_Parker)&#34; target=&#34;_blank&#34;&gt;Spider-Man&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The full name of Spider-Man can be represented in text from as a string. Like in many other languages the text is place in between quotation marks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;&amp;quot;Peter Benjamin Parker&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the numbers to represent his relative power in the Marvel universe, we use natural numbers (we leave the concepts and issues surrounding very large or floating point numbers out in this article). In case of Spider-Man his durability is 5:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course having just a value of the name and the durability of Spider-Man just floating around makes the representation somewhat incomplete, as they are not attached to the concepts of &amp;ldquo;name&amp;rdquo; or &amp;ldquo;durability&amp;rdquo;. Just like how Spider-Man needs buildings to sling off of, we need are representation for these to link with the values. In Clojure, keywords are often used for this purpose.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;:real-name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;:spider-man-spec.core/name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;::durability
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keywords are symbolic identifiers. Think of them as symbols, much like one would use a string, but with some special powers attached. They are text that are prefaced by &amp;ldquo;:&amp;ldquo;, as it can be seen in the keyword &lt;code&gt;:real-name&lt;/code&gt;. They have the ability to be namespace-qualified, such as &lt;code&gt;:spider-man-spec.core/name&lt;/code&gt; which indicates that this is the keyword in the &lt;code&gt;spider-man-spec.core&lt;/code&gt; namespace. Finally, when writing internally to the library which uses the namespace, or when aliasing to it, we can just shorten the keyword with &amp;ldquo;::&amp;ldquo;, such as in &lt;code&gt;::durability&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Keywords come with some nice implementation details, such as fast equality checks and some other powers we will show in the future. This makes them the preferred keys in data-structures such as maps. And speaking of maps they allow the description of information in key-value pairs, as written between curly braces in the small example below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;  {::name &amp;quot;Spider-Man&amp;quot;
   ::real-name &amp;quot;Peter Benjamin Parker&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The curly backets around the pairs express the keys and values in a map in Clojure. In the above example &lt;code&gt;::name&lt;/code&gt; and &lt;code&gt;::real-name&lt;/code&gt; are the key and value pairs for &lt;code&gt;&amp;quot;Spider-Man&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;Peter Benjamin Parker&amp;quot;&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Maps are just one of the ways one can describe a collection of elements. You also have sets, collections in which are element is unique. This can be done with a hashtag and some curly brackets &amp;ldquo;#{}&amp;rdquo;. In the example below we list the current and former affiliations of Spider-Man.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;{::current-affiliations #{&amp;quot;Avengers&amp;quot;}
 ::former-affiliations #{&amp;quot;Secret Defenders&amp;quot; &amp;quot;New Fantastic Four&amp;quot; &amp;quot;The Outlaws&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that how sets are used within maps to represent this knowledge. This is actually a common way to represent knowledge in Clojure: you combine all the various data representations directly. This way you can have a list containing maps, with keywords as keys and values that contain maps and strings, where the maps contain numbers, etc. You have these data-structures in pretty much all commonly used programming languages. Where Clojure differs from many is that it does not put (almost any) sugaring or abstraction on top.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/2018-04/spec-stacular-spider-man/spider-man-swinging.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Spider-Man swinging around the city. © Marvel Studios&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Just as Spider-Man is often at his best when he is just being &amp;ldquo;plain old Spidey&amp;rdquo;, having data represented this way has some nice advantages. The biggest is simplicity. Instead of learning to work with specific wrappers, objects, prototypes, etc on top of this data, that can differ between applications and libraries, it is enough to learn how to handle and manipulate maps, list, sets once. This knowledge can be then reused in any domain, and frees up the attention of the programmer to focus on the domain problem, and not the exact way the data was wrapped up in a library.&lt;/p&gt;

&lt;p&gt;This of course also means that a system, such as clojure.spec, that aims at data validation in Clojure, has to handle the above-mentioned style of composition well. But before we get ahead of ourselves lets finish up by providing the profile of Spider Man.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def spider-man-profile
  {::name &amp;quot;Spider-Man&amp;quot;
   ::real-name &amp;quot;Peter Benjamin Parker&amp;quot;
   ::identity ::secret
   ::affiliations
                   {::current-affiliations #{&amp;quot;Avengers&amp;quot;}
                    ::former-affiliations #{&amp;quot;Secret Defenders&amp;quot; &amp;quot;New Fantastic Four&amp;quot; &amp;quot;The Outlaws&amp;quot;}}
   ::power-grid {
                 ::durability 3
                 ::energy 4
                 ::fighting 5
                 ::intelligence 4
                 ::speed 5
                 ::strength 4
                 }
   }
  )


(def vulture-profile
  {::name &amp;quot;Vulture&amp;quot;
   ::real-name &amp;quot;Adrian Toomes&amp;quot;
   ::identity ::publicly-known
   ::affiliations
                   {::current-affiliations {}
                    ::former-affiliations #{&amp;quot;Sinister Twelve&amp;quot; &amp;quot;Sinister Six&amp;quot;}}
   ::power-grid {
                 ::durability 4
                 ::energy 3
                 ::fighting 4
                 ::intelligence 4
                 ::speed 5
                 ::strength 3
                 }
   }
  )

(def spider-man-characters [spider-man-profile vulture-profile])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh no, our Spider Senses should be tingling. It is the Vulture, that has shown up in our list of Spider-Man characters. In addition we just introduced some new elements in our example, that need some explanation for readers new to Clojure.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/2018-04/spec-stacular-spider-man/vulture.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Uh oh, the Vulture must be up to no good if he shows up here. © Marvel Studios&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;The first is the use of square brackets [], which indicate a list. This is a collection of elements, in this case of &lt;code&gt;spider-man-profile&lt;/code&gt; and &lt;code&gt;vulture-profile&lt;/code&gt;, that unlike a set, can have multiples of the same element.&lt;/p&gt;

&lt;p&gt;The other new type of element we use is the form of using parentheses along side def as in &lt;code&gt;(def spider-man-characters ...)&lt;/code&gt;. Expressions of these type, called symbolic expressions, or s-expressions for short, are a characteristic of the Lisp family of languages to which Clojure belongs to. In a Lisp, parts of the program are either atoms, such as &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;&amp;quot;Peter Benjamin Parker&amp;quot;&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, or an s-expression where the first element between parens is a function and the rest are parameters. For example &lt;code&gt;(+ 1 3)&lt;/code&gt;. While atoms evaluate to themselves, the s-expressions evaluate to a function with the given parameters. In the case of &lt;code&gt;(+ 1 3)&lt;/code&gt; they should evaluate to &lt;code&gt;4&lt;/code&gt;. You can also nest s-expressions, such as &lt;code&gt;(- (+ 1 3) 2)&lt;/code&gt;, which will evaluate to &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You might be thinking, &amp;ldquo;Wait, if everything is either an atom or an s-expression, what kind of villainous things are those strange brackets that one has to use to create a set, list or map!&amp;rdquo;. For all the simplicity in Clojure, it does make use of some syntactical sugar. Lists can be written &lt;code&gt;[spider-man-profile vulture-profile]&lt;/code&gt; as a shorthand for the s-expression &lt;code&gt;(list spider-man-profile vulture-profile)&lt;/code&gt;. Similar functions exist for maps and sets as well.&lt;/p&gt;

&lt;p&gt;Much like Spider-Man, who for all his powers still has to struggle with juggling a school and a job and has to make practical decisions, Clojure has to make them as well. In this case because certain things, such as maps, sets and list are used so often, it uses a shorter syntax for creating them. This does makes the language slightly more complex, but in the author&amp;rsquo;s view, it pays off.&lt;/p&gt;

&lt;p&gt;Another matter of practicality of course is that while we can nest the two profiles directly into a list, we can create variables for them to associate. The &lt;code&gt;def&lt;/code&gt; function does exactly this, and it also ensures they become part of the current namespace. For example, if the current namespace is &lt;code&gt;spider-man-spec.core&lt;/code&gt; then a &lt;code&gt;def&lt;/code&gt; of &lt;code&gt;vulture-profile&lt;/code&gt; can be referred to as &lt;code&gt;spider-man-spec.core/vulture-profile&lt;/code&gt; from other namespaces, and simply &lt;code&gt;vulture-profile&lt;/code&gt; in the current namespace. This allows us to break up the overall data in smaller parts to use.&lt;/p&gt;

&lt;p&gt;Now we finally described the profiles of both Spider-Man and the Vulture, but are they correct? The library of clojure.spec uses the notion of a spec for this. A spec is simply a function on a single parameter that returns a truthy value (in most cases a &lt;code&gt;true&lt;/code&gt; if the spec holds, &lt;code&gt;false&lt;/code&gt; if the spec does not hold).&lt;/p&gt;

&lt;p&gt;In essence this allows for many existing functions to be used as specs. For example the already existing function &lt;code&gt;string?&lt;/code&gt; checks whether a particular value is a string or not.&lt;/p&gt;

&lt;p&gt;In order to check whether a value is valid for a particular spec we can use the &lt;code&gt;s/valid?&lt;/code&gt; function. Here the &lt;code&gt;s&lt;/code&gt; stands the namespace of the spec library &lt;code&gt;clojure.spec.alpha&lt;/code&gt;, so by calling &lt;code&gt;s/valid?&lt;/code&gt; we are calling the &lt;code&gt;valid?&lt;/code&gt; function of this particular namespace.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(s/valid? string? &amp;quot;Spider-Man&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above function call will checking if &lt;code&gt;&amp;quot;Spider-Man&amp;quot;&lt;/code&gt; is indeed a string, and return &lt;code&gt;true&lt;/code&gt; if it is. On the other hand if we check whether a number is valid for this spec, using &lt;code&gt;(s/valid? string? 6)&lt;/code&gt; we instead get &lt;code&gt;false&lt;/code&gt; returned.&lt;/p&gt;

&lt;p&gt;Another way to use a spec, is to explain why a value is wrong. For example, we can call the function &lt;code&gt;explain-data&lt;/code&gt; on with the spec and an incorrect value, to get a map back with an explanation. The function call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(s/explain-data string? 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would result in the map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;{:val 6 :predicate :clojure.spec.alpha/unknown}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the above example clearly shows the value on which the spec has failed, but it denotes the predicate as unknown with &lt;code&gt;:clojure.spec.alpha/unknown&lt;/code&gt;. The solution to this is to provide a name for the spec, which the system can use to pin point if things fail. We can register any spec using the function &lt;code&gt;s/def&lt;/code&gt;. For example the functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(s/def ::name string?)

(s/def ::real-name string?)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will register the two specs under the keys &lt;code&gt;:name&lt;/code&gt; and &lt;code&gt;:real-name&lt;/code&gt; in the current namespace, i.e.: under &lt;code&gt;spider-man-spec.core/name&lt;/code&gt; and &lt;code&gt;spider-man-spec.core/name&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Now if we would aim to explain why the spec &lt;code&gt;:real-name&lt;/code&gt;  does not allow the value &lt;code&gt;6&lt;/code&gt;, it would return the explanation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;{:val 6 :predicate :spider-man-spec.core/real-name}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the predicate now identifies the spec that was not fulfilled.&lt;/p&gt;

&lt;p&gt;Specs can also be created in other ways. For example a set of values indicating the correct values can be used as a spec.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(s/def ::identity #{::secret ::publicly-known})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines a spec for identity as having two possible values: either &lt;code&gt;::secret&lt;/code&gt; or &lt;code&gt;::publicly-known&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Specs can also be defined for collections as well. The specs for current- and former affiliations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(s/def ::current-affilications (s/coll-of string? :kind set?))

(s/def ::former-affilications (s/coll-of string? :kind set?))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These specs describe that that both current- and former have to be sets of strings. The affiliations part of a profile is actually map containing both current- and former affiliations. This is defined as the spec:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(s/def ::affiliations (s/keys :req [::current-affiliations] :opt [::former-affiliations]) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which makes it requirement for affiliations to contain current-affiliations, but any former affiliations are optional.&lt;/p&gt;

&lt;p&gt;For checking whether Spider-Man has a valid profile we can use the &lt;code&gt;s/valid?&lt;/code&gt; function again. We use the following code to do just that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;    (let [spider-man-affiliations (:spider-man-spec.core/affiliations spider-man-profile)]
      (s/valid? :spider-man-spec.core/affiliations spider-man-affiliations))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;let&lt;/code&gt; form is new here, but what it essentially does is deconstructing the while &lt;code&gt;spider-man-profile&lt;/code&gt; and associating its affiliations temporarily the &lt;code&gt;spider-man-affiliations&lt;/code&gt;. This allows us to use a shorthand when calling functions, instead of writing out everything in a single line.&lt;/p&gt;

&lt;p&gt;While this value is also valid according to the spec, as the spec and the value we are checking gets more complex, it could also be useful to gather the exact value that has passed the spec. In such cases we can use &lt;code&gt;s/conform&lt;/code&gt; to gather these. The call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(s/conform :spider-man-spec.core/affiliations spider-man-affiliations)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Returns the map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;#:spider-man-spec.core{:current-affiliations #{&amp;quot;Avengers&amp;quot;}, :former-affiliations #{&amp;quot;The Outlaws&amp;quot; &amp;quot;Secret Defenders&amp;quot; &amp;quot;New Fantastic Four&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is a namespaced map, which is a feature that allows us to refer to the keywords inside a map more efficiently, instead of writing them all out in each case.&lt;/p&gt;

&lt;p&gt;The final aspect of each profile, the power grid, is also something that can be given a spec. Each of the powers can only take a whole number value from 1 until 7. We can specify this with the follow spec:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(s/def ::power-value (s/and pos-int? #(&amp;gt;= % 1) #(&amp;lt;= % 7)))

(s/def ::durability ::power-value )
(s/def ::energy ::power-value )
(s/def ::fighting ::power-value )
(s/def ::intelligence ::power-value )
(s/def ::speed ::power-value )
(s/def ::strength ::power-value )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we use the function &lt;code&gt;s/and&lt;/code&gt; to combine three specs: that the value should be a positive integer, greater than equal to 1 and less or equal to 7. Such a combined spec can then be (re-)used like any other.&lt;/p&gt;

&lt;p&gt;We can combine all the previous specs together to specify a profile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(s/def ::profile (s/keys :req [::name ::real-name ::identity ::affiliations ::power-grid] ) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this spec, both Spider-Man and Vulture are valid profiles. However, this is a problem, as it does not allow us to differentiate between a hero and a villain. Of course we do not want to get Vulture get into the same places as Spider-Man can. We must fight him, much like Spider-Man, but in our own way: by creating a spec for which the Spider-Man profile is a valid value, but not that of Vulture.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/2018-04/spec-stacular-spider-man/spider-man-vs-vulture.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Spider-Man vs Vulture © Marvel Entertainment&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;While we can make a separate requirement that only persons with the name &amp;ldquo;Spider-Man&amp;rdquo; can fulfill our new &amp;ldquo;hero-spec&amp;rdquo; this might be too restrictive. Instead we are going to spec an Avenger profile, so Spider-Man and all his friends can join in, while villains such as Vulture are kept out.&lt;/p&gt;

&lt;p&gt;The requirement for an Avenger in our system, is that any-one with the current affiliation of &lt;code&gt;&amp;quot;Avengers&amp;quot;&lt;/code&gt; is an avenger. We can describe this requirement as a spec, using a function defined for this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(defn is-avenger? [profile]
  (contains? (::current-affiliations (::affiliations profile) ) &amp;quot;Avengers&amp;quot;)
  )

(s/def ::avenger-profile (s/and ::profile is-avenger? ) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can check whether a profile is a valid Avenger, which will be true for Spider-Man but not for Vulture. Finally, we can get rid of this villain that showed up in our tutorial. In addition, this spec will also make sure that all current members of the Avengers be valid, so Spider-Man can fight freely alongside of them.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/2018-04/spec-stacular-spider-man/spider-man-avengers.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Our spec answers the question posed in this cover: Spider-Man is indeed an Avenger © Marvel Entertainment&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;So there we have it, a brief look at using the spec library to validate data. There are many things that I have not touched, such as the ability to generate values based on the Spec, other ways to compose a spec, etc.&lt;/p&gt;

&lt;p&gt;Nonetheless I hope this article gives a solid introduction, and maybe an interest to using the spec library, even if one does not have a Clojure or even a heavy programming background. The source code snippets are available at: &lt;a href=&#34;https://github.com/newres/spider-man-spec&#34; target=&#34;_blank&#34;&gt;Spider-Man-Spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a data validation problem, by all means take a swing at it with the Spec library. I convinced that the results you will get will be nothing short of spectacular.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Art of Choosing a Programming Language</title>
      <link>/post/art-of-choosing-language/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0100</pubDate>
      
      <guid>/post/art-of-choosing-language/</guid>
      <description>

&lt;p&gt;Programmers, like professionals in other fields, are passionate about their tools. One of the main elements in the toolbox of coders are programming languages. They allow their users to express solutions through code to tackle a large variety of problems in many domains.&lt;/p&gt;

&lt;p&gt;Programming is also an art, as described in the article by Donald Knuth titled &lt;a href=&#34;http://www.paulgraham.com/knuth.html&#34; target=&#34;_blank&#34;&gt;Computer Programming as an Art&lt;/a&gt; and in certain aspects of programming languages can be seen as art styles.&lt;/p&gt;

&lt;p&gt;As can be expected with many things that people are passionate about, whether viewed as a tool or an art style, coders can bond or argue about programming languages. Like philosophers of old, these discussions can go quite into depth, but to the outsider the arguments made or the sentiments behind them can be quite opaque.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/2018-03/art-of-choosing-language/schoolofathens.jpg&#34; alt=&#34;School of Athens by Raphael&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;If programming languages existed back then, I am sure they would be a hotly argued topic.&lt;/h4&gt;
        &lt;p&gt;
        School of Athens by Raphael
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Here I hope to shed some light to the casual observer on what makes programmers passionate about these languages and why some prefer one over the other. Such analysis can be quite subjective, and very much dependent on the writers experiences and preferences, but I will try my best to give an impartial overview.&lt;/p&gt;

&lt;p&gt;In theory many general purpose programming languages are capable of doing the same things. The most commonly used programming languages are Turing complete, meaning that they can all simulate the workings of any Turing machine. Without getting into the full description of what a Turing machine is, for the reader unfamiliar with the concept, this means that any of the languages can express programs for similar tasks.&lt;/p&gt;

&lt;p&gt;There are thousands of programming languages. Some older, and going back to the 50s, 60s and 70s and with considerable use still. Others have been released as recently as the last 10 years, and have gained considerable following. Given as I have mentioned that theoretically all these languages can do the same things, one could wonder why new languages are designed.&lt;/p&gt;

&lt;h2 id=&#34;history&#34;&gt;History&lt;/h2&gt;

&lt;p&gt;Historically, the original computers were instructed by a pure machine language, for example 0s and 1s. Writing programs this way can be tedious and error prone, and the results code can be very difficult to read. This is one of reasons why assembly languages were created. These are languages that are still very much tied into the instruction set of a particular machine, but in a more human readable form, where symbolic names are given for machine instructions. These would be then translated to the pure machine language, to instruct the machine.&lt;/p&gt;

&lt;p&gt;While reading and writing programs becomes easier this way, using assembly languages still has disadvantages. First, these languages are still very much tied to the hardware. Different instruction architectures can mean that a program for the same goal would have to be written differently for each architecture. Second, for many the instructions that one has to write this way are still very low level. The argument is made that with a better set of abstractions over assembly, programs can be written in a better way. A program written with such abstractions could be translated, compiled, to the required machine code specific for the required architecture.&lt;/p&gt;

&lt;p&gt;The question of which abstractions need to be utilized is at the heart of why there are so many different programming languages. People have different ideas on what these abstractions might be, what the benefits and drawbacks of applying them are. This is at the heart of why people design and use newer programming languages. In the following sections we go through some of the aspects on these abstractions.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/2018-03/art-of-choosing-language/pyramids.jpg&#34; alt=&#34;The Giza Pyramids © Robbster1983&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Much like with ancients wonders of next to a modern city, with programming languages old also gives rise to the new, and often co-exists with it .&lt;/h4&gt;
        &lt;p&gt;
        The Giza Pyramids © Robbster1983
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;paradigms-and-style&#34;&gt;Paradigms and Style&lt;/h2&gt;

&lt;p&gt;As mentioned before, there are different opinions on how programs could be constructed. There are various subjects about on which people have opinions about: how the code is organized and how it is executed, among other elements. This is very much similar to how art styles function. For example the same subject can be painted in two differing styles.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/2018-03/art-of-choosing-language/last-supper-da-vinci.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;The Last Supper (Leonardo da Vinci) one of the most famous Renaissance style paintings.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/2018-03/art-of-choosing-language/last-supper-tintoretto.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;The Last Supper (Tintoretto) depicts the same subject but in a Mannerist, proto-Baroque style.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Programming languages can be be classified on the different styles, &lt;em&gt;programming paradigms&lt;/em&gt; based on the common elements in the approaches.  Some paradigms include:&lt;/p&gt;

&lt;h3 id=&#34;imperative&#34;&gt;Imperative&lt;/h3&gt;

&lt;p&gt;Imperative code can be seen as a set of commands for the computer to perform. This type of paradigm matches very strongly with how computer hardware is working, as nearly all computer hardware is designed the execute machine language, which is in itself is written in imperative style.&lt;/p&gt;

&lt;h3 id=&#34;procedural&#34;&gt;Procedural&lt;/h3&gt;

&lt;p&gt;One of the ways one can structure a program is to group together a series of commands. These groups, &lt;em&gt;procedures&lt;/em&gt;, can then be called, used or reused as a single entity.&lt;/p&gt;

&lt;h3 id=&#34;object-oriented&#34;&gt;Object-Oriented&lt;/h3&gt;

&lt;p&gt;Object oriented code uses the notion of &lt;em&gt;objects&lt;/em&gt; to organize code. An object is an encapsulation of related state and behavior. For example, consider a software that needs to represent a vehicle. The elements of the state that describe the object, such as &lt;em&gt;colour&lt;/em&gt; and &lt;em&gt;make&lt;/em&gt;, are called attributes.  Various functionality related to the object, such as calculating the price of the car, are called methods. These concepts allow reuse, as the objects for a car and a motorcycle can share functionality.&lt;/p&gt;

&lt;h3 id=&#34;declarative&#34;&gt;Declarative&lt;/h3&gt;

&lt;p&gt;In declarative programming, one describes, or more aptly declares what the problem is as opposed to detailing the steps on how to solve it. This contrasts with imperative programming, where one gives the instructions on how to solve it directly.&lt;/p&gt;

&lt;h3 id=&#34;functional&#34;&gt;Functional&lt;/h3&gt;

&lt;p&gt;Functional programming is one form of declarative programming where programs are constructed using &lt;em&gt;functions&lt;/em&gt;, which are analogous and inspired by to mathematical functions. The intention is that these functions are ideally side effect free: their output is dependent solely on their input. This can make code easier to understand and allows for easier use of code written this way.&lt;/p&gt;

&lt;h3 id=&#34;logic&#34;&gt;Logic&lt;/h3&gt;

&lt;p&gt;The logic paradigm is based around expressing code as a set of logical axioms. These axioms can then be used as a from of knowledge base to derive new knowledge and query. The programs themselves then can be posed as a query in this system. For example, if the knowledge is defined with the axioms &amp;ldquo;Tweety is a bird&amp;rdquo; and &amp;ldquo;Birds are animals&amp;rdquo;, the system should be able to answer the queries: &amp;ldquo;Is Tweety and animal?&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;A language can focus on supporting a particular paradigm heavily or have a strong preference for it. For example &lt;a href=&#34;https://www.haskell.org/&#34; target=&#34;_blank&#34;&gt;Haskell&lt;/a&gt; or &lt;a href=&#34;https://clojure.org/&#34; target=&#34;_blank&#34;&gt;Clojure&lt;/a&gt; lean quite heavily on the functional paradigm, while &lt;a href=&#34;http://www.swi-prolog.org/&#34; target=&#34;_blank&#34;&gt;Prolog&lt;/a&gt; is one of the main logic programming languages. Others, provide an explicit merge of various methodologies, such as &lt;a href=&#34;https://www.scala-lang.org/&#34; target=&#34;_blank&#34;&gt;Scala&lt;/a&gt; that combines elements of object orientation and functional programming.&lt;/p&gt;

&lt;p&gt;Preference for a particular language can go beyond the programming paradigms used. Syntax, the structure of how code is written, can matter quite a bit for person&amp;rsquo;s view on a particular language. For example &lt;a href=&#34;https://www.python.org/&#34; target=&#34;_blank&#34;&gt;Python&lt;/a&gt; uses indentation for managing the control flow of the code, as opposed to symbols in other languages.&lt;/p&gt;

&lt;p&gt;Such preference can go even beyond the actual code itself to the tools one uses to write. While any text editor for editing text can often suffice, people can have differing expectations with regards to integrated development environments (IDEs) or other tools to edit and analyze the code. The lack or existence of specific tooling can also be a factor when deciding between languages.&lt;/p&gt;

&lt;h2 id=&#34;available-code-and-libraries&#34;&gt;Available Code and Libraries&lt;/h2&gt;

&lt;p&gt;Most coding is done with a particular purpose in mind, and it is rarely the case that the programmer can build everything from the ground up for such a task. In order to build interesting programs, one has to utilize existing knowledge, much like someone would utilize knowledge in a library to come to new insights.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;/img/post/2018-03/art-of-choosing-language/bibliotheca-alexandrina.jpg&#34;  /&gt;
  &lt;figcaption&gt;
      &lt;h4&gt;The Bibliotheca Alexandrina. Photo © Carsten Whimster licensed under &lt;a href =&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt; CC BY 3.0 &lt;/a&gt;.&lt;/h4&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Existing code can be used as a foundation from which the program can be built. Roughly speaking existing code comes in three main forms. It is either being part of the language (often called the standard library of the language), some external libraries extending the language for a particular purpose, or an existing code base of the application that one can improve upon.&lt;/p&gt;

&lt;p&gt;The standard library contains various functionality included with the language itself. For example ways of manipulating files, various connection protocols, support for certain file formats, etc. Of course it is very much helpful if particular support for a certain feature that aims to use is already available with the language itself. This means less code to write and connect. On the other hand there is also some tension with regards to including too many features in the standard library, especially if certain parts of it become outdated, which enlarges the language and makes it more unwieldy.&lt;/p&gt;

&lt;p&gt;The external libraries that one can use in a language can also influence the choice of a language. Certain languages have a lot of library support for specific tasks. For example &lt;a href=&#34;https://www.python.org/&#34; target=&#34;_blank&#34;&gt;Python&lt;/a&gt; has a large and active following in the Data Science community. Other languages have a lot of support for many different tasks simply due their age and user base such as &lt;a href=&#34;https://www.java.com/en/&#34; target=&#34;_blank&#34;&gt;Java&lt;/a&gt;. By using libraries one does not need to implement certain features from scratch but can reuse existing work and focus on their specific problem at hand.&lt;/p&gt;

&lt;p&gt;Finally, not all development starts from scratch, often one has to make additions or improvement to an existing program, in which case the choice of the language has already been made. While a rewrite of the code can often be tempting, linking between two code programming languages is not always trivial. It is often a good idea to continue with an existing language.&lt;/p&gt;

&lt;p&gt;There are some exceptions to this as some languages have been designed with the ground up to inter-operate with other languages. A good example of this is &lt;a href=&#34;https://clojure.org/&#34; target=&#34;_blank&#34;&gt;Clojure&lt;/a&gt; has great interop with &lt;a href=&#34;https://www.java.com/en/&#34; target=&#34;_blank&#34;&gt;Java&lt;/a&gt; and/or &lt;a href=&#34;https://en.wikipedia.org/wiki/JavaScript&#34; target=&#34;_blank&#34;&gt;JavaScript&lt;/a&gt;. This allows it to leverage existing libraries already written, and makes it much more attractive to use.&lt;/p&gt;

&lt;h2 id=&#34;existing-knowledge&#34;&gt;Existing Knowledge&lt;/h2&gt;

&lt;p&gt;Writing code is rarely trivial, and neither is learning new programming languages. Although previous experience helps, especially when dealing with languages with known paradigms, due to slight or large differences it can take a while to get used to the new language and libraries. With constantly looming deadlines and pressure to deliver, it can make sense to minimize the work that needs to be done. It is perfectly valid to work with a language that one already knows.&lt;/p&gt;

&lt;h2 id=&#34;curiosity&#34;&gt;Curiosity&lt;/h2&gt;

&lt;p&gt;On the other hand learning a new language, especially in a new paradigm or other innovative features, can be quite interesting. It not only allows for work on existing code written in the new language but it also gives insights in how to program which is beneficial as a programmer in general no matter what language he is using.&lt;/p&gt;

&lt;h2 id=&#34;speed&#34;&gt;Speed&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, commonly used programming languages are abstractions over machine code that can do more of less the same thing computationally. What abstractions are used however can influence the speed of executing the program, as well as the time of translating the code in the programming language to machine code.&lt;/p&gt;

&lt;p&gt;A common abstraction that can influence the speed of executing the program is how memory is managed. During the running of a program certain information needs to be stored. A way to do this is to allocate space in the computers memory, keep it around while needed and remove it afterwards. This latter portion, can be quite difficult to manage manually, as if one does it prematurely the program might crash or have other bugs. Not removing it would fill the memory with garbage, which makes the program use up more and more memory till it crashes.&lt;/p&gt;

&lt;p&gt;A solution to these problems is automatic garbage collection: a way for the computer to automatically manage and clean up memory. While this is a good solution in many cases, this process comes with an overhead, and can be unpredictable when the time and resource consuming cleanup happens. In most cases this overhead is trivial to pay for eliminating a whole suite of potential bugs. However in certain scenarios, such as real-time high performance games, it could be too much to pay.&lt;/p&gt;

&lt;p&gt;The other issue of speed, translating the code from the programming language to machine code, can also be a consideration. Development requires making changes to code and checking whether the changes work. If the process of getting feedback takes a long time, due to these translations, it can destroy a programmers productivity. &lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34;&gt;Golang&lt;/a&gt; is a language that is explicitly designed for fast compilation.&lt;/p&gt;

&lt;h2 id=&#34;safety&#34;&gt;Safety&lt;/h2&gt;

&lt;p&gt;Safety is in many cases the flip side to the speed argument. Certain abstractions cost you in speed but provide you with safety in return. Different languages tend to make different trade-offs with this regard. For example one of the relatively new languages, &lt;a href=&#34;https://www.rust-lang.org/en-US/&#34; target=&#34;_blank&#34;&gt;Rust&lt;/a&gt; aims at focus on zero cost abstractions: abstractions with little to no run-time performance penalty.&lt;/p&gt;

&lt;p&gt;One contentious aspect of safety is the use of type systems. Types allow the coder to specify various categories, such as numbers, persons, cars, etc as well as their requirements to be fulfilled within the context of the program. Types can be checked both statically, before the system is run, or dynamically, during the running of the program. Some people swear by very expressive type systems: where types can specify very detailed features of the things the program wants to represent. This then can be used for checking code for correctness, both before and during the running of a program, as well as documentation. On the other hand type checking is not free: it can make translating the compilation into machine code a much slower process. Some people also consider the writing and checking of types themselves very cumbersome during initial development, where quick iteration can be slowed down by specifying detailed types.&lt;/p&gt;

&lt;p&gt;There is a whole spectrum of possible stances with regards to type systems. For example, certain languages such as &lt;a href=&#34;https://www.haskell.org/&#34; target=&#34;_blank&#34;&gt;Haskell&lt;/a&gt; and &lt;a href=&#34;https://www.idris-lang.org/&#34; target=&#34;_blank&#34;&gt;Idris&lt;/a&gt; are designed from the ground up with very expressive type systems that are statically checked. Others, for example &lt;a href=&#34;https://www.dartlang.org/&#34; target=&#34;_blank&#34;&gt;Dart&lt;/a&gt; which started off as having optional types but adds mandatory types in the latest iteration to help with tooling, take a more balanced approach. &lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34;&gt;Golang&lt;/a&gt; explicitly has a static, but minimalist, type system that allows for fast compilation.  There are also languages, such as &lt;a href=&#34;https://clojure.org/&#34; target=&#34;_blank&#34;&gt;Clojure&lt;/a&gt; that instead of static types, use contract systems to ensure safety at run-time and allow for documentation and testing.&lt;/p&gt;

&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;While most general purpose programming languages can be made to run in all environments, they are not always available. In certain environments, such as mobile or on the web, only specific languages are supported. For example on Android &lt;a href=&#34;https://www.java.com/en/&#34; target=&#34;_blank&#34;&gt;Java&lt;/a&gt; and &lt;a href=&#34;https://www.java.com/en/&#34; target=&#34;_blank&#34;&gt;Kotlin&lt;/a&gt; are officially supported, while on the web &lt;a href=&#34;https://en.wikipedia.org/wiki/JavaScript&#34; target=&#34;_blank&#34;&gt;JavaScript&lt;/a&gt; is the current Lingua Franca of the web. This means that it can be quite a herculean effort to make other languages work in such environments, and going with the most supported option is easier.&lt;/p&gt;

&lt;p&gt;The way certain languages can get around on this hindrance is by using the more commonly supported language as the target to translate into. For example &lt;a href=&#34;https://clojurescript.org/&#34; target=&#34;_blank&#34;&gt;ClojureScript&lt;/a&gt; compiles into &lt;a href=&#34;https://en.wikipedia.org/wiki/JavaScript&#34; target=&#34;_blank&#34;&gt;JavaScript&lt;/a&gt;. And in some cases, other developers have made the effort to get frameworks up and running that allow the use of a different language, such as the use of &lt;a href=&#34;https://facebook.github.io/react-native/&#34; target=&#34;_blank&#34;&gt;React Native&lt;/a&gt; and &lt;a href=&#34;https://flutter.io/&#34; target=&#34;_blank&#34;&gt;Flutter&lt;/a&gt; that allow the use of &lt;a href=&#34;https://en.wikipedia.org/wiki/JavaScript&#34; target=&#34;_blank&#34;&gt;JavaScript&lt;/a&gt; and &lt;a href=&#34;https://www.dartlang.org/&#34; target=&#34;_blank&#34;&gt;Dart&lt;/a&gt; respectively to develop mobile applications.&lt;/p&gt;

&lt;h2 id=&#34;the-team-and-beyond&#34;&gt;The Team and Beyond&lt;/h2&gt;

&lt;p&gt;One final aspect of choosing a programming language, which can be surprisingly significant, is which language is beneficial to the team, as opposed to an individual developer. Different teams bring different expertise to the table, and while most professionals are often quite willing and able to use a new language if it is most suited to the task at hand, this can still be a cost that might be better spent on developing the application. From an employers perspective it can also often be beneficial to stick to more commonly used languages as it can be easier to find future employees versed in the language used. On the other hand, there are many professionals that would be quite willing to jump on the chance of using the latest programming languages, in which case the choice for a newer or more niche language can be a competitive advantage from a recruiting perspective.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I hope this article gave some insight on why programmers pick and argue about programming languages. Despite all the various differences and arguments it is also very important to note, that great software has been written in many different languages, that is both excellent code and solves important problems. And while picking the right tool for the job is an important, it can be just an aspect of the art of solving problems with code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Interlinked</title>
      <link>/post/interlinked-data/</link>
      <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/interlinked-data/</guid>
      <description>&lt;p&gt;&lt;em&gt;This article contains some very minor spoilers for the Blade Runner 2049 movie. If you have not seen it yet, by all means do, it is really good.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;And blood-black nothingness began to spin&amp;hellip; A system of cells interlinked within cells interlinked within cells interlinked within one stem&amp;hellip; And dreadfully distinct against the dark, a tall white fountain played.&amp;rdquo;&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/interlinked-data/palefire.jpg&#34; alt=&#34;Cover of the novel Pale Fire © Berkley Medallion&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Pale Fire by Vladimir Nabokov&lt;/h4&gt;
        &lt;p&gt;
        Cover of the novel Pale Fire © Berkley Medallion
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;The above is a quote from the poem &lt;em&gt;Pale Fire&lt;/em&gt;. It occurs in the novel titled &lt;em&gt;Pale Fire&lt;/em&gt; by Vladimir Nabokov which has been recently used in the movie &lt;em&gt;Blade Runner 2049&lt;/em&gt;. In the movie it was part of the Baseline test, a way to test the emotional response of a Replicant. The reason they undergo this process is because their creators fear that the connections they might make in their lives would give them emotions that would interfere with their intended purpose.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/interlinked-data/bladerunner2049.png&#34; alt=&#34;Poster for the movie © Columbia Pictures&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Blade Runner 2049&lt;/h4&gt;
        &lt;p&gt;
        Poster for the movie © Columbia Pictures
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;In life, such relationships always surround us. They are not just between people, but in our work, in our beliefs, in our art and in the knowledge we represent.&lt;/p&gt;

&lt;p&gt;Suppose we intend to describe the link between the movie &lt;em&gt;Blade Runner&lt;/em&gt; and the book &lt;em&gt;Pale Fire&lt;/em&gt;. We can summarize this information with a number of facts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Blade Runner is a movie. 
Blade Runner has a character named K.
K is a Replicant.
Replicants must pass a Baseline Test.
Baseline Test is based on the poem Pale Fire.
Pale Fire is written by Vladimir Nabokov.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above facts show that the links that can tie together various pieces of knowledge. One can trace the connections from a simple description of a movie, released in 2017, to the author Vladimir Nabokov, as was intended by the writers of the movie.&lt;/p&gt;

&lt;p&gt;Although the above recitation of facts is easy to follow, from a knowledge representation perspective one can find some issues with it.&lt;/p&gt;

&lt;p&gt;First the description is imprecise. As the &lt;em&gt;Blade Runner&lt;/em&gt; could refer to the newer &lt;em&gt;Blade Runner 2049&lt;/em&gt; movie as opposed to the 1982 original titled &lt;em&gt;Blade Runner&lt;/em&gt;.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/interlinked-data/bladerunner.jpg&#34; alt=&#34;Blade Runner movie poster © 1982 The Ladd Company&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;The first movie titled Blade Runner&lt;/h4&gt;
        &lt;p&gt;
        Blade Runner movie poster © 1982 The Ladd Company
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Second the set of facts is incomplete. The poem &lt;em&gt;Pale Fire&lt;/em&gt; is indeed written by Vladimir Nabokov, but it is presented in the book &lt;em&gt;Pale Fire&lt;/em&gt;, also written by Nabokov as the work of the fictional poet &lt;em&gt;John Shade&lt;/em&gt;. The set of facts here fails to make the explicit distinction between &lt;em&gt;Pale Fire (poem)&lt;/em&gt; and &lt;em&gt;Pale Fire (book)&lt;/em&gt;, and that the poem is contained in the book.&lt;/p&gt;

&lt;p&gt;Third, and perhaps most importantly, the above list of facts relies a lot on the users grasp of the English natural language. For a program, it can be surprisingly difficult to understand the relationships such as &amp;ldquo;is a&amp;rdquo;, &amp;ldquo;is based on&amp;rdquo;, &amp;ldquo;named&amp;rdquo;, etc between the various elements in the text.&lt;/p&gt;

&lt;p&gt;These issues seem somewhat nit-picky, as this information can be derived from the rest of the article. However this means that the knowledge in the summary does not stand on its own. If those facts are detailed without the rest of the article, or if the reader of them is a machine, and not a person that can easily add some context, they might lead them to incorrect or insufficient conclusions. They might get wrong information that the 1982 movie Blade Runner has a character named K, or fail to see the link that poem is contained in the book by the same author. And although in the case of Blade Runner, these issues might seem small, this is different if the knowledge relates to financial, legal or clinical domains. Here, mistakes or omissions can be costly.&lt;/p&gt;

&lt;p&gt;Having a larger list of more detailed facts can help with these issues, but to a certain extent they still remain due to the ambiguity of the natural language. In addition the fact that is often very easy to skip over implicit details. This is especially true for the issue of a computer not being able to make (enough) sense of this information.&lt;/p&gt;

&lt;p&gt;A proposed solution to these issues is &lt;a href=&#34;https://www.w3.org/standards/semanticweb/data&#34; target=&#34;_blank&#34;&gt;Linked Data&lt;/a&gt; and in particular &lt;a href=&#34;https://www.w3.org/standards/techs/rdf#w3c_all&#34; target=&#34;_blank&#34;&gt;Resource Description Framework (RDF)&lt;/a&gt;, with which Linked Data data can be expressed. These technologies allow us to represent the above facts in a more formal and precise way, that can make it both human and machine read- and write-able.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/interlinked-data/rdf.png&#34; alt=&#34;Logo of RDF © W3C&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Resource Description Framework&lt;/h4&gt;
        &lt;p&gt;
        Logo of RDF © W3C
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;One significant feature of RDF is that requires precise naming. Many elements of it are either a &lt;a href=&#34;https://en.wikipedia.org/wiki/International_Resource_Identifier&#34; target=&#34;_blank&#34;&gt;International Resource Identifier (IRI)&lt;/a&gt; or some raw data-types. Good examples of the former are URLs, such as the link to this website: &lt;a href=&#34;http://www.newresalhaider.com&#34; target=&#34;_blank&#34;&gt;http://www.newresalhaider.com&lt;/a&gt; , that allows one to find a web resource. Examples of the later are texts or numbers, such as &amp;ldquo;Blade Runner&amp;rdquo; or 15 respectively.&lt;/p&gt;

&lt;p&gt;The other significant feature of RDF is that most knowledge is represented as a set of facts, where each fact is expressed as subject, predicate object triples. For example the fact &amp;ldquo;Blade Runner is a movie&amp;rdquo; is expressed with the subject &amp;ldquo;Blade Runner&amp;rdquo; the predicate &amp;ldquo;is a&amp;rdquo; and the object &amp;ldquo;movie&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Putting this together in RDF (using the &lt;a href=&#34;https://www.w3.org/TR/turtle/&#34; target=&#34;_blank&#34;&gt;Turtle&lt;/a&gt; notation) you would get a triple such as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Turtle&#34;&gt;&amp;lt;http://www.newresalhaider.com/ontologies/bladerunner/blade-runner&amp;gt; &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&amp;gt; &amp;lt;http://www.newresalhaider.com/ontologies/bladerunner/movie&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example is an RDF way of saying &amp;ldquo;Blade Runner is a type of movie&amp;rdquo; or alternatively &amp;ldquo;Blade runner is a movie&amp;rdquo;. This type of representation shows us a couple of benefits. First we are now being more precise as each element in the triple can refer to one specific resource, for example Blade Runner or Movie, where there IRI makes sure we do not necessarily confuse the term with anything else. Second this also shows off the fact that you can link to resources from different places: the predicate &amp;ldquo;type&amp;rdquo; is from a completely different domain. This allows us to re-use knowledge that has already been defined. As one can expect saying something is of a &amp;ldquo;type&amp;rdquo;, for example an apple is a type of a fruit, is actually very common. This is one of the main strengths of what makes Linked Data so powerful, one can re-use knowledge already stated.&lt;/p&gt;

&lt;p&gt;Typing out the full IRI each time can be pretty bothersome, and it does not help the readability either. Thankfully we can define a common prefix we use separately, and just write the last part of the IRI in each case. In this case we define a base prefix and we refer to subject and object by &amp;ldquo;&amp;lt;#blade-runner&amp;gt;&amp;rdquo; and &amp;ldquo;&amp;lt;#movie&amp;gt;&amp;rdquo; respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Turtle&#34;&gt;@base &amp;lt;http://www.newresalhaider.com/ontologies/bladerunner&amp;gt; .
&amp;lt;#blade-runner&amp;gt; &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&amp;gt; &amp;lt;#movie&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can do similar things when linking elements that have been already defined elsewhere. In this case we define a prefix to use as an abbreviation while writing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Turtle&#34;&gt;@base &amp;lt;http://www.newresalhaider.com/ontologies/bladerunner&amp;gt; .
@prefix rdf: &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;gt; .

&amp;lt;#blade-runner&amp;gt; rdf:type &amp;lt;#movie&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In practice, &amp;ldquo;rdf:type&amp;rdquo; as a predicate is so common that there is an even simpler notation. We can use &amp;lsquo;a&amp;rsquo; as a predicate, which is in line with what we intend to express: &amp;ldquo;Blade Runner is a movie&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The resulting RDF facts look as follows (note that the rdf prefix could be omitted here as the &amp;ldquo;a&amp;rdquo; abbreviation does not make it necessary):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Turtle&#34;&gt;@base &amp;lt;http://www.newresalhaider.com/ontologies/bladerunner&amp;gt; .
@prefix rdf: &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;gt; .

&amp;lt;#blade-runner&amp;gt; a &amp;lt;#movie&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we aim to write something that is just a text as a subject, say when referring to the title of a movie , we can do that as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Turtle&#34;&gt;@base &amp;lt;http://www.newresalhaider.com/ontologies/bladerunner&amp;gt; .
@prefix rdf: &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;gt; .

&amp;lt;#blade-runner&amp;gt; a &amp;lt;#movie&amp;gt;.
&amp;lt;#blade-runner&amp;gt; &amp;lt;#title&amp;gt; &amp;quot;Blade Runner 2049&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this way of writing, we can actually rewrite our original set of facts as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Turtle&#34;&gt;@base &amp;lt;http://www.newresalhaider.com/ontologies/bladerunner&amp;gt; .
@prefix rdf: &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;gt; .
@prefix foaf: &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt; .

&amp;lt;#blade-runner&amp;gt; a &amp;lt;#movie&amp;gt;.
&amp;lt;#blade-runner&amp;gt; &amp;lt;#title&amp;gt; &amp;quot;Blade Runner 2049&amp;quot;.
&amp;lt;#blade-runner&amp;gt; &amp;lt;#has-character&amp;gt; &amp;lt;#K&amp;gt;.
&amp;lt;#K&amp;gt; foaf:name &amp;quot;K&amp;quot;.
&amp;lt;#K&amp;gt; a &amp;lt;#replicant&amp;gt;.
&amp;lt;#replicant&amp;gt; &amp;lt;#must-pass&amp;gt; &amp;lt;#baseline-test&amp;gt;.
&amp;lt;#baseline-test&amp;gt; &amp;lt;#based-on&amp;gt; &amp;lt;#pale-fire-poem&amp;gt;.
&amp;lt;#pale-fire-poem&amp;gt; &amp;lt;#included-in&amp;gt; &amp;lt;#pale-fire-book&amp;gt;.
&amp;lt;#pale-fire-book&amp;gt; &amp;lt;#written-by&amp;gt; &amp;lt;#nabokov&amp;gt;.
&amp;lt;#nabokov&amp;gt; foaf:name &amp;quot;Vladimir Nabokov&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this version we suddenly defined our list of facts in a more formal manner than previously. This makes it much more simpler for machines to understand this set of facts. In fact we actually used the &lt;a href=&#34;https://en.wikipedia.org/wiki/FOAF_(ontology)&#34; target=&#34;_blank&#34;&gt;Friend of a Friend (FOAF) ontology&lt;/a&gt; to use the notion of name that is also used when talking about relationships between people. In fact, one could argue that using an existing movie dataset, such as the &lt;a href=&#34;https://old.datahub.io/dataset/linkedmdb&#34; target=&#34;_blank&#34;&gt;Linked Movie Database&lt;/a&gt; would have been even better, which we will leave as an exercise for the reader.&lt;/p&gt;

&lt;p&gt;Hopefully I could show a glimpse of the possibilities the &lt;a href=&#34;https://www.w3.org/standards/semanticweb/&#34; target=&#34;_blank&#34;&gt;Semantic Web&lt;/a&gt; for which Linked Data forms the basis, with this example. Of course the above is just scratching the surface of what it can be done with RDF, Linked Data. With each addition, our set of facts could grow. One could go beyond a single movie and build a document of poems that are references in movies, or a knowledge base of the Blade Runner franchise. It might be easier than one expects, due to the fact that knowledge, much like people are&amp;hellip;&lt;/p&gt;

&lt;p&gt;Interlinked.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Trouble with Triples</title>
      <link>/post/trouble-with-triples/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0100</pubDate>
      
      <guid>/post/trouble-with-triples/</guid>
      <description>&lt;p&gt;In the Star Trek episode &amp;ldquo;The Trouble with Tribbles&amp;rdquo; the crew of the starship Enterprise encounters creatures called Tribbles. They are cute, simple creatures of mysterious origin that seem harmless at first but when they multiply the pose a big problem for the ship and the crew.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;/img/post/trouble-with-triples/tribbles.jpg&#34; alt=&#34;Tribbles © 1967 Paramount Pictures&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Tribbles&lt;/h4&gt;
        &lt;p&gt;
        Tribbles © 1967 Paramount Pictures
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Representing and reasoning with knowledge have surprisingly similar problems. A single fact on its own is a relatively straightforward affair. A fact, such as &lt;strong&gt;&amp;ldquo;Tribbles are cute&amp;rdquo;&lt;/strong&gt; can be represented with only three parts of a triple: a subject &lt;strong&gt;Tribbles&lt;/strong&gt;, a predicate &lt;strong&gt;are&lt;/strong&gt; and an object &lt;strong&gt;cute&lt;/strong&gt;. Things can get quite a bit more difficult when there are more facts/triples: &lt;strong&gt;&amp;ldquo;Tribbles are round&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;Tribbles are furry&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;Tribbles originate from Iota Geminorum IV&amp;rdquo;&lt;/strong&gt;, and other millions of facts that one could have about such a species. This is especially true when one takes into the account that the fact that knowledge can be interlinked &lt;strong&gt;&amp;ldquo;Iota Geminorum IV is a planet&amp;rdquo;&lt;/strong&gt;,  &lt;strong&gt;&amp;ldquo;Iota Geminorum IV is also known as Fafniri&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;Iota Geminorum IV is also known as Tribble Prime&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This makes representing and reasoning with facts a non-trivial process. A system that holds all this knowledge should be able to answer a query such as &lt;strong&gt;&amp;ldquo;Do Tribbles originate from Fafniri?&amp;rdquo;&lt;/strong&gt; with a yes, based on the facts &lt;strong&gt;&amp;ldquo;Tribbles originate from Iota Geminorum IV&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;Iota Geminorum IV is a planet&amp;rdquo;&lt;/strong&gt; and &lt;strong&gt;&amp;ldquo;Iota Geminorum IV is also known as Fafniri&amp;rdquo;&lt;/strong&gt;, even in the context of millions of other triples.&lt;/p&gt;

&lt;p&gt;Another interesting issue with representing facts is the context of the information. To us the viewers, and initially to the crew of the Enterprise, Tribbles look like harmless and adorable creatures. To the Klingons they are an ecological menace and their mortal enemies. How such &amp;ldquo;knowledge about knowledge&amp;rdquo; is represented and used is often a challenging problem.&lt;/p&gt;

&lt;p&gt;Various technologies have been proposed to deal with the above-mentioned issues. &lt;a href=&#34;https://www.w3.org/standards/semanticweb/&#34; target=&#34;_blank&#34;&gt;The Semantic Web technologies&lt;/a&gt; of &lt;a href=&#34;https://www.w3.org/standards/semanticweb/data&#34; target=&#34;_blank&#34;&gt;Linked Data&lt;/a&gt; and &lt;a href=&#34;https://www.w3.org/standards/techs/owl#w3c_all&#34; target=&#34;_blank&#34;&gt;Ontologies&lt;/a&gt; in particular have been designed around solving many of these problems. Nonetheless there is room for improvement. In the future I hope to be able to explain how these techniques can be utilized and perhaps lessen the pain points that currently surround (the use of) them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>/post/introduction/</link>
      <pubDate>Sun, 14 Jan 2018 00:00:00 +0100</pubDate>
      
      <guid>/post/introduction/</guid>
      <description>&lt;p&gt;Welcome to the first post on my blog on which hopefully many will follow. My intention is to write about knowledge representation, reasoning, AI and coding, in an easily digestible but in depth-way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Legal Regulatory Compliance Within The Financial Domain.</title>
      <link>/project/legal-banking-compliance/</link>
      <pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/legal-banking-compliance/</guid>
      <description>&lt;p&gt;Regulatory compliance is the goal of an organization to ensure it complies with all the relevant policies, regulations and laws. Failure to comply can have grave consequences for an organization, with huge fines and penalties being imposed. Regulatory pressure has been increasing over the years, with new and more complex regulation being enacted. This is especially true for the financial sector, where in the wake of the financial crisis, new policies and laws where enacted, both internal and external, to prevent a similar crisis happening in the future.&lt;/p&gt;

&lt;p&gt;These new and changing policies and laws give a huge challenge for financial organizations. These issues get compounded by fact that in a global world, internal, national and international regulations create an interwoven set of rules that need to be interpreted and applied on various financial products and services. Ensuring this compliance, is a time and expertise intensive task that often needs to be done manually. Automating these tasks is a huge challenge due to the fact that more traditional techniques are often ill equipped to tackle such an ever changing and complex domain in a way that is transparent to the domain experts and regulators.&lt;/p&gt;

&lt;p&gt;In this project, the goal is to find innovative techniques and solutions to the issue of regulatory compliance in the legal and financial domain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Smart Industry Software</title>
      <link>/project/innius/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/innius/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ontology Enabled Clinical Software</title>
      <link>/project/clinical-semantics/</link>
      <pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/clinical-semantics/</guid>
      <description>&lt;p&gt;The time of clinical health professionals is incredibly valuable. Software can alleviate the burden of physicians, nursers and other health experts and allow them to provide better, more effective health care to patients.&lt;/p&gt;

&lt;p&gt;Creating, maintaining and using software in clinical environments is a difficult process. Not only it is paramount that such software needs to be correct, it has to have an understanding of highly domain specific knowledge about clinical processes in order to provide beneficial support to health professionals.&lt;/p&gt;

&lt;p&gt;Semantic Web technologies, in particular anthologies enable better clinical software. Ontologies allow for a formal and explicit way to model knowledge that is understandable for both clinicians and machines alike.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semantic Aware Software Analysis</title>
      <link>/project/semantic-software-analysis/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/semantic-software-analysis/</guid>
      <description>&lt;p&gt;Software bugs and errors have a monumental negative impact on society. Not only can they have huge monetary cost, ranging into billions of dollars annually in the United States alone, but in some cases can even lead to disasters that lead to the loss of life. Preventing such issues from happening requires a large amount of effort in designing and maintaining software.&lt;/p&gt;

&lt;p&gt;However designing and maintaining error free software remains a difficult problem. Not only is software getting more complex, its correct functioning often depends on highly specific domain knowledge of its purpose and its environment. Therefor manually checking the correctness of the software is expensive in both time and available expertise.&lt;/p&gt;

&lt;p&gt;A potential solution that was proposed for this is using machine understandable domain knowledge to help automate software maintenance tasks. Formal ontologies have been proposed and used in various fields to make domain knowledge explicit and usable for both humans and software. In particular during my thesis work, titled &amp;ldquo;An Ontology Based Framework for Specification Mining and Dynamic Program Analysis&amp;rdquo;, the use of ontologies to help understand the working of a running program were successfully explored. In particular it was shown that for a category of bugs, general ontologies such as WordNet, can be used find issues issues from program traces.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integrating existing large scale medical laboratory data into the semantic web framework</title>
      <link>/publication/medical-data-semantic/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/publication/medical-data-semantic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A cross-platform benchmark framework for mobile semantic web reasoning engines</title>
      <link>/publication/benchmark-framework/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/publication/benchmark-framework/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A comparison of mobile rule engines for reasoning on semantic web based health data</title>
      <link>/publication/comparison-mobile-rule-engines/</link>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/publication/comparison-mobile-rule-engines/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Towards Guideline Compliant Clinical Decision Support System Integration in Smart and Mobile Environments: Formalizing and Using Clinical Guidelines For Diagnosing Sleep Apnea</title>
      <link>/publication/towards-cdss-mobile/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/publication/towards-cdss-mobile/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Execution Trace Exploration and Analysis using Ontologies</title>
      <link>/publication/execution-trace-analysis/</link>
      <pubDate>Tue, 27 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>/publication/execution-trace-analysis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>An Approach for Modeling Dynamic Analysis using Ontologies</title>
      <link>/publication/approach-da-ontologies/</link>
      <pubDate>Mon, 12 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/publication/approach-da-ontologies/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
