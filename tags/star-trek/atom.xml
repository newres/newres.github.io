<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - Star Trek</title>
    <link href="https://www.newresalhaider.com/tags/star-trek/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://www.newresalhaider.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2020-02-02T00:00:00+00:00</updated>
    <id>https://www.newresalhaider.com/tags/star-trek/atom.xml</id>
    <entry xml:lang="en">
        <title>Darmok in core.logic</title>
        <published>2020-02-02T00:00:00+00:00</published>
        <updated>2019-02-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/darmok-core-logic/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/darmok-core-logic/</id>
        
        <content type="html">&lt;p&gt;One of the greatest Star Trek episodes is titled &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Darmok&quot;&gt;Darmok&lt;&#x2F;a&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Star_Trek:_The_Next_Generation&quot;&gt;Star Trek: The Next Generation&lt;&#x2F;a&gt;.  It has the hallmarks of a great Star Trek: TNG episode: a first contact between two civilizations and a dilemma that is not solved by violence but by thinking and understanding.&lt;&#x2F;p&gt;
&lt;p&gt;One of the nicest logic programming languages is &lt;a href=&quot;http:&#x2F;&#x2F;minikanren.org&#x2F;&quot;&gt;miniKanren&lt;&#x2F;a&gt;. This is due to the fact that it is a small, relatively easy to understand &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Logic_programming&quot;&gt;Logic Programming (LP)&lt;&#x2F;a&gt; language and has implementations in many programming languages. This later feature allows for logic programming features to be used in many different environments, as a logic programming &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain-specific_language&quot;&gt;Domain-Specific language (DSL)&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;A popular implementation of miniKanren is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;core.logic&quot;&gt;core.logic&lt;&#x2F;a&gt; library of the &lt;a href=&quot;https:&#x2F;&#x2F;clojure.org&#x2F;&quot;&gt;Clojure&lt;&#x2F;a&gt; programming language. In this article we aim to introduce miniKanren&#x2F;core.logic by encoding story elements of the Darmok episode of Star Trek: TNG (some spoilers for the episode will follow). &lt;&#x2F;p&gt;
&lt;p&gt;The episode is based around the fact that the Federation and the Tamarian people aim to establish successful first contact with each other. From the Federation, the crew of the starship Enterprise are sent to the planet El-Adrel where a Tamarian ship awaits them. Unfortunately attempts at communication fail from both sides and lead to some dangerous situations. The difficulty of communication arises from the fact that Tamarians communicate exclusively through allegory. This means that it is not enough to just decipher the words and grammar used in the Tamarian language, but the crew of the Enterprise must also understand the myths and historical events to which these allegories refer to. Within the episode multiple allegories are used by the Tamarians, such as with the phrase &amp;quot;Darmok and Jalad at Tanagra&amp;quot;, that utterly baffle the crew at first. However due to shared dangers and cooperation by the captain of the Enterprise, Picard, and the captain of the Tamarian ship, Darmok, they start to understand each other. In the end a successful first contact is made. This is captured by the newly coined allegory for first contact in the Tamarian language: &amp;quot;Picard and Dathon at El-Adrel&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;In this article we will use core.logic to write a logic program to represent the allegories used in the Darmok episode and to generate templates of the Darmok story through a sequence of allegories. A logic program is a bit different than the programs most people are used to. Instead of giving precise instructions to the computer one instead writes a goal, or a group of goals, that provide some logical restrictions on what one intends to achieve. With these goals the logic programming system can find the right answers. Note that the source for the code used this article can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;darmok-core-logic&quot;&gt;here&lt;&#x2F;a&gt; in case you want to experiment along while reading this article.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start off with a small logic program that can translate the Tamarian allegory that represents cooperation, the phrase &amp;quot;Darmok and Jalad at Tanagra&amp;quot;. We aim to translate this allegory to an equivalent allegory based on a human myth, as well as the English translation for it: &amp;quot;cooperation&amp;quot;. &lt;&#x2F;p&gt;
&lt;p&gt;In order to do this we give the Clojure definition of this goal as a logic program, then explain each element of it and how to use it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;cooperation &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[tam] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[hum] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh and Ekidu at Uruk.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[eng] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cooperation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])]))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First lets decipher the above definition. For people, unfamiliar with Clojure, the form &lt;code&gt;(defn cooperation [tam hum eng] ... )&lt;&#x2F;code&gt; defines a function named &lt;code&gt;cooperation&lt;&#x2F;code&gt; with the parameters &lt;code&gt;tam hum eng&lt;&#x2F;code&gt;. The part with &lt;code&gt;(l&#x2F;conde ... )&lt;&#x2F;code&gt; is a shorthand for &lt;code&gt;(core.logic&#x2F;conde ... )&lt;&#x2F;code&gt;; we will use &lt;code&gt;l&lt;&#x2F;code&gt; as the abbreviation for the &lt;code&gt;core.logic&lt;&#x2F;code&gt; namespace in the rest of this article. This &lt;code&gt;l&#x2F;conde&lt;&#x2F;code&gt; part functions as a way to connect various goals together. It creates a disjunction (elements separated by OR) of separate vectors of goals which it considers as conjunction (elements separated by AND). For people a bit familiar with boolean logic this a way to write a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Disjunctive_normal_form&quot;&gt;Disjunctive Normal Form&lt;&#x2F;a&gt;. To give a very simplified example the form &lt;code&gt;(l&#x2F;conde [A B] [C] )&lt;&#x2F;code&gt; with the goals &lt;code&gt;A, B, C&lt;&#x2F;code&gt; can be seen as a way to find the case where &lt;code&gt;(A &#x27;AND&#x27; B) &#x27;OR&#x27; C&lt;&#x2F;code&gt; holds. In the previous example &lt;code&gt;l&#x2F;conde&lt;&#x2F;code&gt; is called on a single vector of elements &lt;code&gt;[(l&#x2F;== [tam] [&amp;quot;Darmok and Jalad at Tanagra.&amp;quot;]) (l&#x2F;== [hum] [&amp;quot;Gilgamesh and Ekidu at Uruk.&amp;quot;]) (l&#x2F;== [eng] [&amp;quot;cooperation&amp;quot;])]&lt;&#x2F;code&gt;, meaning that this function wants each of the goals: &lt;code&gt;(l&#x2F;== [tam] [&amp;quot;Darmok and Jalad at Tanagra.&amp;quot;])&lt;&#x2F;code&gt; AND &lt;code&gt;(l&#x2F;== [hum] [&amp;quot;Gilgamesh and Ekidu at Uruk.&amp;quot;])&lt;&#x2F;code&gt; AND &lt;code&gt; (l&#x2F;== [eng] [&amp;quot;cooperation&amp;quot;])&lt;&#x2F;code&gt; fulfilled. &lt;&#x2F;p&gt;
&lt;p&gt;So now we know that this function takes three parameters and wants to ensure that the three goals all have to be met. But what do the goals themselves mean? They all have a similar structure in that they are using the equality in core.logic, &lt;code&gt;l&#x2F;==&lt;&#x2F;code&gt;, to unify elements. Unification is a core part of a logic programming system and it is used to constrain elements to the same possible values. For the first example &lt;code&gt;(l&#x2F;== [tam] [&amp;quot;Darmok and Jalad at Tanagra.&amp;quot;])&lt;&#x2F;code&gt;, the unification aims to ensure that the variable &lt;code&gt;tam&lt;&#x2F;code&gt; has the value of the string &lt;code&gt;&amp;quot;Darmok and Jalad at Tanagra.&amp;quot;&lt;&#x2F;code&gt;, which can be seen as the Tamarian phrase for cooperation. The other goals do this unification for the human mythology equivalent: &lt;code&gt;&amp;quot;Gilgamesh and Ekidu at Uruk.&amp;quot;&lt;&#x2F;code&gt; of this allegory, as well for the English word &lt;code&gt;&amp;quot;cooperation&amp;quot;&lt;&#x2F;code&gt;, for the variables &lt;code&gt;hum&lt;&#x2F;code&gt; and &lt;code&gt;eng&lt;&#x2F;code&gt;, respectively.&lt;&#x2F;p&gt;
&lt;p&gt;We have now given an anatomy of this logic program that does unification on phrases relating to cooperation, but how do we use it? For this we need two things: a set of logic variables and a way to tell the system to run the logic program. The function &lt;code&gt;l\run*&lt;&#x2F;code&gt; does exactly that, which for the given set of parameters tries to find all examples where the goals are fulfilled.&lt;&#x2F;p&gt;
&lt;p&gt;So if we evaluate the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;run* &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cooperation&lt;&#x2F;span&gt;&lt;span&gt; tam hum eng))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we get the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh and Ekidu at Uruk.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cooperation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What &lt;code&gt;l\run*&lt;&#x2F;code&gt; is doing is taking a given list of logic variables and tries to list all the possible values these variables can take. Here it only lists a single possible set of values for the variables &lt;code&gt;tam&lt;&#x2F;code&gt;, &lt;code&gt;hum&lt;&#x2F;code&gt; and &lt;code&gt;eng&lt;&#x2F;code&gt;. This should not be surprising as there is only exactly one way each of the variables &lt;code&gt;tam&lt;&#x2F;code&gt;, &lt;code&gt;hum&lt;&#x2F;code&gt;, and &lt;code&gt;eng&lt;&#x2F;code&gt; can be fulfilled by the &amp;quot;cooperation&amp;quot; goal based on the definition we gave above.  The variable &lt;code&gt;tam&lt;&#x2F;code&gt; gets unified with the string value &lt;code&gt;&amp;quot;Darmok and Jalad at Tanagra.&amp;quot;&lt;&#x2F;code&gt;, &lt;code&gt;hum&lt;&#x2F;code&gt; with &lt;code&gt;&amp;quot;Gilgamesh and Ekidu at Uruk.&amp;quot;&lt;&#x2F;code&gt; and &lt;code&gt;eng&lt;&#x2F;code&gt; with &lt;code&gt;&amp;quot;cooperation&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the previous case we used only &#x27;fresh&#x27; logic variables (variables that have no constraints placed upon their possible values yet), but instead we can also use a specific value in our goal instead. In the following example we only have two variables. Instead of a variable for first parameter used in the cooperation goal we give the string `&amp;quot;Darmok and Jalad at Tanagra.&amp;quot; as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;run* &lt;&#x2F;span&gt;&lt;span&gt;[hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cooperation &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; hum eng))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which gives the result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh and Ekidu at Uruk.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cooperation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are only two variables listed in the answer, as there are only two variables given for &lt;code&gt;l&#x2F;run*&lt;&#x2F;code&gt; to check in our initial case. Otherwise the answer is exactly what we would expect as there is only one possible way these variables can be bound in our logic program.&lt;&#x2F;p&gt;
&lt;p&gt;Now lets try a run where there are no possible valid answers, giving the word &lt;code&gt;&amp;quot;challenge&amp;quot;&lt;&#x2F;code&gt; as a parameter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;run* &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cooperation&lt;&#x2F;span&gt;&lt;span&gt; tam hum &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;challenge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This returns an empty list of answers: &lt;code&gt;()&lt;&#x2F;code&gt;, as there are no ways to unify the word &lt;code&gt;&amp;quot;challenge&amp;quot;&lt;&#x2F;code&gt; inside the goal of cooperation.&lt;&#x2F;p&gt;
&lt;p&gt;Given we got the basics of logic programs covered, lets expand our example into something more complex.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of one single allegory, we now define five of them based on the various allegories used in the Darmok episode. The functions representing these goals are all named after the English word translation: &lt;code&gt;failure&lt;&#x2F;code&gt;, &lt;code&gt;common-enemy&lt;&#x2F;code&gt;, &lt;code&gt;cooperation&lt;&#x2F;code&gt;, &lt;code&gt;successful-cooperation&lt;&#x2F;code&gt; and &lt;code&gt;successful-first-contact&lt;&#x2F;code&gt;. They all follow the same structure as the &lt;code&gt;cooperation&lt;&#x2F;code&gt; allegory we previously examined in detail. In addition we also define a function for representing any allegory, aptly named &lt;code&gt;allegory&lt;&#x2F;code&gt;. This is a goal that can be fulfilled by any of the allegories named above.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;failure &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[tam] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[hum] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh, his plant eaten by a snake.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[eng] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;common-enemy &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[tam] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[hum] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bull of Heaven.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[eng] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;common-enemy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;cooperation &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[tam] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[hum] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh and Ekidu at Uruk.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[eng] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cooperation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;successful-cooperation &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[tam] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad on the ocean.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[hum] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh and Ekidu, after the Bull&amp;#39;s defeat.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[eng] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;successful-cooperation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;successful-first-contact &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[tam] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[hum] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;== &lt;&#x2F;span&gt;&lt;span&gt;[eng] [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;successful-first-contact&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;allegory &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt; tam hum eng)]
&lt;&#x2F;span&gt;&lt;span&gt;           [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;common-enemy&lt;&#x2F;span&gt;&lt;span&gt; tam hum eng)]
&lt;&#x2F;span&gt;&lt;span&gt;           [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cooperation&lt;&#x2F;span&gt;&lt;span&gt; tam hum eng)]
&lt;&#x2F;span&gt;&lt;span&gt;           [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;successful-cooperation&lt;&#x2F;span&gt;&lt;span&gt; tam hum eng)]
&lt;&#x2F;span&gt;&lt;span&gt;           [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;successful-first-contact&lt;&#x2F;span&gt;&lt;span&gt; tam hum eng)]))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There should not be any very surprising elements in this part, but we give two quick observations before continuing. &lt;&#x2F;p&gt;
&lt;p&gt;First, the human equivalent for Tamarian allegories are based on the Gilgamesh story, which is also explicitly mentioned in the episode, that provides a way for captain Picard to connect with the Tamarian captain Dathon. The only exception to this is &lt;code&gt;&amp;quot;Picard and Dathon at El-Adrel.&amp;quot;&lt;&#x2F;code&gt; which is an allegory coined at the end of the episode as a term for first contact between cultures. It seems fitting to use this as an allegory from a human perspective as well. &lt;&#x2F;p&gt;
&lt;p&gt;Second, to reiterate how &lt;code&gt;l&#x2F;conde&lt;&#x2F;code&gt; works with choices, we remark that each of the named allegories in the &lt;code&gt;allegory&lt;&#x2F;code&gt; function are in their own vector (indicated by each goal inside their own &lt;code&gt;[]&lt;&#x2F;code&gt; brackets). This indicates that any of &lt;code&gt;failure&lt;&#x2F;code&gt;, &lt;code&gt;common-enemy&lt;&#x2F;code&gt;, &lt;code&gt;cooperation&lt;&#x2F;code&gt;, &lt;code&gt;successful-cooperation&lt;&#x2F;code&gt; or &lt;code&gt;successful-first-contact&lt;&#x2F;code&gt; can fulfill the goal of &lt;code&gt;allegory&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;We can test this later notion by running a short logic program for finding all possible allegories:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;run* &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory&lt;&#x2F;span&gt;&lt;span&gt; tam hum eng))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which returns:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh, his plant eaten by a snake.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt; [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bull of Heaven.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;common-enemy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt; [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh and Ekidu at Uruk.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cooperation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt; [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad on the ocean.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh and Ekidu, after the Bull&amp;#39;s defeat.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;successful-cooperation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt; [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;successful-first-contact&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This shows five possible answers because, as mentioned, any of the above allegories can fulfill the given goal.&lt;&#x2F;p&gt;
&lt;p&gt;By default &lt;code&gt;l&#x2F;run*&lt;&#x2F;code&gt; will list all possible answers for a given logic program, which is a very powerful feature for exhaustively searching for all the solutions to a given problem. However this list can be large, and even infinite! In such scenarios there is a way to limit the answers to a certain number when searching by using &lt;code&gt;l&#x2F;run&lt;&#x2F;code&gt; (note the lack of the &lt;code&gt;*&lt;&#x2F;code&gt; character) directly followed by the number of answers we want returned. &lt;&#x2F;p&gt;
&lt;p&gt;For example, the call:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;[tam hum eng]
&lt;&#x2F;span&gt;&lt;span&gt;       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory&lt;&#x2F;span&gt;&lt;span&gt; tam hum eng))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;will return only two possible answers: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh, his plant eaten by a snake.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt; [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bull of Heaven.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;common-enemy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now as we are getting a bit more familiar with the allegories in this example, we do not want to write out all three versions of each allegory each time. We can do this by defining a new goal &lt;code&gt;allegory-short&lt;&#x2F;code&gt; that succeeds for any phrase that identifies one of the five allegories:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;allegory-tam &lt;&#x2F;span&gt;&lt;span&gt;[tam]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;fresh &lt;&#x2F;span&gt;&lt;span&gt;[x y]
&lt;&#x2F;span&gt;&lt;span&gt;           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory&lt;&#x2F;span&gt;&lt;span&gt; tam x y)))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;allegory-hum &lt;&#x2F;span&gt;&lt;span&gt;[hum]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;fresh &lt;&#x2F;span&gt;&lt;span&gt;[x y]
&lt;&#x2F;span&gt;&lt;span&gt;           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory&lt;&#x2F;span&gt;&lt;span&gt; x hum y)))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;allegory-eng &lt;&#x2F;span&gt;&lt;span&gt;[eng]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;fresh &lt;&#x2F;span&gt;&lt;span&gt;[x y]
&lt;&#x2F;span&gt;&lt;span&gt;           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory&lt;&#x2F;span&gt;&lt;span&gt; x y eng)))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;allegory-short &lt;&#x2F;span&gt;&lt;span&gt;[x]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory-tam&lt;&#x2F;span&gt;&lt;span&gt; x)]
&lt;&#x2F;span&gt;&lt;span&gt;           [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory-hum&lt;&#x2F;span&gt;&lt;span&gt; x)]
&lt;&#x2F;span&gt;&lt;span&gt;           [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory-eng&lt;&#x2F;span&gt;&lt;span&gt; x)]))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;allegory-short&lt;&#x2F;code&gt; function was defined by writing out the three scenarios by which a phrase could be part of an allegory: it is either the Tamarian allegory, the Human allegory or the English translation. The only new structure we use here from core.logic is &lt;code&gt;l&#x2F;fresh&lt;&#x2F;code&gt; which lets us introduce new (fresh) logic variables which have no binding as of yet. When using the various forms of &lt;code&gt;l&#x2F;run&lt;&#x2F;code&gt; the parameters for the function are automatically given as fresh variables, but this function allows us to create them inside other parts of the logic program as well.&lt;&#x2F;p&gt;
&lt;p&gt;Now if we want to list, for example, five possible phrases that form part of an allegory we can call:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;[x]
&lt;&#x2F;span&gt;&lt;span&gt;       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory-short&lt;&#x2F;span&gt;&lt;span&gt; x))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which will return five of the possible terms that are used as part of allegories.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh, his plant eaten by a snake.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With all the functions for logic programming we built up, lets try our hand at creating a logic program that generates variants of the Darmok story expressed through a sequence of allegories. In this scenario, much like in the episode any phrase, a Tamarian- or Human allegory or their English equivalent, could be used to describe parts of the story. In essence we can represent the story as a list of phrases, for example: (&amp;quot;failure&amp;quot;, &amp;quot;Beast at Tanagra.&amp;quot; &amp;quot;Darmok and Jalad at Tanagra.&amp;quot; &amp;quot;successful-first-contact&amp;quot; ). &lt;&#x2F;p&gt;
&lt;p&gt;We could put many restrictions on the order of the phrases, but for the sake of brevity we just want to ensure that each story starts with a phrase for &lt;code&gt;failure&lt;&#x2F;code&gt; and ends with a phrase for &lt;code&gt;successful-first-contact&lt;&#x2F;code&gt; much like the structure of the actual episode. In addition let&#x27;s assume our stories are only five phrases long. &lt;&#x2F;p&gt;
&lt;p&gt;We can now define logic program to generate such stories as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;failure-any &lt;&#x2F;span&gt;&lt;span&gt;[x]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;fresh &lt;&#x2F;span&gt;&lt;span&gt;[a1 a2 a3]
&lt;&#x2F;span&gt;&lt;span&gt;           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt; x a1 a2)]
&lt;&#x2F;span&gt;&lt;span&gt;                    [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt; a1 x a2)]
&lt;&#x2F;span&gt;&lt;span&gt;                    [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt; a1 a2 x)])))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;successful-first-contact-any &lt;&#x2F;span&gt;&lt;span&gt;[x]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;fresh &lt;&#x2F;span&gt;&lt;span&gt;[a1 a2 a3]
&lt;&#x2F;span&gt;&lt;span&gt;           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;successful-first-contact&lt;&#x2F;span&gt;&lt;span&gt; x a1 a2)]
&lt;&#x2F;span&gt;&lt;span&gt;                    [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;successful-first-contact&lt;&#x2F;span&gt;&lt;span&gt; a1 x a2)]
&lt;&#x2F;span&gt;&lt;span&gt;                    [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;successful-first-contact&lt;&#x2F;span&gt;&lt;span&gt; a1 a2 x)])))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;five-element-story &lt;&#x2F;span&gt;&lt;span&gt;[x1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; x3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; x4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; x5]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;fresh &lt;&#x2F;span&gt;&lt;span&gt;[a1 a2 a3]
&lt;&#x2F;span&gt;&lt;span&gt;           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failure-any&lt;&#x2F;span&gt;&lt;span&gt; x1)
&lt;&#x2F;span&gt;&lt;span&gt;                     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory-short&lt;&#x2F;span&gt;&lt;span&gt; x2)
&lt;&#x2F;span&gt;&lt;span&gt;                     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory-short&lt;&#x2F;span&gt;&lt;span&gt; x3)
&lt;&#x2F;span&gt;&lt;span&gt;                     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allegory-short&lt;&#x2F;span&gt;&lt;span&gt; x4)
&lt;&#x2F;span&gt;&lt;span&gt;                     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;successful-first-contact-any&lt;&#x2F;span&gt;&lt;span&gt; x5)])))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every construct we used to build these functions should be familiar based on the previous examples. We just needed to define two special versions of our goals for the shorthand version of allegories: one for failure and one for successful first contact.&lt;&#x2F;p&gt;
&lt;p&gt;For example if we want five solutions that fulfill all the criteria for such stories we can call the following code: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;[x1 x2 x3 x4 x5]
&lt;&#x2F;span&gt;&lt;span&gt;       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;five-element-story&lt;&#x2F;span&gt;&lt;span&gt; x1 x2 x3 x4 x5))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which for example could return:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt; [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt; [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;successful-first-contact&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt; [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt; [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As one can see the logic program will exhaustively go through all the possible ways the goals can fulfilled and list them up to limit given as a parameter for &lt;code&gt;l&#x2F;run&lt;&#x2F;code&gt;. The results are not necessarily unique if there are multiple ways to fulfill the goals. This can be seen in the first and second answers as the phrase &amp;quot;Picard and Dathon at El-Adrel.&amp;quot; is both the Tamarian and Human allegory for successful first contact. &lt;&#x2F;p&gt;
&lt;p&gt;The above restrictions allow for a lot of the same allegories used within the story. For this, one can define new restrictions and further fine tune the story generation. For example, one can create restrictions on the number of duplicate phrases used, or could ensure that there is more diversity in the phrase type (Tamarian, Human, English) is used. Declaring new restrictions, combining them with existing ones and using the same mechanism to derive any number of answers is one of the core strengths of a logic programming system such as core.logic.&lt;&#x2F;p&gt;
&lt;p&gt;As a final example to show how logic programming can be embedded into a (regular) program, we create a logic program inside a regular Clojure function that creates n-number of stories of a given length. Take a quick look at the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;n-element-story &lt;&#x2F;span&gt;&lt;span&gt;[nr-of-elements stories]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;[vars (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repeatedly&lt;&#x2F;span&gt;&lt;span&gt; nr-of-elements l&#x2F;lvar)
&lt;&#x2F;span&gt;&lt;span&gt;        first-var (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt; vars)
&lt;&#x2F;span&gt;&lt;span&gt;        middle (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drop-last &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rest&lt;&#x2F;span&gt;&lt;span&gt; vars))
&lt;&#x2F;span&gt;&lt;span&gt;        last-var (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt; vars)]
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;run&lt;&#x2F;span&gt;&lt;span&gt; stories [q]
&lt;&#x2F;span&gt;&lt;span&gt;           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;conde &lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;==&lt;&#x2F;span&gt;&lt;span&gt; q vars)
&lt;&#x2F;span&gt;&lt;span&gt;                     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;distincto&lt;&#x2F;span&gt;&lt;span&gt; q)
&lt;&#x2F;span&gt;&lt;span&gt;                     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failure-any&lt;&#x2F;span&gt;&lt;span&gt; first-var)
&lt;&#x2F;span&gt;&lt;span&gt;                     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;successful-first-contact-any&lt;&#x2F;span&gt;&lt;span&gt; last-var)
&lt;&#x2F;span&gt;&lt;span&gt;                     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;everyg&lt;&#x2F;span&gt;&lt;span&gt; allegory-short middle)]))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without going too in-depth on every part of this function, it programmatically creates n-number of fresh variables based on the given parameter. It then unifies these with the parameters of a run execution inside the function and returns them. For example, six stories of four elements can be requested by the call:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n-element-story &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4 6&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which will result in the stories:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;((&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt; (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad on the ocean.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt; (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gilgamesh, his plant eaten by a snake.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt; (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt; (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bull of Heaven.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt; (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Shaka, when the walls fell.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darmok and Jalad at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beast at Tanagra.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Picard and Dathon at El-Adrel.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There you have it, a very quick overview of using core.logic for logic programming. If you would like to experiment further the code used in this article is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;darmok-core-logic&quot;&gt;available&lt;&#x2F;a&gt;. Here we only scratched the surface of what is possible in a logic programming environment such as core.logic. Feel free to check it out, or any other &lt;a href=&quot;http:&#x2F;&#x2F;minikanren.org&#x2F;#implementations&quot;&gt;miniKanren implementation available in your language&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I hope that, much like the Darmok episode, this article has expanded your horizons on communicating. Logic programming is a very interesting, and often underutilized programming paradigm. The core.logic&#x2F;miniKanren logic programming language is a great system to get started with it. I hope that this, perhaps first, contact with Logic Programming or core.logic aids you in your future endeavors.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Prolog and the Price of Peace</title>
        <published>2019-02-01T00:00:00+00:00</published>
        <updated>2019-02-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/prolog-price-of-peace/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/prolog-price-of-peace/</id>
        
        <content type="html">&lt;p&gt;The use of logic is a common element in Science Fiction. In the Star Trek universe &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vulcan_(Star_Trek)&quot;&gt;Vulcans&lt;&#x2F;a&gt; are a species that is famously known for aiming to live by logic and reason. Because of this they are often considered masters of these subjects. Yet there was a case in an episode of the Star Trek show &lt;a href=&quot;http:&#x2F;&#x2F;memory-alpha.wikia.com&#x2F;wiki&#x2F;The_Maquis,_Part_II_(episode)&quot;&gt;Deep Space 9&lt;&#x2F;a&gt;, where &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Quark_(Star_Trek)&quot;&gt;Quark&lt;&#x2F;a&gt;, a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ferengi&quot;&gt;Ferengi&lt;&#x2F;a&gt;, was able to convince Sakonna, a Vulcan, of the error of her logic and reasoning. &lt;&#x2F;p&gt;
&lt;p&gt;For this Quark made use of Ferengi philosophy, namely the Third Rule of Acquisition. The Rules of Acquisition are a series of proverbs and guidelines that govern Ferengi society, and notably their business dealings that take a prominent place in their lives. The Third Rule of Acquisition states that &amp;quot;Never spend more for an acquisition than you have to.&amp;quot; By applying this rule to the situation in the episode Quark was able make it clear to Sakonna that the best time broker a peace agreement would be &amp;quot;right now&amp;quot;, as the price of peace is at an all time low. &lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;featured.jpg&quot;  &#x2F;&gt;
  &lt;figcaption&gt;
      &lt;h4&gt;Quark explaining the Third Rule of Acquisition to Sakonna Copyright CBS Corporation.&lt;&#x2F;h4&gt;
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;featured.jpg&quot; title=&quot;Quark explaining the Third Rule of Acquisition to Sakonna&quot; attr=&quot;Copyright CBS Corporation&quot; &gt;}} --&gt;
&lt;p&gt;Much like with Ferengi society, various rules and regulations play a prominent role in our lives and dealings with each other. So much so, that navigating the various rules to their logical conclusion, whether in the realm of law, finance and other domains, is often a difficult process. Thankfully there are tools and techniques to help us. The programming language Prolog, in particular, can be a very helpful in dealing with various rules and logical problems. This article aims to provide a brief introduction to this language using by using it to show how Quark&#x27;s reasoning can be implemented within a computer program.&lt;&#x2F;p&gt;
&lt;p&gt;Prolog is a logic programming language, originally created in the 1970s, but with many modern implementations such as &lt;a href=&quot;http:&#x2F;&#x2F;www.swi-prolog.org&#x2F;&quot;&gt;SWI-Prolog&lt;&#x2F;a&gt;. With logic programming programs are written and solved using some variation of a formal logic. Using such logic, information about the problem and its domain is first declared. Then the user can pose queries about the problem domain, which the programming language aims to answer through reasoning with the available information. This style of programming contrasts with the more common, imperative, paradigm. Instead of telling the computer how to solve the problem, we can declare information about the problem and let the computer, through the use of logic, solve it for us.&lt;&#x2F;p&gt;
&lt;p&gt;In order to show how Prolog works, we aim to use it to represent the same problem and reasoning that Quark used to convince Sakonna. To do this first lets examine the situation depicted the episode a bit more closely. In the episode the Maquis are a group that are at odds Cardassian colonists both living the Demilitarized Zone. Tensions were escalating as the Cardassian colonists were recently supplied in secret with weapons by the Cardassian Union. As a result Sakonna, along with other members of the Maquis, aimed at acquiring more weapons of their own. Even after it was found that the Cardassian Union was behind weapon supplies, Sakonna still aimed at gathering more, as a way to ensure peace. Quark pointed out the flaws in the logic of her argument, given the Third Rule of Acquisition: &amp;quot;Never spend more for an acquisition than you have to.&amp;quot; If the goal of Sakonna is truly to acquire peace, than it is the perfect time to be negotiating with the Cardassian colonists. With the flow of the smuggled in weapons having stopped, and both sides already having weapons, neither the Maquis nor the Cardassian colonists have any advantage. By aiming to acquire weapons still, they would only escalate the conflict, and making peace more costly in the long run.&lt;&#x2F;p&gt;
&lt;p&gt;To express this scenario with Prolog, we are going to introduce some elements of this language first (for a bit more through introduction see the excellent &lt;a href=&quot;http:&#x2F;&#x2F;www.learnprolognow.org&#x2F;&quot;&gt;Learn Prolog Now!&lt;&#x2F;a&gt; available online). There are three basic elements to a Prolog program: facts, rules and queries. &lt;&#x2F;p&gt;
&lt;p&gt;Facts are elements that have been stated to hold. For example the following statement:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(cardassians).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;can be used to denote that the advantage is held by the Cardassians colonists.&lt;&#x2F;p&gt;
&lt;p&gt;Rules are a way for Prolog to infer new information from the knowledge that already exists. For example if we aim to state that &amp;quot;if the Cardassian colonists have the advantage the price of peace is high&amp;quot; in Prolog we would have the rule: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(high) :- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(cardassians).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two parts to writing such rules in Prolog: the body and the head. The body of the rule is in this case &lt;code&gt;advantage(cardassians)&lt;&#x2F;code&gt; while the head is &lt;code&gt;priceOfPeace(high)&lt;&#x2F;code&gt;. In Prolog if the body of the rule holds true, than it can be concluded that the head is true as well. This exactly matches to what we aim to express: if the Prolog program knows that the Cardassian colonists hold the advantage, than it can conclude that the price of peace is high. &lt;&#x2F;p&gt;
&lt;p&gt;Facts and rules together form the knowledge base that can describe a domain. In this case the domain is the situation between the Cardassian colonists and the Maquis. The final piece, queries, allows us to examine this knowledge base and ask questions on what Prolog can infer from this knowledge. For the above example we could query whether the price of peace is indeed high, which should follow directly from the semantics of the rules and facts that we have described.&lt;&#x2F;p&gt;
&lt;p&gt;Given that we load in the knowledge base consisting of the above-mentioned fact and rule, the query: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;?-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(high).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;that asks whether the price of peace is high, will return &lt;code&gt;true&lt;&#x2F;code&gt; indicating that this is indeed the case. Instead if we ask whether the price of peace is low, using the query:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;?-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(low).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the result will be &lt;code&gt;false&lt;&#x2F;code&gt; indicating this is not the case.&lt;&#x2F;p&gt;
&lt;p&gt;We can also ask more open ended questions using variables. Variables are written by starting with a capitalized letter (or an underscore), such as &lt;code&gt;X&lt;&#x2F;code&gt;. These variables could be used to write queries with unknowns. The query: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;?-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(X).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;will give us the result: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;X = high
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which again is what would directly follow from the facts and the rules. What Prolog does with variables is to try to &amp;quot;unify&amp;quot; them with known values that match (or other variables). In this case from the knowledge base we have given it, it unifies it with the value of &lt;code&gt;high&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;From the basic elements of facts, rules and queries Prolog is able to represent and answer problems in many domains. This is also shows off the feature of a logical programming language, such as Prolog, that make it different compared to many other programming languages. Instead of telling the program what to do, the program becomes a description of the domain, over which queries are answered to solve the overall goal. &lt;&#x2F;p&gt;
&lt;p&gt;Beyond the above basics, Prolog has many features to support the description of more complicated domains. Here we only list a few that helps us to convey our translation of Quark&#x27;s reasoning into Prolog. &lt;&#x2F;p&gt;
&lt;p&gt;One such feature is the use variables within the rules themselves. The rule &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;acquirePeace&lt;&#x2F;span&gt;&lt;span&gt;(X) :- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(X).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;indicates that the price of acquiring peace depends on the price of peace.&lt;&#x2F;p&gt;
&lt;p&gt;The rule &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(low)  :- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(cardassians), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(maquis).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;shows off the logical operator &lt;strong&gt;and&lt;&#x2F;strong&gt;, meaning that the price of peace is low if both the Cardassians and the Maquis have the advantage. &lt;&#x2F;p&gt;
&lt;p&gt;The rule&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(low)  :- \+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(cardassians), \+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(maquis).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;shows off the logical &lt;strong&gt;not&lt;&#x2F;strong&gt;, denoted by the &#x27;+&#x27; symbol, which states that the price of peace is also low if neither the Cardassians nor the Maquis have the advantage.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, much like in other languages, comments for the code can also be written. This is done by prefacing a line with &amp;quot;%%&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Now if we put every element together to use Prolog to describe Quarks scenario, a possible knowledge base is as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;%% Rules
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;acquirePeace&lt;&#x2F;span&gt;&lt;span&gt;(X)  :- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(X).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(low)  :- \+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(cardassians), \+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(maquis).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(low)  :- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(cardassians), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(maquis).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(high) :- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(cardassians).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(low) :- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(maquis).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(cardassians)  :- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;weapons&lt;&#x2F;span&gt;&lt;span&gt;(cardassians), \+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;weapons&lt;&#x2F;span&gt;&lt;span&gt;(maquis).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(maquis)  :- \+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;weapons&lt;&#x2F;span&gt;&lt;span&gt;(cardassians), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;weapons&lt;&#x2F;span&gt;&lt;span&gt;(maquis).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;%% Facts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;weapons&lt;&#x2F;span&gt;&lt;span&gt;(cardassians).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;weapons&lt;&#x2F;span&gt;&lt;span&gt;(maquis).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the overall knowledge base, the logic of Quark&#x27;s reasoning is broken down into a number of rules and a pair of facts. &lt;&#x2F;p&gt;
&lt;p&gt;The rules state that advantage of either side, the Cardassians settlers or the Maquis, is decided by one side having weapons while the other side has not. The price of peace is in turn dependent on who has the advantage. In this formalisation the price of peace is only high if Cardassians have the advantage. Finally the price of acquiring peace is dependent solely on the price of peace.&lt;&#x2F;p&gt;
&lt;p&gt;The facts for this scenario is that both the Cardassian settlers and the Maquis have weapons. &lt;&#x2F;p&gt;
&lt;p&gt;With this knowledge base describing Quark&#x27;s reasoning process the query to see for what price we can aquire peace:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;?-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;acquirePeace&lt;&#x2F;span&gt;&lt;span&gt;(X).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;will indeed return&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;X = low
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;indicating that acquiring peace can be done at a low price. &lt;&#x2F;p&gt;
&lt;p&gt;Going a bit beyond this query, if we would further want to test the logic of Quark&#x27;s scenario, we can also inquire about other information.&lt;&#x2F;p&gt;
&lt;p&gt;For example if we would ask for the price of peace:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;?-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;priceOfPeace&lt;&#x2F;span&gt;&lt;span&gt;(X).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we would also unsurprisingly get &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;X = low
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;as with the rules defined in our knowledge base these values are intertwined. &lt;&#x2F;p&gt;
&lt;p&gt;We can also ask for who has the advantage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;?-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;advantage&lt;&#x2F;span&gt;&lt;span&gt;(X).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which will return: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which is completely in line with the scenario that noone has the advantage. &lt;&#x2F;p&gt;
&lt;p&gt;We can also ask who has weapons, the query of:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;?-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;weapons&lt;&#x2F;span&gt;&lt;span&gt;(X).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;gives us the answer&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;X = cardassians
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;... but wait, this can not be right! Did we not state in the knowledge base that both the Cardassian colonists and the Maquis have weapons? Prolog can actually return mutliple answers, if they exist. In &lt;a href=&quot;http:&#x2F;&#x2F;www.swi-prolog.org&#x2F;&quot;&gt;SWI-Prolog&lt;&#x2F;a&gt; this can be done by pressing semicolon (&lt;code&gt;;&lt;&#x2F;code&gt;) after an answer, in which case another answers is returned, if it exists or simply false otherwise. By pressing &lt;code&gt;;&lt;&#x2F;code&gt; once after the first answer we will see a total output such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;X = cardassians &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;X = maquis.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hopefully Sakonna would also be quite convinced with the logic of Prolog, but just to be absolutely sure, lets examine some scenario&#x27;s where the facts of the scenario are changed. In such cases the rules should still be applied in ways that we would expect.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose that our only fact now is that only the cardassians colonists have weapons, while rules remain the same. Giving the query for knowing the price of acquiring peace:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;?-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;acquirePeace&lt;&#x2F;span&gt;&lt;span&gt;(X).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;will now return:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;X = high 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hopefully, much like Quark&#x27;s application of the Third Rule of Acquisition, this intro would have been enough to convince Sakonna of the logic of purchasing peace at the lowest possible price. Similarly, I hope that as a reader, this article gave some insight to the usefulness of Prolog in such scenarios. Next time, you are dealing with a problem domain, that would easily match to a similar scenario of rules, facts and queries, give Prolog a try. It is, after all, a very logical choice.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
