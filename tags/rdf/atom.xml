<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - RDF</title>
    <link href="https://www.newresalhaider.com/tags/rdf/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://www.newresalhaider.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2019-10-06T00:00:00+00:00</updated>
    <id>https://www.newresalhaider.com/tags/rdf/atom.xml</id>
    <entry xml:lang="en">
        <title>Aesopica, Part 5: Blank Nodes</title>
        <published>2019-06-08T00:00:00+00:00</published>
        <updated>2019-10-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/aesopica-5/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/aesopica-5/</id>
        
        <content type="html">&lt;p&gt;This article is the fifth part of a series, examining the use of the Clojure language for representing Linked Data, using examples from Aesop&#x27;s stories. The topic of this article is to explain the somewhat contentious subject of blank nodes. &lt;&#x2F;p&gt;
&lt;p&gt;One of the strengths of &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;RDF&#x2F;&quot;&gt;RDF&lt;&#x2F;a&gt; as a graph representation format is the way resources are named. Through the use of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Uniform_Resource_Identifier&quot;&gt;Uniform Resource Identifiers (URIs)&lt;&#x2F;a&gt; every element of the graph can be uniquely identified. With such generic and powerful facilities for naming it can easily represent information in any domain. For example on &lt;a href=&quot;https:&#x2F;&#x2F;schema.org&#x2F;&quot;&gt;schema.org&lt;&#x2F;a&gt; elements have been defined for the notion of a &lt;a href=&quot;http:&#x2F;&#x2F;schema.org&#x2F;MedicalCondition&quot;&gt;medical condition (http:&#x2F;&#x2F;schema.org&#x2F;MedicalCondition)&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;schema.org&#x2F;employee&quot;&gt;employee (http:&#x2F;&#x2F;schema.org&#x2F;employee)&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;schema.org&#x2F;BankAccount&quot;&gt;bank account (http:&#x2F;&#x2F;schema.org&#x2F;BankAccount)&lt;&#x2F;a&gt;, just to name a few. In particular the namespacing part of the URI, e.g.: http:&#x2F;&#x2F;schema.org&#x2F; for http:&#x2F;&#x2F;schema.org&#x2F;employee , helps to ensure that concepts can be uniquely named, even in scenarios with multiple definitions of the same concept. &lt;&#x2F;p&gt;
&lt;p&gt;Blank nodes go against this notion of making everything explicitly named. In fact an alternative name for a blank node is &amp;quot;an anonymous resource&amp;quot;&amp;quot;. Instead of giving a resource an explicit name with a URI a placeholder is used. This indicates the existence of the resource, but does not tie it together with a namespaced name. In the Turtle syntax for RDF we can use a label prefixed by &lt;code&gt;_:&lt;&#x2F;code&gt; to indicate a blank node. For example, the following RDF graph states that the fox and the stork both give out an invitation.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#fox&amp;gt; &amp;lt;#gives-invitation&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;_:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invitation1.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#stork&amp;gt; &amp;lt;#gives-invitation&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;_:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invitation2.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Due to the invitations having different names we can expect them to be different resources. However the exact names of these resources do not matter. For example the RDF triples below have arguably the same meaning: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#fox&amp;gt; &amp;lt;#gives-invitation&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;_:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abc.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#stork&amp;gt; &amp;lt;#gives-invitation&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;_:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xyz.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is important to reiterate that the blank nodes are not resource identifiers such as URIs. They are also only local in scope: an &lt;code&gt;_:invitation1&lt;&#x2F;code&gt; in one graph and a &lt;code&gt;_:invitation1&lt;&#x2F;code&gt; in another are not referring to the same thing. Even resources used in the similar places in different graphs are not the same. For example the &lt;code&gt;_:abc&lt;&#x2F;code&gt; and the  &lt;code&gt;_:invitation1&lt;&#x2F;code&gt; used in the above graphs, while expressing the same meaning, are not the same resource.&lt;&#x2F;p&gt;
&lt;p&gt;The above features are both the strength and the weakness of using anonymous resources. We are not required to use a specific named identifier, but this makes referring to resources and comparing them more difficult. &lt;&#x2F;p&gt;
&lt;p&gt;There are number of scenarios where such anonymous resources can be useful. For example, when representing complex structures not easily expressed in triples where we would need &amp;quot;placeholder nodes&amp;quot; in the graph but do not particularly care about its naming. In other cases we want to hide some information, and blank nodes could be used as placeholders for named resources. A good overview of the various uses of Blank Nodes can be found in the paper: &lt;a href=&quot;https:&#x2F;&#x2F;link.springer.com&#x2F;chapter&#x2F;10.1007&#x2F;978-3-642-25073-6_27&quot;&gt;On Blank Nodes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With the above description of blank nodes, we also want to provide something similar in our Clojure based RDF representation as well. As we are using keywords to represent URIs in our Clojure representation (i.e. :fox and :rdf&#x2F;type), a natural element to differentiate them is to use symbols for blank nodes. Symbols are created in Clojure by prefixing it with &lt;code&gt;&#x27;&lt;&#x2F;code&gt;. For example in the Clojure based RDF representation we use blank nodes for representing invitations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fox-and-stork-blank-node-edn
&lt;&#x2F;span&gt;&lt;span&gt;  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;context
&lt;&#x2F;span&gt;&lt;span&gt;   {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:rdf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;facts
&lt;&#x2F;span&gt;&lt;span&gt;   #{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :gives-invitation &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;invitation1]
&lt;&#x2F;span&gt;&lt;span&gt;     [&amp;#39;invitation1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:has-invited :stork&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&amp;#39;invitation1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:has-food :soup&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&amp;#39;invitation1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:serves-using :shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :gives-invitation &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;invitation2]
&lt;&#x2F;span&gt;&lt;span&gt;     [&amp;#39;invitation2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:has-invited :fox&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&amp;#39;invitation2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:has-food :crumbled-food&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&amp;#39;invitation2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:serves-using :narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :can-eat-food-served-using :shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :can-not-eat-food-served-using :narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :can-eat-food-served-using :narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :can-not-eat-food-served-using :shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;]}})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above is our version of &amp;quot;The Fox and the Stork&amp;quot; story that we previously explored in this series of articles The main difference is that two blank nodes are used:  &lt;code&gt;&#x27;invitation1&lt;&#x2F;code&gt; and &lt;code&gt;&#x27;invitation2&lt;&#x2F;code&gt;, instead of named resources. Perhaps the story teller might want to hide some details of their invitations.&lt;&#x2F;p&gt;
&lt;p&gt;As with all the previous features in this series of articles, blank nodes been implemented in our implementation of this syntax in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;aesopica&quot;&gt;Aesopica&lt;&#x2F;a&gt; library for using Clojure to write Linked Data. Hiding details with blank nodes, even in Clojure, is now just one library away.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Exploring the Deep, Part 1: Introduction</title>
        <published>2019-02-04T00:00:00+00:00</published>
        <updated>2019-02-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/exploring-the-deep/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/exploring-the-deep/</id>
        
        <content type="html">&lt;p&gt;Deep Learning is a field within Artificial Intelligence (AI) that has got quite a lot of attention lately, due to some truly impressive results in recent years. From recognizing objects in images with accuracy that rivals humans, to generating realistic looking texts, to even &lt;a href=&quot;https:&#x2F;&#x2F;deepmind.com&#x2F;blog&#x2F;alphastar-mastering-real-time-strategy-game-starcraft-ii&#x2F;&quot;&gt;beating professional players in Starcraft 2&lt;&#x2F;a&gt;, some truly groundbreaking applications are done with Deep Learning techniques.&lt;&#x2F;p&gt;
&lt;p&gt;As someone whose AI background is more &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Symbolic_artificial_intelligence&quot;&gt;Symbolic Artifical Intelligence&lt;&#x2F;a&gt;, but is anxious to learn, it is a good time as any to explore this field. Thankfully there are some excellent books and tutorials out there to get a nice start. &lt;&#x2F;p&gt;
&lt;p&gt;One book that has caught my attention is &lt;a href=&quot;https:&#x2F;&#x2F;d2l.ai&#x2F;index.html&quot;&gt;Dive into Deep Learning&lt;&#x2F;a&gt;, which seems to have a nice overview of the field, while being very practical at the same time. I aim to work through the book and share my notes, summaries and experiences on this journey in a series of articles. My goal is to write these articles for a bit more broader audience than the book itself. I hope that even those with less exposure to the field than me could follow along, and if a topic piques their interest, they can use the book for a more detailed reference point. &lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;d2l.ai&#x2F;chapter_introduction&#x2F;intro.html&quot;&gt;first chapter&lt;&#x2F;a&gt; that I aim to go over is the introduction to the book as well as Machine Learning in general. As Deep Learning (DL), is a form of Machine Learning (ML), an intro&#x2F;refresher on the topic of Machine Learning is a natural start.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-machine-learning&quot;&gt;What is Machine Learning?&lt;&#x2F;h2&gt;
&lt;p&gt;In most scenarios, programs are written in way where the programmer gives precise information about the problem and&#x2F;or how to solve it. For example in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Imperative_programming&quot;&gt;imperative programming&lt;&#x2F;a&gt; the program is essentially a list of statements that command the computer what to do. Even in the many forms of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Declarative_programming&quot;&gt;declarative programming&lt;&#x2F;a&gt;, such as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functional_programming&quot;&gt;functional-&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Logic_programming&quot;&gt;logic programming&lt;&#x2F;a&gt;, providing the solution is done by explicit descriptions by the coder. The coder would describe the entirety of the problem with mathematical functions or with logical axioms respectively.&lt;&#x2F;p&gt;
&lt;p&gt;However there are scenarios where such paradigms are not adequate. Take for example a case where we where have set of photos of cats and dogs. Suppose we want need to write a program that, given a photo, can recognize the species and breed of the animal depicted. Generally it is difficult to even begin formulating such a problem in terms of the usual programming paradigms. Usually any handwritten solution we can come up with will be very brittle: it will often fail to recognize the right kind of pet from the photo, or it would only be correct for a very limited set of photos. &lt;&#x2F;p&gt;
&lt;p&gt;An alternative way to solve this problem is by letting the computer learn what kind of pet is in the photo. The computer can use a set of labelled examples where the kind of animal and breed is already known and given alongside the photo. In such cases we start with an initial, perhaps even random, model that can make this prediction. Such a model will likely be pretty bad at the start, otherwise the problem would already be solved. Then we use the labelled data to update this model. The hope is that the new model will be better at classifying animals. The intention is to keep adding data and improving the model until we decide that our model is good enough to solve our pet classification problem.&lt;&#x2F;p&gt;
&lt;p&gt;This learning from previous experiences by the machine to solve a problem is denoted as &lt;em&gt;machine learning&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;featured.png&quot;  &#x2F;&gt;
  &lt;figcaption&gt;
      &lt;h4&gt;The recognition of dogs and cats, along with their breeds, is actually an interesting research problem in machine learning. This is due to the subtle differences between breeds making the problem difficult for computers. These images are from the &lt;a href =&quot;http:&#x2F;&#x2F;www.robots.ox.ac.uk&#x2F;~vgg&#x2F;data&#x2F;pets&#x2F;&quot;&gt; The Oxford-IIIT Pet Dataset&lt;&#x2F;a&gt; that can be used to help evaluate techniques aiming to tackle this issue. The images of this dataset are licensed under &lt;a href =&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by&#x2F;4.0&#x2F;&quot;&gt; Creative Commons Attribution-ShareAlike 4.0 International License.&lt;&#x2F;a&gt; Copyright of the images is with their original owner.&lt;&#x2F;h4&gt;
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;There are a large number of forms of machine learning, of which deep learning is only a particular branch, but there are common elements among the various techniques.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;elements-of-machine-learning&quot;&gt;Elements of Machine Learning&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;data&quot;&gt;Data&lt;&#x2F;h3&gt;
&lt;p&gt;Data is the example information from which the machine learning aims to learn. In the previous scenario, the data is the labelled photos of pets.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;model&quot;&gt;Model&lt;&#x2F;h3&gt;
&lt;p&gt;The model designates the whole process of using the data and transforming it into the goal of machine learning. In our example the model would be the full process that can take a given photo and transform it into a prediction of the pet depicted.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;objective-function&quot;&gt;Objective Function&lt;&#x2F;h3&gt;
&lt;p&gt;The objective function denotes how good, or bad, our model currently is. As mentioned before, the reason we perform machine learning is that we aim to let the computer learn how to solve a problem. The objective function allow us to measure the quality of our current solution, so it can be assessed whether the machine learning is progressing towards an acceptable solution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optimization-algorithm&quot;&gt;Optimization Algorithm&lt;&#x2F;h3&gt;
&lt;p&gt;The optimization algorithm that describes the process of moving from one model to a better one. This allows for the learning to happen by moving from one model to a one that better solves the problem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kinds-of-machine-learning&quot;&gt;Kinds of Machine Learning&lt;&#x2F;h2&gt;
&lt;p&gt;Machine learning is a large field with a wide variety of techniques and potential problems to solve. Generally techniques are differentiated by the data they input and output, as well as the specific type of problem they target.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;supervised-learning&quot;&gt;Supervised Learning&lt;&#x2F;h3&gt;
&lt;p&gt;Supervised learning aims to predict targets given some input data. A good example of this is our previous scenario where we were trying to predict what type of pet is in a photo. If we have a number of photos for which we know what kind of animal is depicted in them (i.e. labeled data), we could perform such supervised learning.&lt;&#x2F;p&gt;
&lt;p&gt;Various kinds of supervised learning can be further subdivided based on what kind of target we aim to predict. Some common types of supervised learning are:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;classification&quot;&gt;Classification&lt;&#x2F;h4&gt;
&lt;p&gt;The above example is actually called a &lt;em&gt;classification&lt;&#x2F;em&gt; scenario. In general, classification problems are those where given an example, we aim to find to what particular class that example belongs to. While in the example we described the classes as the species and the breeds of pets, many other types of classes can be used depending on the problem we aim to solve.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tagging&quot;&gt;Tagging&lt;&#x2F;h4&gt;
&lt;p&gt;Consider a scenario where there could be more than one pet in the photo and we want to recognize each of them. Predicting in such cases is called &lt;em&gt;tagging&lt;&#x2F;em&gt;. The main difference between classification and tagging, is that with tagging multiple classes need to be recognized at once (e.g.: the photo can have both a dog and a cat ). This in contrast with classification, where the classes are exclusive (e.g.: dog or a cat).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;regression&quot;&gt;Regression&lt;&#x2F;h4&gt;
&lt;p&gt;The case where we want to predict a (real valued) number, for example the weight of the pet depicted in the photo, is called a &lt;em&gt;regression&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;search-and-ranking&quot;&gt;Search and Ranking&lt;&#x2F;h4&gt;
&lt;p&gt;Search and ranking is a scenario where we want to figure out an order between various items. For example suppose that we want to figure out popularity rankings between various breeds of dogs and cats.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unsupervised-learning&quot;&gt;Unsupervised Learning&lt;&#x2F;h3&gt;
&lt;p&gt;In cases with supervised learning, a set of examples for which the result is already known must be available. Often large quantities of such information is required to get accurate results. However such information can be scarce, or simply unavailable. &lt;&#x2F;p&gt;
&lt;p&gt;Even in such cases there is a wealth of information that can still be learned from the data through machine learning. Some example techniques include:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;clustering&quot;&gt;Clustering&lt;&#x2F;h4&gt;
&lt;p&gt;With the absence of clearly labelled categories given to us, we can still want to group the data into categories. This process is called &lt;em&gt;clustering&lt;&#x2F;em&gt;. For example suppose we have a set of photos depicting all sort of pets, without any labels. Here we could still aim to group similar pets into clusters.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;data-generation-synthesis&quot;&gt;Data Generation&#x2F;Synthesis&lt;&#x2F;h4&gt;
&lt;p&gt;Given a set of data, we can also aim to synthesize data that is similar to the given data. For example if we have a large set of dog photos we can also aim to generate a photo of a, non-existent, dog.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reinforcement-learning&quot;&gt;Reinforcement Learning&lt;&#x2F;h3&gt;
&lt;p&gt;The final group of machine learning techniques that we go over in this article are those where the learning process is interacting with the environment. In reinforcement learning the main goal is to figure out what kind of action needs to be taken in a particular situation. As an example, take a scenario where you want to teach a robot dog to play football. &lt;&#x2F;p&gt;
&lt;p&gt;There process of reinforcement learning is as follows. The agent interacts with the environment through actions and observes the environment reacting to those actions. Based on the environment the agent may get rewards, either positive or negative. The rewards, together with the observations, guide the selection of subsequent actions. There is a cycle of actions, leading to observations and potentially rewards, and then again to actions. This cycle can then be repeated possibly indefinitely or until some goal is reached. &lt;&#x2F;p&gt;
&lt;p&gt;To make this description a bit more concrete, lets take our example scenario of letting a robot dog learn football. Here the agent is the decision making process of the robot dog. The environment itself is a playing field with other robots and a ball. The observations are the sensor data of this environment, such as the vision of the robot. Rewards could be given for taking control of the ball, making a successful pass and of course scoring. Negative rewards can be given for the robot missing a pass, walking off field and other undesirable actions.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;aibosfootball.jpg&quot;  &#x2F;&gt;
  &lt;figcaption&gt;
      &lt;h4&gt;Teaching four legged robots, such as the &lt;a href =&quot;https:&#x2F;&#x2F;us.aibo.com&#x2F;&quot;&gt; AIBO robot dogs&lt;&#x2F;a&gt;, to play football is one of the leagues that is part of the &lt;a href=&quot;https:&#x2F;&#x2F;www.robocup.org&#x2F;&quot;&gt;RoboCup&lt;&#x2F;a&gt; competition aimed at promoting robotics and AI research. This photo depicts the &lt;a href= &quot;https:&#x2F;&#x2F;www.engineering.unsw.edu.au&#x2F;computer-science-engineering&#x2F;help-resources&#x2F;students&#x2F;student-projects&#x2F;robocup&quot; rUNSWift&lt;&#x2F;a&gt; team in a four-legged league game from RoboCup 2006 in Breman, Germany. &lt;a href =&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;RoboCup#&#x2F;media&#x2F;File:RUNSWift_AIBOS.jpg&quot;&gt;Public Domain Photo by Brad Hall&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Reinforcement learning as a whole can be pretty complex with lots of variables based on can be known about the environment, state or actions. Subcategories of reinforcement are generally based on the given restrictions with these variables.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;towards-deep-learning&quot;&gt;Towards Deep Learning&lt;&#x2F;h2&gt;
&lt;p&gt;The above is a general introduction to machine learning, so the question arises how deep learning fits into the picture. Machine learning as a field has quite a bit of history with many of its techniques being laid out in the previous century. A number of such techniques, such as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Neural_network&quot;&gt;Neural Networks&lt;&#x2F;a&gt; initially showed great promise but research and applications on them were languishing due to the lack data and large amount of processing power to enable such techniques. In recent years this has changed, alongside with some important advances, that led to deep learning techniques being one of the most effective approaches for various machine learning applications. &lt;&#x2F;p&gt;
&lt;p&gt;In addition the availability of frameworks for deep learning, such as &lt;a href=&quot;https:&#x2F;&#x2F;mxnet.apache.org&#x2F;&quot;&gt;MXNet&lt;&#x2F;a&gt;, which we will use in our learning process, means that the field is very inviting for new users and applications. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This was a quick rundown of the first chapter. The book actually goes into much more detail, with some previews of techniques and extensive references, for the interested reader. If you have any remarks or suggestions for this series of articles please let me know! I am quite anxious for the next part when I hope to plunge deep into some coding with &lt;a href=&quot;https:&#x2F;&#x2F;mxnet.apache.org&#x2F;&quot;&gt;MXNet&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Aesopica, Part 4: Basic Conversion to Other Formats</title>
        <published>2018-12-18T00:00:00+00:00</published>
        <updated>2018-12-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/aesopica-4/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/aesopica-4/</id>
        
        <content type="html">&lt;p&gt;This article is the fourth part of a series, examining the use of the Clojure language for representing Linked Data, with examples from Aesop&#x27;s stories. The topic of this article is to describe how to do some basic conversions from our Clojure representation of Linked Data, to some of the other formats, such as &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;turtle&#x2F;&quot;&gt;Turtle&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;n-quads&#x2F;&quot;&gt;NQUADS&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;json-ld.org&#x2F;&quot;&gt;JSON-LD&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;In previous articles of this series, we created a Clojure based syntax for defining Linked Data. In order to make this syntax a viable member of the Linked Data ecosystem, it is important to provide conversion functionality to other Linked Data formats. This allows for the user of the associated &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;aesopica&quot;&gt;Aesopica&lt;&#x2F;a&gt; library, to create and use Linked Data in a Clojure based environment, and convert it, when needed, to other formats. In order to implement this functionality we made use of Clojure&#x27;s Java interop and the &lt;a href=&quot;https:&#x2F;&#x2F;jena.apache.org&#x2F;&quot;&gt;Apache Jena&lt;&#x2F;a&gt;, and made it available in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;aesopica&quot;&gt;Aesopica&lt;&#x2F;a&gt; library.&lt;&#x2F;p&gt;
&lt;p&gt;To start off we begin with the basic example of &amp;quot;The Fox and The Stork&amp;quot; story that we introduced &lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-1&#x2F;&quot;&gt;initially&lt;&#x2F;a&gt;. The Clojure representation of this is as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fox-and-stork-edn
&lt;&#x2F;span&gt;&lt;span&gt;  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;context
&lt;&#x2F;span&gt;&lt;span&gt;   {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:rdf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;facts
&lt;&#x2F;span&gt;&lt;span&gt;   #{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :gives-invitation :invitation1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :has-invited :stork&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :has-food :soup&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :serves-using :shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :gives-invitation :invitation2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :has-invited :fox&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :has-food :crumbled-food&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :serves-using :narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :can-eat-food-served-using :shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :can-not-eat-food-served-using :narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :can-eat-food-served-using :narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :can-not-eat-food-served-using :shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;]}})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The full details of this representation are explained in our previous work. Here we only briefly summarize its main elements. The above mentioned example defines a knowledge base containing a set of facts that describe the &amp;quot;The Fox and The Stork&amp;quot; story. Each fact is a triple of a subject, predicate and object. These elements are all represented by an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Uniform_Resource_Identifier&quot;&gt;URI&lt;&#x2F;a&gt;, but for human readability and use as well as ease of use in Clojure, they are identified by (namespaced) keywords. The context map, containing the keywords for the namespaces used, allows us to transform the namespaced keywords into full URIs when required. Of course there are more elements possible in Linked Data&#x2F;RDF and in this representation as well, such as &lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-1&#x2F;&quot;&gt;literal values&lt;&#x2F;a&gt;, but this summary should suffice for this article.&lt;&#x2F;p&gt;
&lt;p&gt;Now in order to explain how this conversion is done, assuming no familiarity with Clojure or a similar language, two new concepts are required. &lt;&#x2F;p&gt;
&lt;p&gt;First, it is important to note that in the above example we bind the &amp;quot;The Fox and The Stork&amp;quot;, Linked Data representation to the &lt;code&gt;fox-and-stork-edn&lt;&#x2F;code&gt; variable. Although this is not a necessity for creating the knowledge base, it allows us to reuse this definition from inside the code and in this article as well, without explicitly writing out the full representation each time. &lt;&#x2F;p&gt;
&lt;p&gt;The second concept that we make use is how Clojure functions are called to be executed. In Clojure invoking a function has the general form of &lt;code&gt;(function-name param1 param2 ...)&lt;&#x2F;code&gt;. For example lets assume that the function for translation from our Clojure representation to Turtle is represented by &lt;code&gt;conv&#x2F;convert-to-turtle&lt;&#x2F;code&gt;. Here &lt;code&gt;conv&lt;&#x2F;code&gt; is a shorthand for Aesopica&#x27;s conversion namespace. Given this, the call to translate to a Turtle string representation of the Linked Data can be invoked by:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conv&#x2F;convert-to-turtle&lt;&#x2F;span&gt;&lt;span&gt; fox-and-stork-edn)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The resulting string representation shows the same Linked Data knowledge base in Turtle syntax:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@base &amp;lt;http:&#x2F;&#x2F;www&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;newresalhaider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@prefix rdf: &amp;lt;http:&#x2F;&#x2F;www&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;fox&amp;gt; rdf:type &amp;lt;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;stork&amp;gt; rdf:type &amp;lt;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;fox&amp;gt; &amp;lt;gives-invitation&amp;gt; &amp;lt;invitation1&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;invitation1&amp;gt; &amp;lt;has-invited&amp;gt; &amp;lt;stork&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;invitation1&amp;gt; &amp;lt;has-food&amp;gt; &amp;lt;soup&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;invitation1&amp;gt; &amp;lt;serves-using&amp;gt; &amp;lt;shallow-plate&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;stork&amp;gt; &amp;lt;gives-invitation&amp;gt; &amp;lt;invitation2&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;invitation2&amp;gt; &amp;lt;has-invited&amp;gt; &amp;lt;fox&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;invitation2&amp;gt; &amp;lt;has-food&amp;gt; &amp;lt;crumbled-food&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;invitation2&amp;gt; &amp;lt;serves-using&amp;gt; &amp;lt;narrow-mouthed-jug&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;fox&amp;gt; &amp;lt;can-eat-food-served-using&amp;gt; &amp;lt;shallow-plate&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;fox&amp;gt; &amp;lt;can-not-eat-food-served-using&amp;gt; &amp;lt;narrow-mouthed-jug&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;stork&amp;gt; &amp;lt;can-eat-food-served-using&amp;gt; &amp;lt;narrow-mouthed-jug&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;stork&amp;gt; &amp;lt;can-not-eat-food-served-using&amp;gt; &amp;lt;shallow-plate&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This representation has a similar form to our Clojure based notation. A set of facts is represented and prefixes and&#x2F;or a base prefix is used, to enable easy reading and writing of the triples.&lt;&#x2F;p&gt;
&lt;p&gt;Now let us look at some other formats and conversions. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;trig&#x2F;&quot;&gt;TriG&lt;&#x2F;a&gt; is an extension of the Turtle format for enabling &amp;quot;named graphs&amp;quot;. Now this is a topic of &lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-3&#x2F;&quot;&gt;a previous article&lt;&#x2F;a&gt; but here it is suffice to say that by associating a set of facts with a specific graph, we enable the easy adding of metadata to these facts. To show this conversion, we use an example that uses this notion:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fox-and-stork-named-graph-edn
&lt;&#x2F;span&gt;&lt;span&gt;  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;context
&lt;&#x2F;span&gt;&lt;span&gt;   {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:rdf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:time &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;2006&#x2F;time#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;facts
&lt;&#x2F;span&gt;&lt;span&gt;   #{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :gives-invitation :invitation1 :dinner1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :has-invited :stork :dinner1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :has-food :soup :dinner1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :serves-using :shallow-plate :dinner1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :gives-invitation :invitation2 :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :has-invited :fox :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :has-food :crumbled-food :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :serves-using :narrow-mouthed-jug :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :serves-using :narrow-mouthed-jug :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:dinner1 :time&#x2F;before :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]}})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As one can see, here we simply extend our triple based representation of facts to include either triples or quads. In a quad the last element is the graph name identifier of the graph the fact is a member of.&lt;&#x2F;p&gt;
&lt;p&gt;Translating this representation to TriG can be done by:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conv&#x2F;convert-to-trig&lt;&#x2F;span&gt;&lt;span&gt; fox-and-stork-named-graph-edn)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which results in the following string representation that is TriG formatted: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#type&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2006&#x2F;time#before&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#type&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;narrow-mouthed-jug&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-food&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;crumbled-food&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;gives-invitation&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;narrow-mouthed-jug&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;gives-invitation&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-food&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;soup&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;shallow-plate&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&amp;gt;  &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a number of differences in representation from the above TriG output to he Clojure representation, but also from the previous Turtle output. Probably one of the most apparent is that in this output no prefixes are used: URIs are all written out fully. Both Turtle and TriG are flexible in whether they abbreviate URIs with prefixes or not. This is completely left up to the author, on in this case the specific way the conversion has been implemented. Another difference is how graphs are identified. Instead of using a quad like formatting for denoting the graph to which each fact belongs to they are grouped together. For example in the form of: &lt;code&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt; { ... }&lt;&#x2F;code&gt;, all the facts inside the curly braces belong to the &lt;code&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;code&gt; graph. Finally a somewhat similar construction is used to abbreviate a group of triples that all use the same object. Instead of writing each fact out fully, &amp;quot;predicate-lists&amp;quot; are used to match a single subject with a series subject and object pairs. This is quite a nice feature, and something similar is definitely on the list of future improvements to the Clojure notation, although care must be taken that such shorthands can make the definition a bit more complex. &lt;&#x2F;p&gt;
&lt;p&gt;Speaking of complexity, an interesting format created with the purpose of being very simple is &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;n-quads&#x2F;&quot;&gt;NQUADS&lt;&#x2F;a&gt;. This is a straightfoward, line based syntax where each fact is represented by a single line. It is actually an extension of the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;n-triples&#x2F;&quot;&gt;N-Triples&lt;&#x2F;a&gt; format, with support added for handling named graphs. The conversion of our named graph example using the function invocation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conv&#x2F;convert-to-nquads&lt;&#x2F;span&gt;&lt;span&gt; fox-and-stork-named-graph-edn)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;would give us the following example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#type&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2006&#x2F;time#before&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#type&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;narrow-mouthed-jug&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-food&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;crumbled-food&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;gives-invitation&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;narrow-mouthed-jug&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;gives-invitation&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-food&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;soup&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;shallow-plate&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As one can see this format does not use prefixes: each fact is a triple or a quad on a single line ending with a dot, with each element URI written out fully. This way of writing facts is similar to the Clojure based notation, with main change that the Clojure notation does use prefixes for URI abbreviation. This simplicity contrasts with the flexibility of the Turtle format, which can be more terse, but more complex to parse and generate. This also shows that a separate &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;n-triples&#x2F;&quot;&gt;N-Triples&lt;&#x2F;a&gt; converter is not really needed. As long as the original knowledge bases does not use any named-graphs the result will be the same as with N-Triples.&lt;&#x2F;p&gt;
&lt;p&gt;The final format that we aim to convert to is &lt;a href=&quot;https:&#x2F;&#x2F;json-ld.org&#x2F;&quot;&gt;JSON-LD&lt;&#x2F;a&gt;. This is a format based on the JavaScript Object Notation &lt;a href=&quot;https:&#x2F;&#x2F;www.json.org&#x2F;&quot;&gt;JSON&lt;&#x2F;a&gt;, which allows for very easy interoperability with JSON based tools. &lt;&#x2F;p&gt;
&lt;p&gt;Converting can be done with the following invocation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conv&#x2F;convert-to-json-ld&lt;&#x2F;span&gt;&lt;span&gt; fox-and-stork-named-graph-edn)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;resulting in the following JSON representation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@graph&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : [ {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@graph&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : [ {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;gives-invitation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }, {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-food&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;soup&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    } ],
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;2006&#x2F;time#before&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }, {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@graph&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : [ {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }, {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-food&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;crumbled-food&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }, {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;gives-invitation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    } ],
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }, {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;animal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }, {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;animal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  } ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The biggest benefit of this format is the compatibility with JSON based tools and techniques. Regular JSON parsers, encoders and other tooling will just work, giving the format a very wide reach. Similarly to this our Clojure based approach uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;edn-format&#x2F;edn&quot;&gt;EDN&lt;&#x2F;a&gt; as its basis. This is a subset of Clojure, notably its notation of data values, and is used by &lt;a href=&quot;https:&#x2F;&#x2F;www.datomic.com&#x2F;&quot;&gt;Datomic&lt;&#x2F;a&gt; and others as a data transfer format.&lt;&#x2F;p&gt;
&lt;p&gt;To summarize, we have seen how converting Linked Data from the Clojure representation to various other formats using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;aesopica&quot;&gt;Aesopica&lt;&#x2F;a&gt; library is just a function invocation away. We have also looked at some of the differences between various syntaxes, notably the benefits that they provide: Turtle&#x2F;TriG offers a lot of flexibity and shorthands for reading and writing, N-Quads simplicity of notation, and JSON-LD compatibility with an existing and well used standard. The Clojure representation is aimed creating a new, and hopefully interesting blend. It makes use of prefixes for easy reading and writing by human users, similarly to what is possible in Turtle. It has the simplicity of fact representation as triples and quads, like in N-Quads. Finally it uses a common, albeit not nearly as widespread, standard  a basis so it can make use of EDN based tooling. &lt;&#x2F;p&gt;
&lt;p&gt;One interesting element, that the Turtle and Trig formats provide, is various short-hands for reading and writing. We believe this is a very useful feature, but of course the trade-offs of the shorthands versus the simplicity of notation must be taken into account. The format of which such shorthand will take shape, is therefor the topic for another article.&lt;&#x2F;p&gt;
&lt;p&gt;Note that previous articles in this series can be also be found on this site: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-1&#x2F;&quot;&gt;Part 1, General Introduction&lt;&#x2F;a&gt; covers the basic elements of Linked Data&#x2F;RDF along with their representation in Clojure. It also introduces &amp;quot;The Fox and the Stork&amp;quot; formalised using Linked Data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-2&#x2F;&quot;&gt;Part 2, Literal Values&lt;&#x2F;a&gt; describes how literal values can be represented.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-3&#x2F;&quot;&gt;Part 3, Named Graphs&lt;&#x2F;a&gt; describes the notion of representing, and naming, graphs, which allows for representing information about facts and graphs themselves.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As always, the functionality detailed in these articles can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;aesopica&quot;&gt;Aesopica&lt;&#x2F;a&gt; library for using Clojure to write Linked Data.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Aesopica, Part 3: Named Graphs</title>
        <published>2018-12-04T00:00:00+00:00</published>
        <updated>2018-12-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/aesopica-3/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/aesopica-3/</id>
        
        <content type="html">&lt;p&gt;This article is the third part of a series, examining the use of the Clojure language for representing Linked Data, with examples from Aesop&#x27;s stories. In &lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-1&#x2F;&quot;&gt;part one&lt;&#x2F;a&gt; the basic elements of &amp;quot;The Fox and the Stork&amp;quot; story were formalised as Linked Data in Clojure, while in &lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-2&#x2F;&quot;&gt;part two&lt;&#x2F;a&gt; we investigated how various literal values can be described. In this article we examine how information about facts themselves, such as meta-information, can be described with Linked Data. As always, the functionality detailed in these articles can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;aesopica&quot;&gt;Aesopica&lt;&#x2F;a&gt; library for using Clojure to write Linked Data.&lt;&#x2F;p&gt;
&lt;p&gt;In Linked Data, facts are represented as triples of subjects, predicates and objects. For example, when representing the story of the &amp;quot;The Fox and the Stork&amp;quot; one fact that we want to represent is &amp;quot;The Fox gives an invitation.&amp;quot; In this fact &amp;quot;The Fox&amp;quot; is the subject, the &amp;quot;gives an&amp;quot; is the predicate and &amp;quot;an invitation&amp;quot; is the object. Of course, as we mentioned in our previous articles, one of the strengths of Linked Data is that the elements are more precisely defined than just their natural language representations in a sentence. A Uniform Resource Identifier (&lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;wiki&#x2F;URI&quot;&gt;URI&lt;&#x2F;a&gt;) is used to more formally identify these elements. This would make the previous fact to be written as follows, using the Turtle notation of RDF:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;http:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;http:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;gives-invitation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;http:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When making using a base prefix for &lt;code&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&lt;&#x2F;code&gt; this could be shortened as: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &amp;lt;gives-invitation&amp;gt; &amp;lt;invitation1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using our Clojure based notation, that was introduced in the previous articles, we could write this same fact as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;context
&lt;&#x2F;span&gt;&lt;span&gt;   {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;facts
&lt;&#x2F;span&gt;&lt;span&gt;   #{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :gives-invitation :invitation1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above-mentioned fact is just one out of many needed to represent the full story of &amp;quot;The Fox and the Stork&amp;quot;. In most cases a multitude of facts is required to represent the required knowledge. A set of facts, each consisting of subjects, predicates and objects, form a knowledge graph which provides us with a very general, but precise, way to represent knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;However there are scenarios when we want to represent knowledge about the facts themselves. One way Linked Data&#x2F;RDF facilitates this is the use of the &amp;quot;named graphs&amp;quot;. Named graphs allows us to associate an identifier (a [URI](Uniform Resource Identifier)) with a fact, or a set of facts. This essentially gives a name to a graph in the knowledge base, hence the notion of &amp;quot;named graphs&amp;quot;. Such an identifier can then be used as a way to add information about the facts with which it is associated.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;n-quads&#x2F;&quot;&gt;NQUADS&lt;&#x2F;a&gt; syntax for RDF illustrates one way such named graphs can be represented. In this representation all the elements of the fact: the subject, predicate, object and optionally a graph-name, are written out fully, separated by spaces and concluding with a dot (&lt;code&gt;.&lt;&#x2F;code&gt;) . &lt;&#x2F;p&gt;
&lt;p&gt;To take a single fact as an example, here follows a NQUADS format representation that details that &amp;quot;for the first invitation the Stork has been invited&amp;quot;, and this fact is part of the &amp;quot;first dinner&amp;quot; named graph: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For this fact there are four elements to be represented, hence we can refer to these elements together as a quad, versus the notion of a triple for facts just consisting of a subject, predicate and object. As mentioned previously, URIs are used to precisely identify each element:  &lt;code&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt;&lt;&#x2F;code&gt; is the subject, &lt;code&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&amp;gt;&lt;&#x2F;code&gt; is the predicate and &lt;code&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt;&lt;&#x2F;code&gt; is the object respectively. In addition the graph is identified by the URI &lt;code&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;The big benefit of using such identifiers as names for the graphs is that they themselves can be part of facts. For example if we want to express that the facts contained inside the &amp;quot;first dinner&amp;quot; graph occur before the facts of the &amp;quot;second dinner&amp;quot; graph, we can use the fact: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2006&#x2F;time#before&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that this fact itself is not part of any named graph. In a knowledge base of facts this would make it a part of the &amp;quot;default graph&amp;quot;. A default graph is a graph without any particular name. This makes the mixing of &amp;quot;regular&amp;quot; facts, where each fact consists of a triple, and facts in explicit named graphs, where each fact is a quad, possible in a single knowledge base.&lt;&#x2F;p&gt;
&lt;p&gt;An example of a sightly expanded version using of &amp;quot;The Fox and the Stork&amp;quot;&amp;quot; story using named graphs in the NQUADS format can be therefor be as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#type&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2006&#x2F;time#before&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#type&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;narrow-mouthed-jug&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-food&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;crumbled-food&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;gives-invitation&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation2&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;narrow-mouthed-jug&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;gives-invitation&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-food&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;soup&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;serves-using&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;shallow-plate&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;invitation1&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;has-invited&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;stork&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;dinner1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we introduced the concept of &amp;quot;named graphs&amp;quot; we now want introduce a way to represent them in the Clojure representation of Linked Data. Similarly on how in NQUADS the triples are extended to quads to indicate the name of the graph, we extend our &lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-1&#x2F;&quot;&gt;previously introduced Clojure syntax&lt;&#x2F;a&gt; to be able to use quads for facts, as opposed to just triples. Similarly to NQUADS the, optional, fourth element of each fact represents the named graph identifier. Any regular triple based fact is part of the default graph in the knowledge base, similarly to the NQUAD representation.&lt;&#x2F;p&gt;
&lt;p&gt;The resulting Clojure representation of above-mentioned Linked Data story can be written as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fox-and-stork-named-graph-edn
&lt;&#x2F;span&gt;&lt;span&gt;  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;context
&lt;&#x2F;span&gt;&lt;span&gt;   {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:rdf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:time &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;2006&#x2F;time#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;facts
&lt;&#x2F;span&gt;&lt;span&gt;   #{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :gives-invitation :invitation1 :dinner1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :has-invited :stork :dinner1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :has-food :soup :dinner1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :serves-using :shallow-plate :dinner1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :gives-invitation :invitation2 :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :has-invited :fox :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :has-food :crumbled-food :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :serves-using :narrow-mouthed-jug :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :serves-using :narrow-mouthed-jug :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:dinner1 :time&#x2F;before :dinner2&lt;&#x2F;span&gt;&lt;span&gt;]}})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main difference between the Clojure representation and NQUADS is that the Clojure representation uses prefixes and NQUADS uses full URIs written out each time. This is a deliberate design choice in syntax from both perspectives. In NQUADS this allows the format to represent each fact on a single line, without the need for a lookup based on context for the full URI of elements. In the Clojure representation the prefixes allow for a much more compact fact representation that makes for easier reading and writing by human users. &lt;&#x2F;p&gt;
&lt;p&gt;There are a number of other formats for writing Linked Data, some of which support named graphs. &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;trig&#x2F;&quot;&gt;TriG&lt;&#x2F;a&gt; for example is an extension of the Turtle format used in previous articles in this series. &lt;a href=&quot;https:&#x2F;&#x2F;json-ld.org&#x2F;&quot;&gt;JSON-LD&lt;&#x2F;a&gt; is also a very commonly used format for Linked Data that also supports named graphs. With the introduction of the Clojure way of writing Linked Data in this series, it makes sense to enable translating Linked Data into these formats for compatibility and reaching a wider audience. The facts on how to achieve this will be detailed in another article.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Aesopica, Part 2: Literal Values</title>
        <published>2018-09-14T00:00:00+00:00</published>
        <updated>2018-09-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/aesopica-2/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/aesopica-2/</id>
        
        <content type="html">&lt;p&gt;This article is the second part of a series, examining the use of the Clojure language for representing Linked Data, with examples from Aesop&#x27;s stories. Part one can be found &lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;aesopica-1&#x2F;&quot;&gt;on this site&lt;&#x2F;a&gt; where the basic elements of the Fox and the Stork story were formalised. In this article we examine how literal values can be represented, using Clojure, in Linked Data. The code to enable the functionality described in these articles can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;aesopica&quot;&gt;Aesopica&lt;&#x2F;a&gt; library for using Clojure to write Linked Data.&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned in the previous article the story of the Fox and the Stork is about the fox who invited the stork for a dinner. At the dinner soup was served from a shallow plate that the fox could eat but the stork could not. In return, the stork invited the fox to a dinner, where the food was served in a narrow mouthed jug. This time the fox could not reach the food, while the stork ate it happily. &lt;&#x2F;p&gt;
&lt;p&gt;Elements of this story can be represented as &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;standards&#x2F;semanticweb&#x2F;data&quot;&gt;Linked Data&lt;&#x2F;a&gt;, and in particular the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;RDF&#x2F;&quot;&gt;Resource Description Framework (RDF)&lt;&#x2F;a&gt; that allows for a precise retelling of the story that is understandable to both humans and machines alike. &lt;&#x2F;p&gt;
&lt;p&gt;For example, the part of the Linked Data we generated in the previous article is as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;stork&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &amp;lt;gives-invitation&amp;gt; &amp;lt;invitation1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;invitation1&amp;gt; &amp;lt;has-invited&amp;gt; &amp;lt;stork&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;invitation1&amp;gt; &amp;lt;has-food&amp;gt; &amp;lt;soup&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which details the elements of the story that the fox invites the stork, where soup is served. Elements that might be implicitly obvious to a human reader, but not to a program, that the fox and the stork are animals, are also represented in this fragment. These elements are describes as a set of facts, where each fact is a triple in the form of a subject, predicate and object. Each part of these facts in this example are represented as a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Uniform_Resource_Identifier&quot;&gt;Uniform Resource Identifier (URI)&lt;&#x2F;a&gt;, which are shortened with prefixes (i.e. &lt;code&gt;&amp;quot;rdf&amp;quot;&lt;&#x2F;code&gt;) or the base URI (i.e. &lt;code&gt;&amp;lt;fox&amp;gt;&lt;&#x2F;code&gt; is a shorthand for &lt;code&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox&lt;&#x2F;code&gt; ).&lt;&#x2F;p&gt;
&lt;p&gt;Now suppose we want to expand on the elements of this story. For example, we want to give the fox and the stork a name, an age, describe their personalities, give a time for the dinners, etc. For many of these elements we want to simply use value as objects in the representations. For example the number &lt;code&gt;2&lt;&#x2F;code&gt; as a representative of the age of the fox. In such scenarios we do not use URIs in the facts but &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;rdf11-concepts&#x2F;#section-Graph-Literal&quot;&gt;Literals&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Literals can be used to denote numbers, strings, dates and other such elements. In the Linked Data representation below we describe various attributes of the fox, the stork and the dinner with such literals.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;foaf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;xmlns.com&#x2F;foaf&#x2F;0.1&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;xsd: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema#&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;foaf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;foaf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span&gt;2.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &amp;lt;is-cunning&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; true.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;stork&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;stork&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;foaf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ooi&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;stork&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;foaf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span&gt;13.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;stork&amp;gt; &amp;lt;is-cunning&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; true.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;dinner1&amp;gt; &amp;lt;has-date&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2006-06-30T20:00:00&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;^^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;xsd:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dateTime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As one can see in this example, representing literals is very similar to other objects. For example &lt;code&gt;&amp;quot;vo&amp;quot;&lt;&#x2F;code&gt; in the triple &lt;code&gt;&amp;lt;fox&amp;gt; foaf:name &amp;quot;vo&amp;quot;&lt;&#x2F;code&gt; represents the name of the fox. Note that the base of &lt;code&gt;foaf&lt;&#x2F;code&gt; in &lt;code&gt;foaf:name&lt;&#x2F;code&gt; and &lt;code&gt;foaf:age&lt;&#x2F;code&gt; refers to the &#x27;Friend of a Friend&#x27; ontology, that allows us to use the common terminology of this ontology to describe facts about the fox and the stork.  Literals such as &lt;code&gt;2&lt;&#x2F;code&gt; or &lt;code&gt;true&lt;&#x2F;code&gt; describe the age, and whether the fox is cunning, respectively. These are called the lexical forms of the literals and while they also have explicit types (e.g. &lt;code&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema#string&lt;&#x2F;code&gt; or simply &lt;code&gt;xsd:string&lt;&#x2F;code&gt; when using prefixes ), these types of literals are so common that writing the types explicitly is not required. &lt;&#x2F;p&gt;
&lt;p&gt;The slightly more complicated case is the definition of the time of the dinner shown by &lt;code&gt;&amp;quot;2006-06-30T20:00:00&amp;quot;^^xsd:dateTime&lt;&#x2F;code&gt; that shows off custom types for literals, or when we would like to give the type explicitly. Here the addition of the &lt;code&gt;^^xsd:dateTime&lt;&#x2F;code&gt; is an URI (with a prefix) describing how lexical form, i.e. &amp;quot;2006-06-30T20:00:00&amp;quot; exactly maps to a particular value. This allows for easier interpretation of such literal values for machines.&lt;&#x2F;p&gt;
&lt;p&gt;As in the previous article, we aim to use the data representation and manipulation capabilities of Clojure to represent the above-mentioned fragment. Again, for the basic cases, such as strings, numbers, etc, we can be pretty straightforward and only use the lexical form, i.e. &lt;code&gt;&amp;quot;vo&amp;quot;&lt;&#x2F;code&gt;, &lt;code&gt;2&lt;&#x2F;code&gt; or &lt;code&gt;true&lt;&#x2F;code&gt; in or representations. For the cases where we also want to specify a custom datatype, we use a map such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;value &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2006-06-30T20:00:00&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;type :xsd&#x2F;dateTime&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where the keys &lt;code&gt;::aes&#x2F;value&lt;&#x2F;code&gt; and &lt;code&gt;::aes&#x2F;type&lt;&#x2F;code&gt; are representing the lexical form and datatype respectively. Note that &lt;code&gt;aes&lt;&#x2F;code&gt; in these keywords, and other refers, to the core namespace of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;aesopica&quot;&gt;Aesopica&lt;&#x2F;a&gt; library implementing this data representation. To full Clojure version of this example can be found below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;context
&lt;&#x2F;span&gt;&lt;span&gt;   {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:rdf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:foaf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;xmlns.com&#x2F;foaf&#x2F;0.1&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:xsd &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;facts
&lt;&#x2F;span&gt;&lt;span&gt;   #{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :foaf&#x2F;name &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :foaf&#x2F;age 2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :is-cunning true&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :has-weight 6.8&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :foaf&#x2F;name &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ooi&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :foaf&#x2F;age 13&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :is-cunning true&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:dinner1 :has-date &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;value &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2006-06-30T20:00:00&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;type :xsd&#x2F;dateTime&lt;&#x2F;span&gt;&lt;span&gt;}]}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course given that this story is centuries old, it is unlikely that the dinner took place at &lt;code&gt;2006-06-30T20:00:00&lt;&#x2F;code&gt;. As always care must be taken when taking things literally.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Aesopica, Part 1: General Introduction</title>
        <published>2018-09-10T00:00:00+00:00</published>
        <updated>2018-09-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/aesopica-1/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/aesopica-1/</id>
        
        <content type="html">&lt;p&gt;The stories called Aesop&#x27;s Fables or the Aesopica, are an ancient collection of stories that have been passed down to modern day. These stories are of diverse origins they cover a wide variety of themes. Although originally intended for an adult audience, in later times were often used for the education of children.&lt;&#x2F;p&gt;
&lt;p&gt;One of such stories is the tale of the Fox and the Stork. There are many versions of this fable, but the overall outline is generally as follows:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The fox invited the stork to dinner. At the dinner soup was served from a shallow plate, that the fox could eat but the hungry stork could not even taste. In turn the stork invited the fox to a dinner. Dinner was served in a narrow mouthed jug filled with crumbled food. This time the fox could not reach the food, while the stork ate.&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=&amp;#x2F;img&amp;#x2F;series&amp;#x2F;aesopica&amp;#x2F;foxandstork.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;1884 fountain design depicting the story of the Fox and the Stork by Catalan sculptor Eduard Batiste Alentorn in Barcelona&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2018&#x2F;aesopica&#x2F;aesopica-1&#x2F;foxandstork.jpeg&quot; title=&quot;A 1884 fountain design depicting the story of the Fox and the Stork by Catalan sculptor Eduard Batiste Alentorn in Barcelona&quot; attr=&quot;By Jordiferrer - Own work, CC BY-SA 3.0&quot; attrlink=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;w&#x2F;index.php?curid=25764300&quot; &gt;}} --&gt;
&lt;p&gt;The intention of stories such as these, as well as text in general, is to convey meaning. However, in addition to humans, a new audience for text has come to light in recent years: machines. To facilitate this new audience a set of technologies has been developed to convey the meaning of text in a precise and unambiguous way that is easily understandable for both humans and machines alike. Many of these new methods fall under the umbrella of the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;standards&#x2F;semanticweb&#x2F;&quot;&gt;Semantic Web&lt;&#x2F;a&gt;. The goal of the Semantic Web is to create a web of data where the meaning of the information is both human and machine understandable.&lt;&#x2F;p&gt;
&lt;p&gt;One of the cornerstone technologies in conveying information for this purpose is &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;standards&#x2F;semanticweb&#x2F;data&quot;&gt;Linked Data&lt;&#x2F;a&gt;, and in particular the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;RDF&#x2F;&quot;&gt;Resource Description Framework (RDF)&lt;&#x2F;a&gt; standard that defines how this Linked Data can be expressed. I have written a &lt;a href=&quot;https:&#x2F;&#x2F;www.newresalhaider.com&#x2F;post&#x2F;interlinked-data&#x2F;&quot;&gt;short introduction to Linked Data&lt;&#x2F;a&gt; before but to summarize: it allows for the expressing information as a set of facts. These facts have the form of subject, predicate, object triples. A set of these facts is often called a knowledge base, or in an alternative view this can also been seen as a knowledge graph where the facts define the nodes and edges.&lt;&#x2F;p&gt;
&lt;p&gt;In a Linked Data representation the story of Fox and the Stork would look something like this: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;stork&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;animal&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &amp;lt;gives-invitation&amp;gt; &amp;lt;invitation1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;invitation1&amp;gt; &amp;lt;has-invited&amp;gt; &amp;lt;stork&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;invitation1&amp;gt; &amp;lt;has-food&amp;gt; &amp;lt;soup&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;invitation1&amp;gt; &amp;lt;serves-using&amp;gt; &amp;lt;shallow-plate&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;stork&amp;gt; &amp;lt;gives-invitation&amp;gt; &amp;lt;invitation2&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;invitation2&amp;gt; &amp;lt;has-invited&amp;gt; &amp;lt;fox&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;invitation2&amp;gt; &amp;lt;has-food&amp;gt; &amp;lt;crumbled-food&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;invitation2&amp;gt; &amp;lt;serves-using&amp;gt; &amp;lt;narrow-mouthed-jug&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &amp;lt;can-eat-food-served-using&amp;gt; &amp;lt;shallow-plate&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;fox&amp;gt; &amp;lt;can-not-eat-food-served-using&amp;gt; &amp;lt;narrow-mouthed-jug&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;stork&amp;gt; &amp;lt;can-eat-food-served-using&amp;gt; &amp;lt;narrow-mouthed-jug&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;stork&amp;gt; &amp;lt;can-not-eat-food-served-using&amp;gt; &amp;lt;shallow-plate&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is in the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;turtle&#x2F;&quot;&gt;Turtle syntax&lt;&#x2F;a&gt; of RDF. There are other types of syntax are available to represent Linked Data, for example in JSON form as &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;json-ld&#x2F;&quot;&gt;JSON-LD&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To summarize a bit of what this Linked Data format does in this scenario, is that it uses &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Uniform_Resource_Identifier&quot;&gt;Uniform Resource Identifiers (URIs)&lt;&#x2F;a&gt; to define the subjects, predicates and objects of each fact. This allows to precisely and unambiguously define and link the meaning between these elements. For example, the fact that the fox is a type of animal could be expressed by the triple with the full URIs: &lt;code&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;fox http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#type http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;animal .&lt;&#x2F;code&gt; Due to the fact that writing the full URIs can be quite cumbersome, the Turtle syntax uses two kinds of shorthands to help out. In this case one can define a base URI for the current document, &lt;a href=&quot;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&lt;&#x2F;a&gt;, as well as prefixes for other namespeaces, such as &lt;a href=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&lt;&#x2F;a&gt;, with which the writing of each fact that would begin with these URI fragments could be shortened.&lt;&#x2F;p&gt;
&lt;p&gt;When everything put together this format still describes the original story, albeit restructured into separate facts.&lt;&#x2F;p&gt;
&lt;p&gt;There exists many tools for handling Linked Data such as the above story. For example APIs, such as &lt;a href=&quot;https:&#x2F;&#x2F;jena.apache.org&#x2F;&quot;&gt;Jena&lt;&#x2F;a&gt;, can aid in the creation, storage and querying of data made available in such a fashion. Of course more and better tools and techniques are always welcome. In this article in particular we hope to describe how we can use the Clojure programming language to enable working with Linked Data. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;clojure.org&#x2F;&quot;&gt;Clojure&lt;&#x2F;a&gt; is a language that offers a lot of benefits. The focus on manipulating pure data, with immutable data-structures and functional programming, provides an excellent way to organize code. The ability to inter-operate with the Java and JavaScript ecosystems, allows for the use of many mature libraries as well as many avenues for deployment. &lt;&#x2F;p&gt;
&lt;p&gt;To use the data manipulation capabilities of Clojure to enable the Semantic Web, seems like a natural combination. Some previous works also aimed at exploring this area, notably &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ontodev&#x2F;edn-ld&quot;&gt;EDN-LD&lt;&#x2F;a&gt; which gives a convention and a library for working with Linked Data.&lt;&#x2F;p&gt;
&lt;p&gt;In this article we will also explore how we can use Clojure to interact with Linked Data. In our case we will focus on the creation Linked Data from a Clojure environment and we might take different conventions compared to previous work, so we start with a fresh implementation. &lt;&#x2F;p&gt;
&lt;p&gt;In Clojure, information is directly represented as data, as opposed to it being encapsulated into various other abstractions such as objects. A large subset of elements data in Clojure is also a data format called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;edn-format&#x2F;edn&quot;&gt;the Extensible Data Notation (EDN)&lt;&#x2F;a&gt;. The built-in elements in this notation are nil, booleans, strings, characters, symbols, keywords, integers, floating-point numbers, lists, vectors, maps and sets. The meaning behind most of these elements is relatively straightforward, so we only give a brief summary of them here and some examples. &lt;&#x2F;p&gt;
&lt;h5 id=&quot;nil&quot;&gt;Nil&lt;&#x2F;h5&gt;
&lt;p&gt;An empty or non-existent element is represented by &lt;code&gt;nil&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;booleans&quot;&gt;Booleans&lt;&#x2F;h5&gt;
&lt;p&gt;A boolean value can be &lt;code&gt;true&lt;&#x2F;code&gt; or &lt;code&gt;false&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;h5 id=&quot;strings&quot;&gt;Strings&lt;&#x2F;h5&gt;
&lt;p&gt;Strings are written in double quotes, for example: &lt;code&gt;&amp;quot;This sentence is a string.&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;characters&quot;&gt;Characters&lt;&#x2F;h5&gt;
&lt;p&gt;Characters representing single characters, and are preceded by a backslash, for example &lt;code&gt;\c&lt;&#x2F;code&gt; or &lt;code&gt;\newline&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;h5 id=&quot;symbols&quot;&gt;Symbols&lt;&#x2F;h5&gt;
&lt;p&gt;Symbols are representing identifiers, written by a set of characters (with a few additional rules). Examples of identifiers are for example &lt;code&gt;foo&lt;&#x2F;code&gt;, &lt;code&gt;clojure.core&lt;&#x2F;code&gt;, &lt;code&gt;clojure.string&#x2F;split&lt;&#x2F;code&gt;. As some of these examples show, in Clojure they are used, among other things to refer to modules and functions. Another interesting feature, as the &lt;code&gt;clojure.string&#x2F;split&lt;&#x2F;code&gt; example shows, is that they can be namespaced which helps to organize symbols and avoid name collisions.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;keywords&quot;&gt;Keywords&lt;&#x2F;h5&gt;
&lt;p&gt;Keywords are very similar to symbols but they are identifiers that refer to themselves. They are constructed much like symbols, but with a leading &lt;code&gt;:&lt;&#x2F;code&gt;. Examples of keywords are &lt;code&gt;:fruit&lt;&#x2F;code&gt; or &lt;code&gt;:company.persons&#x2F;name&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;h5 id=&quot;integers-and-floats&quot;&gt;Integers and Floats&lt;&#x2F;h5&gt;
&lt;p&gt;Integers and floats (floating point numbers) are used, as expected, to write numbers &lt;code&gt;3&lt;&#x2F;code&gt; or &lt;code&gt;4.5&lt;&#x2F;code&gt; for example. &lt;&#x2F;p&gt;
&lt;p&gt;All these elements described above can be put in collections. &lt;&#x2F;p&gt;
&lt;h5 id=&quot;lists&quot;&gt;Lists&lt;&#x2F;h5&gt;
&lt;p&gt;Lists are a sequence of values enclosed in &lt;code&gt;()&lt;&#x2F;code&gt;, for example &lt;code&gt;(2 &amp;quot;A string.&amp;quot; false)&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;h5 id=&quot;vectors&quot;&gt;Vectors&lt;&#x2F;h5&gt;
&lt;p&gt;Vectors are a sequence of values enclosed in &lt;code&gt;[]&lt;&#x2F;code&gt;, for example &lt;code&gt;[true nil :company&#x2F;name]&lt;&#x2F;code&gt;. which are designed for random access of its elements. &lt;&#x2F;p&gt;
&lt;h5 id=&quot;sets&quot;&gt;Sets&lt;&#x2F;h5&gt;
&lt;p&gt;Sets are collections of unique values enclosed in &lt;code&gt;#{}&lt;&#x2F;code&gt;, such as &lt;code&gt;#{:fruit 2}&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;h5 id=&quot;maps&quot;&gt;Maps&lt;&#x2F;h5&gt;
&lt;p&gt;Finally maps are key value pairs, enclosed in curly braces &lt;code&gt;{}&lt;&#x2F;code&gt;, for example &lt;code&gt;{:name &amp;quot;John Smith&amp;quot;, :age 4}&lt;&#x2F;code&gt;, where each key is unique. Of course collections can also nested any type of collection.&lt;&#x2F;p&gt;
&lt;p&gt;Using this notation elements of EDN, we can build an EDN based version of the story of the Fox and the Stork, using some conventions. &lt;&#x2F;p&gt;
&lt;p&gt;Given that in many practical cases we are probably going to shorten URIs with prefixes when writing, we can use a keyword for denoting elements. In the case where we would use the base prefix, we can just use a regular, non-namespaced, keyword, i.e. &lt;code&gt;:fox&lt;&#x2F;code&gt;, and in cases where we would refer to any other prefix we can use namespaced keywords, i.e. &lt;code&gt;:rdf&#x2F;type&lt;&#x2F;code&gt;. A full fact could then be described with a relatively straightforward vector, for example &lt;code&gt;[:fox :rdf&#x2F;type :animal]&lt;&#x2F;code&gt; and the knowledge base with a set of facts such as &lt;code&gt;#{[:fox :rdf&#x2F;type :animal] [:stork :rdf&#x2F;type :animal]}&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Of course this means that in addition to facts we also need some data for the context, in which we store the base and other prefixes and to what they map to, to be able to fully build an equivalent Linked Data representation. The context will be a map of the relevant prefixes as keys, as well as nil for the base prefix. For the above example this means that the below example will describe the context needed to resolve all the full URIs: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:rdf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Putting everything together, to have a full Linked Data graph we need a context and a set of facts, so the overall structure will be a map where these are both defined:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;context
&lt;&#x2F;span&gt;&lt;span&gt;   {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;aesop&#x2F;foxstork&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:rdf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;::aes&#x2F;facts
&lt;&#x2F;span&gt;&lt;span&gt;   #{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :rdf&#x2F;type :animal&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :gives-invitation :invitation1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :has-invited :stork&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :has-food :soup&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation1 :serves-using :shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :gives-invitation :invitation2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :has-invited :stork&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :has-food :crumbled-food&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:invitation2 :serves-using :narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :can-eat-food-served-using :shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:fox :can-not-eat-food-served-suing :narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :can-eat-food-served-using :narrow-mouthed-jug&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;     [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:stork :can-not-eat-food-served-suing :shallow-plate&lt;&#x2F;span&gt;&lt;span&gt;]}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have started a small library for manipulating Linked Data structures written this way, with the name &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;aesopica&quot;&gt;Aesopica&lt;&#x2F;a&gt;. It is in very early stages, where the current main functionality is to translate Linked Data written this way into the Turtle format described above.&lt;&#x2F;p&gt;
&lt;p&gt;Of course there are lot of other elements of Linked Data that needs to be represented in this that we did not tackle yet. In addition there are also a large number of Clojure libraries that could be used to make writing and using Linked Data in this fashion easier. How these features could be achieved however is a story for another time.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Data Interlinked</title>
        <published>2018-02-18T00:00:00+00:00</published>
        <updated>2018-02-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/interlinked-data/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/interlinked-data/</id>
        
        <content type="html">&lt;p&gt;&lt;em&gt;This article contains some very minor spoilers for the Blade Runner 2049 movie. If you have not seen it yet, by all means do, it is really good.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;And blood-black nothingness began to spin... A system of cells interlinked within cells interlinked within cells interlinked within one stem... And dreadfully distinct against the dark, a tall white fountain played.&amp;quot;&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=palefire.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;Pale Fire by Vladimir Nabokov © Berkley Medallion&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2018&#x2F;interlinked-data&#x2F;palefire.jpg&quot; title=&quot;Pale Fire by Vladimir Nabokov&quot; caption=&quot;Cover of the novel Pale Fire © Berkley Medallion&quot;&gt;}} --&gt;
&lt;p&gt;The above is a quote from the poem &lt;em&gt;Pale Fire&lt;&#x2F;em&gt;. It occurs in the novel titled &lt;em&gt;Pale Fire&lt;&#x2F;em&gt; by Vladimir Nabokov which has been recently used in the movie &lt;em&gt;Blade Runner 2049&lt;&#x2F;em&gt;. In the movie it was part of the Baseline test, a way to test the emotional response of a Replicant. The reason they undergo this process is because their creators fear that the connections they might make in their lives would give them emotions that would interfere with their intended purpose.&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=bladerunner2049.png&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt; Blade Runner 2049 Poster for the Movie © Columbia Pictures&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2018&#x2F;interlinked-data&#x2F;bladerunner2049.png&quot; title=&quot;Blade Runner 2049&quot; caption=&quot;Poster for the movie © Columbia Pictures&quot;&gt;}} --&gt;
&lt;p&gt;In life, such relationships always surround us. They are not just between people, but in our work, in our beliefs, in our art and in the knowledge we represent.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose we intend to describe the link between the movie &lt;em&gt;Blade Runner&lt;&#x2F;em&gt; and the book &lt;em&gt;Pale Fire&lt;&#x2F;em&gt;. We can summarize this information with a number of facts.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Blade Runner is a movie. 
&lt;&#x2F;span&gt;&lt;span&gt;Blade Runner has a character named K.
&lt;&#x2F;span&gt;&lt;span&gt;K is a Replicant.
&lt;&#x2F;span&gt;&lt;span&gt;Replicants must pass a Baseline Test.
&lt;&#x2F;span&gt;&lt;span&gt;Baseline Test is based on the poem Pale Fire.
&lt;&#x2F;span&gt;&lt;span&gt;Pale Fire is written by Vladimir Nabokov.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above facts show that the links that can tie together various pieces of knowledge. One can trace the connections from a simple description of a movie, released in 2017, to the author Vladimir Nabokov, as was intended by the writers of the movie.&lt;&#x2F;p&gt;
&lt;p&gt;Although the above recitation of facts is easy to follow, from a knowledge representation perspective one can find some issues with it. &lt;&#x2F;p&gt;
&lt;p&gt;First the description is imprecise. As the &lt;em&gt;Blade Runner&lt;&#x2F;em&gt; could refer to the newer &lt;em&gt;Blade Runner 2049&lt;&#x2F;em&gt; movie as opposed to the 1982 original titled &lt;em&gt;Blade Runner&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=bladerunner.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;Movie poster for the first Blade Runner Movie © 1982 The Ladd Company&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2018&#x2F;interlinked-data&#x2F;bladerunner.jpg&quot; title=&quot;The first movie titled Blade Runner&quot; caption=&quot;Blade Runner movie poster © 1982 The Ladd Company&quot;&gt;}} --&gt;
&lt;p&gt;Second the set of facts is incomplete. The poem &lt;em&gt;Pale Fire&lt;&#x2F;em&gt; is indeed written by Vladimir Nabokov, but it is presented in the book &lt;em&gt;Pale Fire&lt;&#x2F;em&gt;, also written by Nabokov as the work of the fictional poet &lt;em&gt;John Shade&lt;&#x2F;em&gt;. The set of facts here fails to make the explicit distinction between &lt;em&gt;Pale Fire (poem)&lt;&#x2F;em&gt; and &lt;em&gt;Pale Fire (book)&lt;&#x2F;em&gt;, and that the poem is contained in the book. &lt;&#x2F;p&gt;
&lt;p&gt;Third, and perhaps most importantly, the above list of facts relies a lot on the users grasp of the English natural language. For a program, it can be surprisingly difficult to understand the relationships such as &amp;quot;is a&amp;quot;, &amp;quot;is based on&amp;quot;, &amp;quot;named&amp;quot;, etc between the various elements in the text.&lt;&#x2F;p&gt;
&lt;p&gt;These issues seem somewhat nit-picky, as this information can be derived from the rest of the article. However this means that the knowledge in the summary does not stand on its own. If those facts are detailed without the rest of the article, or if the reader of them is a machine, and not a person that can easily add some context, they might lead them to incorrect or insufficient conclusions. They might get wrong information that the 1982 movie Blade Runner has a character named K, or fail to see the link that poem is contained in the book by the same author. And although in the case of Blade Runner, these issues might seem small, this is different if the knowledge relates to financial, legal or clinical domains. Here, mistakes or omissions can be costly.&lt;&#x2F;p&gt;
&lt;p&gt;Having a larger list of more detailed facts can help with these issues, but to a certain extent they still remain due to the ambiguity of the natural language. In addition the fact that is often very easy to skip over implicit details. This is especially true for the issue of a computer not being able to make (enough) sense of this information. &lt;&#x2F;p&gt;
&lt;p&gt;A proposed solution to these issues is &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;standards&#x2F;semanticweb&#x2F;data&quot;&gt;Linked Data&lt;&#x2F;a&gt; and in particular &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;standards&#x2F;techs&#x2F;rdf#w3c_all&quot;&gt;Resource Description Framework (RDF)&lt;&#x2F;a&gt;, with which Linked Data data can be expressed. These technologies allow us to represent the above facts in a more formal and precise way, that can make it both human and machine read- and write-able. &lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=rdf.png&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;Resource Description Framework (RDF) Logo © W3C&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2018&#x2F;interlinked-data&#x2F;rdf.png&quot; title=&quot;Resource Description Framework&quot; caption=&quot;Logo of RDF © W3C&quot;&gt;}} --&gt;
&lt;p&gt;One significant feature of RDF is that requires precise naming. Many elements of it are either a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;International_Resource_Identifier&quot;&gt;International Resource Identifier (IRI)&lt;&#x2F;a&gt; or some raw data-types. Good examples of the former are URLs, such as the link to this website: http:&#x2F;&#x2F;www.newresalhaider.com , that allows one to find a web resource. Examples of the later are texts or numbers, such as &amp;quot;Blade Runner&amp;quot; or 15 respectively.&lt;&#x2F;p&gt;
&lt;p&gt;The other significant feature of RDF is that most knowledge is represented as a set of facts, where each fact is expressed as subject, predicate object triples. For example the fact &amp;quot;Blade Runner is a movie&amp;quot; is expressed with the subject &amp;quot;Blade Runner&amp;quot; the predicate &amp;quot;is a&amp;quot; and the object &amp;quot;movie&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Putting this together in RDF (using the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;turtle&#x2F;&quot;&gt;Turtle&lt;&#x2F;a&gt; notation) you would get a triple such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Turtle &quot;&gt;&lt;code class=&quot;language-Turtle&quot; data-lang=&quot;Turtle&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;bladerunner&#x2F;blade-runner&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#type&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;bladerunner&#x2F;movie&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This example is an RDF way of saying &amp;quot;Blade Runner is a type of movie&amp;quot; or alternatively &amp;quot;Blade runner is a movie&amp;quot;. This type of representation shows us a couple of benefits. First we are now being more precise as each element in the triple can refer to one specific resource, for example Blade Runner or Movie, where there IRI makes sure we do not necessarily confuse the term with anything else. Second this also shows off the fact that you can link to resources from different places: the predicate &amp;quot;type&amp;quot; is from a completely different domain. This allows us to re-use knowledge that has already been defined. As one can expect saying something is of a &amp;quot;type&amp;quot;, for example an apple is a type of a fruit, is actually very common. This is one of the main strengths of what makes Linked Data so powerful, one can re-use knowledge already stated. &lt;&#x2F;p&gt;
&lt;p&gt;Typing out the full IRI each time can be pretty bothersome, and it does not help the readability either. Thankfully we can define a common prefix we use separately, and just write the last part of the IRI in each case. In this case we define a base prefix and we refer to subject and object by &amp;quot;&amp;lt;#blade-runner&amp;gt;&amp;quot; and &amp;quot;&amp;lt;#movie&amp;gt;&amp;quot; respectively.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Turtle &quot;&gt;&lt;code class=&quot;language-Turtle&quot; data-lang=&quot;Turtle&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;bladerunner&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#blade-runner&amp;gt; &amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#type&amp;gt; &amp;lt;#movie&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can do similar things when linking elements that have been already defined elsewhere. In this case we define a prefix to use as an abbreviation while writing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Turtle &quot;&gt;&lt;code class=&quot;language-Turtle&quot; data-lang=&quot;Turtle&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;bladerunner&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#blade-runner&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#movie&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In practice, &amp;quot;rdf:type&amp;quot; as a predicate is so common that there is an even simpler notation. We can use &#x27;a&#x27; as a predicate, which is in line with what we intend to express: &amp;quot;Blade Runner is a movie&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;The resulting RDF facts look as follows (note that the rdf prefix could be omitted here as the &amp;quot;a&amp;quot; abbreviation does not make it necessary):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Turtle &quot;&gt;&lt;code class=&quot;language-Turtle&quot; data-lang=&quot;Turtle&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;bladerunner&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#blade-runner&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#movie&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we aim to write something that is just a text as a subject, say when referring to the title of a movie , we can do that as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Turtle &quot;&gt;&lt;code class=&quot;language-Turtle&quot; data-lang=&quot;Turtle&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;bladerunner&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#blade-runner&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#movie&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#blade-runner&amp;gt; &amp;lt;#title&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Blade Runner 2049&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this way of writing, we can actually rewrite our original set of facts as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ttl&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ttl &quot;&gt;&lt;code class=&quot;language-ttl&quot; data-lang=&quot;ttl&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.newresalhaider.com&#x2F;ontologies&#x2F;bladerunner&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;rdf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;foaf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;xmlns.com&#x2F;foaf&#x2F;0.1&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#blade-runner&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#movie&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#blade-runner&amp;gt; &amp;lt;#title&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Blade Runner 2049&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#blade-runner&amp;gt; &amp;lt;#has-character&amp;gt; &amp;lt;#K&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#K&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;foaf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#K&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#replicant&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#replicant&amp;gt; &amp;lt;#must-pass&amp;gt; &amp;lt;#baseline-test&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#baseline-test&amp;gt; &amp;lt;#based-on&amp;gt; &amp;lt;#pale-fire-poem&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#pale-fire-poem&amp;gt; &amp;lt;#included-in&amp;gt; &amp;lt;#pale-fire-book&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#pale-fire-book&amp;gt; &amp;lt;#written-by&amp;gt; &amp;lt;#nabokov&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;#nabokov&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;foaf:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Vladimir Nabokov&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this version we suddenly defined our list of facts in a more formal manner than previously. This makes it much more simpler for machines to understand this set of facts. In fact we actually used the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;FOAF_(ontology)&quot;&gt;Friend of a Friend (FOAF) ontology&lt;&#x2F;a&gt; to use the notion of name that is also used when talking about relationships between people. In fact, one could argue that using an existing movie dataset, such as the &lt;a href=&quot;https:&#x2F;&#x2F;old.datahub.io&#x2F;dataset&#x2F;linkedmdb&quot;&gt;Linked Movie Database&lt;&#x2F;a&gt; would have been even better, which we will leave as an exercise for the reader.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully I could show a glimpse of the possibilities the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;standards&#x2F;semanticweb&#x2F;&quot;&gt;Semantic Web&lt;&#x2F;a&gt; for which Linked Data forms the basis, with this example. Of course the above is just scratching the surface of what it can be done with RDF, Linked Data. With each addition, our set of facts could grow. One could go beyond a single movie and build a document of poems that are references in movies, or a knowledge base of the Blade Runner franchise. It might be easier than one expects, due to the fact that knowledge, much like people are...&lt;&#x2F;p&gt;
&lt;p&gt;Interlinked.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
