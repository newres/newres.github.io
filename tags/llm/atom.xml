<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - LLM</title>
    <link href="https://www.newresalhaider.com/tags/llm/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://www.newresalhaider.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-04-12T00:00:00+00:00</updated>
    <id>https://www.newresalhaider.com/tags/llm/atom.xml</id>
    <entry xml:lang="en">
        <title>The Great AI&#x27;Tuin</title>
        <published>2025-04-12T00:00:00+00:00</published>
        <updated>2025-04-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/aituin/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/aituin/</id>
        
        <content type="html">&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turtle_(syntax)&quot;&gt;Turtle language&lt;&#x2F;a&gt;, along with the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Semantic_Web&quot;&gt;Semantic Web&lt;&#x2F;a&gt;, offers a powerful way to represent and work with knowledge across virtually any domain. Unfortunately, it is often overlooked in practice due to several reasons: limited tooling, unfamiliarity with Semantic Web concepts, and the fact that much knowledge still exists in less structured formats, such as natural language. &lt;&#x2F;p&gt;
&lt;p&gt;However, in the age of large language models (LLMs) this does not have to be the case anymore. We finally have a way to bridge that gap between unstructured language and structured knowledge. Turtle in particular is very well suited for the structured knowledge representation. In this article I will demonstrate how LLMs can be used to translate natural language texts into the Turtle format and why this might be beneficial. To make this fun, I will use some examples derived from the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Discworld&quot;&gt;Discworld series of books&lt;&#x2F;a&gt; by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Terry_Pratchett&quot;&gt;Terry Pratchett&lt;&#x2F;a&gt;. The Discworld books, which I highly recommend, are a series of fantasy novels often with satirical themes set in Discworld. Discworld is flat, resting upon the back of four elephants who in turn stand on a gigantic spacefaring turtle, named the Great A&#x27;Tuin. It alludes to the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;World_Turtle&quot;&gt;World Turtle&lt;&#x2F;a&gt; myth, which makes it a very apt topic to talk about when explaining the uses of the Turtle language.&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=aituin.png&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;A depiction of the Great A&amp;#x27;Tuin that carries the elephants that carry Discworld. Due to the limitations of image generation only three of the four elephants that carry Discworld are shown, the fourth is on a coffee break. üòÉ&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Before diving into examples, let‚Äôs briefly look at what the Turtle language actually is. Turtle (short for Terse RDF Triple Language) is a compact, readable format for expressing information as triples: subject‚Äìpredicate‚Äìobject statements. It‚Äôs part of the RDF (Resource Description Framework) family, designed for describing relationships between entities in a way that‚Äôs both machine readable and human friendly.&lt;&#x2F;p&gt;
&lt;p&gt;A triple might look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-turtle &quot;&gt;&lt;code class=&quot;language-turtle&quot; data-lang=&quot;turtle&quot;&gt;&lt;span&gt;:book1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Small Gods&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This reads as: book1 has the title &amp;quot;Small Gods&amp;quot;. Of course in most cases we would like to describe multiple facts that we might be interested in, such as the genre of the book, a textual summary of it, etc, for which we use multiple triples. These triples could then create a rich knowledge graph of information that enables both humans and software to understand and reason about a domain.&lt;&#x2F;p&gt;
&lt;p&gt;In particular Turtle excels at:&lt;&#x2F;p&gt;
&lt;p&gt;üìå Formalizing concepts (e.g., by description of the book we mean it having a title, a creator, etc)&lt;&#x2F;p&gt;
&lt;p&gt;üîó Connecting related information (e.g., all books in a series)&lt;&#x2F;p&gt;
&lt;p&gt;üîç Supporting precise structured queries (e.g., ‚Äúfind all books belonging to the crime genre‚Äù)&lt;&#x2F;p&gt;
&lt;p&gt;üß† Enabling inference and integration with other data sources (e.g., use a commonly used definition of describing a book)&lt;&#x2F;p&gt;
&lt;p&gt;Now, let‚Äôs see how this works in practice with a Discworld based example. First we describe some information both with natural language and with Turtle and go over the differences. We start with the descriptions of three Discworld books in natural language, in this case generated by ChatGPT:&lt;&#x2F;p&gt;
&lt;p&gt;The Colour of Magic: &amp;quot;A bumbling wizard and a naive tourist embark on a chaotic journey across the Disc, in the book that kicks off the Discworld series.&amp;quot;
Guards! Guards!: &amp;quot;A ragtag city watch uncovers a dangerous conspiracy involving dragons and secret societies, all while stumbling toward reluctant heroism.&amp;quot;
Small Gods: &amp;quot;A forgotten god and his lone believer confront religious dogma, power, and philosophical questions in a deeply thoughtful standalone story.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Given the information in this article about the Discworld series of books and these description we can represent this information with the Turtle language as follows (also generated by an LLM from the previous text):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-turtle &quot;&gt;&lt;code class=&quot;language-turtle&quot; data-lang=&quot;turtle&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;purl.org&#x2F;dc&#x2F;terms&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;example.org&#x2F;book&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;schema.org&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;colour_of_magic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Book &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The Colour of Magic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Terry Pratchett&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isPartOf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;discworld_series &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A bumbling wizard and a naive tourist embark on a chaotic journey across the Disc, in the book that kicks off the Discworld series&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;genre &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fantasy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parody&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;adventure&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guards_guards &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Book &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Guards! Guards!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Terry Pratchett&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isPartOf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;discworld_series &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A ragtag city watch uncovers a dangerous conspiracy involving dragons and secret societies, all while stumbling toward reluctant heroism&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;genre &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;satire&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dragons&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;power structures&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;small_gods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Book &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Small Gods&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Terry Pratchett&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isPartOf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;discworld_series &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A forgotten god and his lone believer confront religious dogma, power, and philosophical questions in a deeply thoughtful standalone story&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;genre &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;faith&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;philosophy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;belief&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;satire&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;discworld_series &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BookSeries &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Discworld&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Terry Pratchett&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now lets go over the elements of the Turtle representation here:&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned before, each line in Turtle expresses a triple: a simple fact linking a subject to an object via a predicate (or property). For instance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-turtle &quot;&gt;&lt;code class=&quot;language-turtle&quot; data-lang=&quot;turtle&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;colour_of_magic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Book &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This says that ex:colour_of_magic (our identifier for the book) is a schema:Book: a class from the Schema.org vocabulary. The &lt;code&gt;a&lt;&#x2F;code&gt; is shorthand for &lt;code&gt;rdf:type&lt;&#x2F;code&gt;, indicating class membership. This is a common pattern in RDF and one of the ways Turtle stays concise and readable. The Turtle syntax also has the nice feature is that if we would have a series of triples such as: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-turtle &quot;&gt;&lt;code class=&quot;language-turtle&quot; data-lang=&quot;turtle&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;discworld_series &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BookSeries &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;discworld_series &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Discworld&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;discworld_series &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Terry Pratchett&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;that have a common subject, we do not have to repeat ourselves and can use the shorthand:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-turtle &quot;&gt;&lt;code class=&quot;language-turtle&quot; data-lang=&quot;turtle&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;discworld_series &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BookSeries &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Discworld&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Terry Pratchett&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The identifiers that make use of the prefixes are actually full URIs, such as &lt;code&gt;http:&#x2F;&#x2F;example.org&#x2F;book&#x2F;colour_of_magic&lt;&#x2F;code&gt;. In Turtle you can use prefixes to keep things short and tidy. The prefixes, and what they stand for, are given at the start of the Turtle definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;turtle&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-turtle &quot;&gt;&lt;code class=&quot;language-turtle&quot; data-lang=&quot;turtle&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;dct: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;purl.org&#x2F;dc&#x2F;terms&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ex: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;example.org&#x2F;book&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;schema: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;lt;http:&#x2F;&#x2F;schema.org&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the &lt;code&gt;ex&lt;&#x2F;code&gt; prefix is something we devised for this example, but the other prefixes refer to vocabularies that already exist that we could use: &lt;a href=&quot;https:&#x2F;&#x2F;www.dublincore.org&#x2F;specifications&#x2F;dublin-core&#x2F;dcmi-terms&#x2F;&quot;&gt;Dublin Core&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;schema.org&#x2F;&quot;&gt;Schema.org&lt;&#x2F;a&gt;. This allows us to not reinvent the wheel and make use of the fact that there already exist vocabularies for describing books, creators of things, etc. This is a big benefit for interoperability that you normally do not get out of the box with many other formalisms (such as JSON). Any tool already existing that uses these common vocabularies would be compatible with our small RDF description using these prefixes.&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of tooling, as mentioned previously, the set of triples creates a knowledge graph of interconnected information within a domain. We can also visualize this as a graph, for example using the &lt;a href=&quot;https:&#x2F;&#x2F;issemantic.net&#x2F;rdf-visualizer&quot;&gt;isSemantic RDF Visualizer&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=discworldgraph.png&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;A graph visualization of the Turtle description of the Discworld books.&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The key aspect that Turtle enables, especially in a world of LLMs, is allows us to be very precise and explicit with the semantics that we are describing. For example if we would just say we have a description of the Discworld books, it could be very unclear exactly what is included: the description, author, date of publishing, genres, etc. If we instead have a Turtle representation of the information, even if generated initially by an LLM, both humans as well as software can precisely check what information we describe and what we do not.&lt;&#x2F;p&gt;
&lt;p&gt;This explicitness is what allows us to do very precise queries on the semantics. Using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SPARQL&quot;&gt;SPARQL&lt;&#x2F;a&gt;, a query language for these type of knowledge graphs, we can find the book that has crime as part of its genre definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;PREFIX schema: &amp;lt;http:&#x2F;&#x2F;schema.org&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;PREFIX dct: &amp;lt;http:&#x2F;&#x2F;purl.org&#x2F;dc&#x2F;terms&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SELECT ?bookTitle WHERE {
&lt;&#x2F;span&gt;&lt;span&gt;  ?book schema:genre &amp;quot;crime&amp;quot; ;
&lt;&#x2F;span&gt;&lt;span&gt;        dct:title ?bookTitle .
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This query would return the following when run on our knowledge graph: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;Guards! Guards!&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Such queries would work even if we have lot more of these book definitions, without the potential for hallucinations or inaccuracies that sometimes occur when using LLMs and natural language.&lt;&#x2F;p&gt;
&lt;p&gt;As one can see, the Semantic Web and Turtle format offer powerful ways to structure and connect information. The main drawback used to be that knowledge is often represented in natural language, or other less accessible formats. This made the benefits of such knowledge graphs hard to realize. &lt;&#x2F;p&gt;
&lt;p&gt;Now, large language models can act as bridges: translating rich, human-authored natural language into structured formats like Turtle. This opens up new opportunities for building precise, interoperable knowledge graphs from books, documentation, or even casual writing. It allows humans or even software systems, to make very precise corrections or queries on this graph, without fear of inaccuracies.&lt;&#x2F;p&gt;
&lt;p&gt;If you ever have the chance, give this approach using Turtle a go. It can feel quite magical!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fellowship of Prolog</title>
        <published>2024-06-25T00:00:00+00:00</published>
        <updated>2024-06-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/fellowshipofprolog/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/fellowshipofprolog/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Logic_programming&quot;&gt;Logic programming&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Prolog&quot;&gt;Prolog&lt;&#x2F;a&gt; can be a very effective way to find solutions to a number of problems. Within Prolog one can define a program by describing it with facts (that represent what we know), rules (that show how to derive new knowledge) and queries (that describe what we would like to know). By using queries on a knowledge base of facts and rules we can solve a variety of problems in many domains.&lt;&#x2F;p&gt;
&lt;p&gt;This approach is quite powerful, but unfortunately Prolog as a programming language is often overlooked. One of the reasons for this is that it can be quite difficult for people without (logic) programming knowledge to break down problems into such terms. Even with experience in Prolog this process can be quite time consuming.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Large_language_model&quot;&gt;Large Language Models (LLMs)&lt;&#x2F;a&gt;, such as &lt;a href=&quot;https:&#x2F;&#x2F;openai.com&#x2F;chatgpt&#x2F;&quot;&gt;Chat-GPT&lt;&#x2F;a&gt;, can provide an interesting way to tackle this issue. In this article I will aim to show how Chat-GPT (or another LLM) could help create and use Prolog programs to solve problems. For this I will be using &amp;quot;Lord of the Rings&amp;quot; themed logic puzzles.&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=featured.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;Characters from the Fellowship of the Ring walking in a single line. This is the basic setup for the logic puzzles used in this article.&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Let&#x27;s say we want to describe a situation in which the members of the Fellowship of the Ring are walking down a narrow path. The path is so narrow that no one can walk side by side. Each Fellowship member can only walk in a single line, one after another. The puzzles are based on the idea that given a number of conditions we would like to know in which order the members of the Fellowship are walking.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s start off with a small number of conditions to show off the approach. We assume that only three members of the Fellowship are walking: Legolas, Gimli and Frodo. Our restrictions are that Legolas has to walk before Gimli and Gimli must be next to Frodo (this is the reverse order of what it can be seen in the above figure).&lt;&#x2F;p&gt;
&lt;!-- The Fellowship at this point consists of Aragorn, Boromir, Legolas, Gimli, Merry, Pippin, Frodo, Sam and Gandalf. --&gt;
&lt;!-- Aragorn is walking with at least 4 others behind him.
Merry wants to show his bravery to Pippin, so he walks directly in front of him.
Gandalf walks ahead of Aragorn.
Boromir wants to be guided by the ranger, Aragorn, so he walks somewhere behind him.
Boromor also wants to keep an eye out on the ring bearer, Frodo, so he walks directly behind him.
Sam is walking with next to at least another Hobbit (Frodo, Merry or Pippin).
Gimli wants to make sure Legolas does not outshine him, so he walks ahead of him.
Legolas only has at most two others behind him. --&gt;
&lt;p&gt;In order to model this puzzle with Prolog, first we need to define the notion of the &amp;quot;single line order&amp;quot; that the Fellowship is walking in. In addition we need to define what terms such as &lt;code&gt;before&lt;&#x2F;code&gt;, &lt;code&gt;ahead&lt;&#x2F;code&gt;, etc mean within the context of this puzzle in Prolog. For one well versed in Prolog this can be a pretty routine task but in this case let&#x27;s assume little to no Prolog knowledge for the person that aims to solve this puzzle. Instead we can ask Chat-GPT to come up with a translation of this problem to Prolog code. &lt;&#x2F;p&gt;
&lt;p&gt;The Prolog code that we use in this article could likely be run with any number of Prolog implementations, such as &lt;a href=&quot;https:&#x2F;&#x2F;www.swi-prolog.org&#x2F;&quot;&gt;SWI Prolog&lt;&#x2F;a&gt;. For this article we generate code to use with &lt;a href=&quot;http:&#x2F;&#x2F;tau-prolog.org&#x2F;&quot;&gt;Tau prolog&lt;&#x2F;a&gt;. The benefit of using Tau prolog is that it can run in the browser and it has an &lt;a href=&quot;http:&#x2F;&#x2F;tau-prolog.org&#x2F;sandbox&#x2F;&quot;&gt;online sandbox&lt;&#x2F;a&gt; available where code can be run without any installation. If one wants to follow along without any setup I highly recommend using this sandbox.&lt;&#x2F;p&gt;
&lt;!-- If one wants to follow along, while any Prolog implementation would be suitable (such as SWI Prolog), I recommend Tau Prolog as it has an online sandbox available where once could code without any installation.  --&gt;
&lt;p&gt;To create the Prolog code for the simplified version of the puzzle we ask Chat-GPT the following question: &lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;Can you write an example with tau prolog of a logic puzzle in which 3 members of the fellowship need to walk in a single line. Legolas has to be before Gimli and Gimli must be next to Frodo?&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;to which Chat-GPT gives us the code: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;% Load necessary library
&lt;&#x2F;span&gt;&lt;span&gt;:- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use_module&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;(lists)).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;% Define the predicate to find the order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fellowship_order&lt;&#x2F;span&gt;&lt;span&gt;(Order) :-
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Order &lt;&#x2F;span&gt;&lt;span&gt;= [_, _, _],  % There are three positions to fill.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(legolas, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(gimli, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(frodo, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;(legolas, gimli, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(gimli, frodo, Order).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;% Helper predicate to check &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;X is before Y in the List
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, List) :-
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nth0&lt;&#x2F;span&gt;&lt;span&gt;(IndexX, List, X),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nth0&lt;&#x2F;span&gt;&lt;span&gt;(IndexY, List, Y),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IndexX &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; IndexY.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;% Helper predicate to check &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;X is next to Y in the List
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, List) :-
&lt;&#x2F;span&gt;&lt;span&gt;    (   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;nth0&lt;&#x2F;span&gt;&lt;span&gt;(IndexX, List, X),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nth0&lt;&#x2F;span&gt;&lt;span&gt;(IndexY, List, Y),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(IndexX - IndexY) =:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    ).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;% Example query to find the order
&lt;&#x2F;span&gt;&lt;span&gt;% ?- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fellowship_order&lt;&#x2F;span&gt;&lt;span&gt;(Order).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;!-- Prolog code can be run with any number of Prolog implementations, (such as SWI Prolog) --&gt;
&lt;p&gt;From this small example we can see the general outline of how such a logic puzzle can be solved with Prolog. Although we are not going to describe in detail the full syntax and semantics a Prolog program, as there are some excellent &lt;a href=&quot;https:&#x2F;&#x2F;lpn.swi-prolog.org&#x2F;lpnpage.php?pageid=online&quot;&gt;introductions&lt;&#x2F;a&gt; on this subject, we are going to briefly go over some concepts.&lt;&#x2F;p&gt;
&lt;p&gt;A Prolog program is a knowledge base in which predicates, such as facts and rules, describe the domain. In our case the knowledge base defines this puzzle based on Lord of the Rings with three predicates: &lt;code&gt;before&lt;&#x2F;code&gt;, &lt;code&gt;next_to&lt;&#x2F;code&gt; and  &lt;code&gt;fellowship_order&lt;&#x2F;code&gt;. The &lt;code&gt;before&lt;&#x2F;code&gt; and &lt;code&gt;next_to&lt;&#x2F;code&gt; predicates express whether for two members in a list are before or next to each others respectively. The &lt;code&gt;X&lt;&#x2F;code&gt;, &lt;code&gt;Y&lt;&#x2F;code&gt; and &lt;code&gt;List&lt;&#x2F;code&gt; arguments expect variables (variable names are capitalized). The &lt;code&gt;fellowship_order&lt;&#x2F;code&gt; uses these predicates to express what is a valid, according to our logic puzzle, order of the members of the Fellowship. The members, such as &lt;code&gt;legolas&lt;&#x2F;code&gt; are atoms (they start with a lower case) and represent these characters in our domain. &lt;&#x2F;p&gt;
&lt;p&gt;The query, &lt;code&gt;fellowship_order(Order).&lt;&#x2F;code&gt; which was helpfully given to us by Chat-GPT, allows us to gather the valid orders according to the puzzle when querying the above knowledge base. &lt;&#x2F;p&gt;
&lt;p&gt;We can test this easily by entering the above Prolog code in the Tau Prolog sandbox. After pasting in the program, we can press &lt;code&gt;consult program&lt;&#x2F;code&gt;, which loads the knowledge base. As the goal that we want to query, we can enter &lt;code&gt;fellowship_order(Order).&lt;&#x2F;code&gt;. Doing this will retrieve &lt;code&gt;Order = [legolas,gimli,frodo]&lt;&#x2F;code&gt;, which is a valid answer to the logic puzzle.&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=lotrprologsandbox.png&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;Consulting the short Prolog example of the logic puzzle.&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Note that &lt;code&gt;Order = [legolas,frodo,gimli]&lt;&#x2F;code&gt; is a valid answer as well. If we would ask the query again in the Tau Prolog sandbox, we will get this answer instead. If we query for a third (or any subsequent) time, we get a &lt;code&gt;false&lt;&#x2F;code&gt;, which is Prolog&#x27;s way of denoting that no answer could be found. This is due to Tau Prolog aiming to list all possible answers one by one given our query in this sandbox.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have gone over a small example, let&#x27;s see if this approach can work with a larger puzzle. While we can ask for the full Prolog code for a larger puzzle, in the version of Chat-GPT used at the time of writing, it had some trouble giving us a full and complete working program with lots of restrictions. Instead we can take the small example and add new constraints to it.&lt;&#x2F;p&gt;
&lt;p&gt;Using this method we can create the following puzzle:&lt;&#x2F;p&gt;
&lt;!-- Aragorn is walking with at least 4 others behind him.
Merry wants to show his bravery to Pippin, so he walks directly in front of him.
Gandalf walks ahead of Aragorn.
Boromir wants to be guided by the ranger, Aragorn, so he walks somewhere behind him.
Boromor also wants to keep an eye out on the ring bearer, Frodo, so he walks directly behind him.
Sam is walking with next to at least another Hobbit (Frodo, Merry or Pippin).
Gimli wants to make sure Legolas does not outshine him, so he walks ahead of him.
Legolas only has at most two others behind him.

If we ask Chat-GPT to give an expanded version of this logic puzzle we end up with the following:

```prolog
% Load necessary library
:- use_module(library(lists)).

% Define the fellowship list and ensure that Aragorn has at least four others behind him
fellowship_order(Order) :-
    Order = [gandalf, _, aragorn, _, _, _, _, _],  % Gandalf walks ahead of Aragorn; Aragorn has at least four behind
    member(boromir, Order),
    member(frodo, Order),
    member(sam, Order),
    member(merry, Order),
    member(pippin, Order),
    member(gimli, Order),
    member(legolas, Order),
    length(Order, 8),  % Total members walking

    % Defining relations based on problem statement
    next_to(merry, pippin, Order),  % Merry walks directly in front of Pippin
    merry_before_pippin(merry, pippin, Order),
    before(gandalf, aragorn, Order),
    after(boromir, aragorn, Order),  % Boromir walks somewhere behind Aragorn
    directly_behind(boromir, frodo, Order),  % Boromir directly behind Frodo
    hobbit_neighbor(sam, Order),  % Sam walks next to at least another Hobbit
    before(gimli, legolas, Order),  % Gimli walks ahead of Legolas
    at_most_two_behind(legolas, Order).  % Legolas has at most two behind him

% Check if X is directly before Y
directly_before(X, Y, [X, Y|_]).
directly_before(X, Y, [_|T]) :-
    directly_before(X, Y, T).

% Check if X is directly behind Y
directly_behind(X, Y, List) :-
    directly_before(Y, X, List).

% Check if X is before Y
before(X, Y, [X|T]) :-
    member(Y, T).
before(X, Y, [_|T]) :-
    before(X, Y, T).

% Check if X is after Y
after(X, Y, List) :-
    before(Y, X, List).

% Merry is directly before Pippin
merry_before_pippin(merry, pippin, [merry, pippin|_]).
merry_before_pippin(merry, pippin, [_|T]) :-
    merry_before_pippin(merry, pippin, T).

% Ensure Sam is next to another hobbit
hobbit_neighbor(sam, List) :-
    next_to(sam, frodo, List);
    next_to(sam, merry, List);
    next_to(sam, pippin, List).

% Check if X is next to Y
next_to(X, Y, [X, Y|_]).
next_to(X, Y, [Y, X|_]).
next_to(X, Y, [_|T]) :-
    next_to(X, Y, T).

% Check if a character has at most two others behind them
at_most_two_behind(X, List) :-
    reverse(List, RevList),
    nth0(Index, RevList, X),
    Index &gt;= 2.

% Example query to find the order
% ?- fellowship_order(Order).
```
 --&gt;
&lt;!-- We can see this structure in the small example above. After loading in the necessary library for lists, it defines the rules for `before`, `next_to` and what it means to be a valid `fellowship_order`. The query, which it helpfully gives as a comment: `% ?- fellowship_order(Order).` can   --&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;% Load necessary library
&lt;&#x2F;span&gt;&lt;span&gt;:- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use_module&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;(lists)).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fellowship_order&lt;&#x2F;span&gt;&lt;span&gt;(Order) :-
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Order &lt;&#x2F;span&gt;&lt;span&gt;= [ _, _, _, _, _, _, _], 
&lt;&#x2F;span&gt;&lt;span&gt;  	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(aragorn, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(frodo, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(sam, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(merry, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(pippin, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(gimli, Order),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(legolas, Order),
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    % Defining relations based &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; problem statement
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;(aragorn, pippin, Order), % Aragorn walks before Pippin.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hobbit_neighbor&lt;&#x2F;span&gt;&lt;span&gt;(frodo, Order),  % Frodo walks next to at least another Hobbit.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hobbit_neighbor&lt;&#x2F;span&gt;&lt;span&gt;(sam, Order),  % Sam walks next to at least another Hobbit.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;(gimli, legolas, Order),  % Gimli walks ahead of Legolas.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(merry, pippin, Order), % Merry walks next to Pippin.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;(frodo, aragorn, Order). % Frodo walks after Aragorn.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;% Check &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;X is before Y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, [X|T]) :-
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;member&lt;&#x2F;span&gt;&lt;span&gt;(Y, T).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, [_|T]) :-
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, T).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;% Check &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;X is after Y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, List) :-
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;before&lt;&#x2F;span&gt;&lt;span&gt;(Y, X, List).
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;% Ensure Sam is next to another hobbit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hobbit_neighbor&lt;&#x2F;span&gt;&lt;span&gt;(X, List) :-
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(X, frodo, List);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(X, sam, List);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(X, merry, List);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(X, pippin, List).
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;% Check &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;X is next to Y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, [X, Y|_]).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, [Y, X|_]).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, [_|T]) :-
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next_to&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, T).
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;% Example query to find the order
&lt;&#x2F;span&gt;&lt;span&gt;% ?- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fellowship_order&lt;&#x2F;span&gt;&lt;span&gt;(Order).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This puzzle has a number of new types of restrictions and more members of the Fellowship represent, but works the same way as the previous one. If we run it in the sandbox we can get an answer such as &lt;code&gt;Order = [aragorn,frodo,sam,merry,pippin,gimli,legolas]&lt;&#x2F;code&gt; being returned. With an LLM we can even reverse the puzzle creation and get a textual description of the restrictions in the puzzle, as well as the puzzle itself. The following is the answer that ChatGPT returns when asked to describe the above puzzle in words:&lt;&#x2F;p&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;The Prolog puzzle presented involves arranging members of the Fellowship from &amp;quot;The Lord of the Rings&amp;quot; in a specific order based on given constraints. Here‚Äôs a step-by-step description:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;objective&quot;&gt;Objective&lt;&#x2F;h4&gt;
&lt;p&gt;You need to determine the walking order of seven characters: Aragorn, Frodo, Sam, Merry, Pippin, Gimli, and Legolas.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;given-constraints&quot;&gt;Given Constraints&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Aragorn walks before Pippin.
&lt;&#x2F;span&gt;&lt;span&gt;    Aragorn must come at some position earlier than Pippin.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Frodo walks next to at least one other Hobbit.
&lt;&#x2F;span&gt;&lt;span&gt;    Frodo must be adjacent to either Sam, Merry, or Pippin.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Sam walks next to at least one other Hobbit.
&lt;&#x2F;span&gt;&lt;span&gt;    Sam must also be adjacent to either Frodo, Merry, or Pippin.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Gimli walks ahead of Legolas.
&lt;&#x2F;span&gt;&lt;span&gt;    Gimli must come at some position earlier than Legolas.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Merry walks next to Pippin.
&lt;&#x2F;span&gt;&lt;span&gt;    Merry and Pippin must be directly adjacent in either order.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Frodo walks after Aragorn.
&lt;&#x2F;span&gt;&lt;span&gt;    Frodo must come at some position later than Aragorn.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;key-definitions&quot;&gt;Key Definitions&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Order:
&lt;&#x2F;span&gt;&lt;span&gt;    A list of seven elements representing the walking order of the Fellowship members.
&lt;&#x2F;span&gt;&lt;span&gt;    Example: [aragorn, frodo, sam, merry, pippin, gimli, legolas].
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;before&#x2F;3:
&lt;&#x2F;span&gt;&lt;span&gt;    A predicate that checks if one character (X) appears before another (Y) in a list (Order).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;after&#x2F;3:
&lt;&#x2F;span&gt;&lt;span&gt;    A predicate that checks if one character (X) appears after another (Y) in a list (Order). It uses the before&#x2F;3 predicate to establish this relation.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;hobbit_neighbor&#x2F;2:
&lt;&#x2F;span&gt;&lt;span&gt;    A predicate that checks if a character is next to at least one Hobbit in a list (Order). Hobbits include Frodo, Sam, Merry, and Pippin.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;next_to&#x2F;3:
&lt;&#x2F;span&gt;&lt;span&gt;    A predicate that checks if two characters are adjacent in a list (Order).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;solution-mechanism&quot;&gt;Solution Mechanism&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;The fellowship_order&#x2F;1 predicate defines the order and enforces all the constraints using the helper predicates.
&lt;&#x2F;span&gt;&lt;span&gt;The list Order is constrained to have exactly the seven members of the Fellowship.
&lt;&#x2F;span&gt;&lt;span&gt;The member&#x2F;2 predicate ensures that all characters are included in the Order.
&lt;&#x2F;span&gt;&lt;span&gt;The constraints (before&#x2F;3, after&#x2F;3, hobbit_neighbor&#x2F;2, next_to&#x2F;3) enforce the relative positions and adjacency as specified.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;query&quot;&gt;Query&lt;&#x2F;h4&gt;
&lt;p&gt;To find the correct order, you can query:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pro&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pro &quot;&gt;&lt;code class=&quot;language-pro&quot; data-lang=&quot;pro&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fellowship_order&lt;&#x2F;span&gt;&lt;span&gt;(Order).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will produce an Order that satisfies all the given constraints.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h4&gt;
&lt;p&gt;This puzzle requires using logical relations to determine the correct sequence of characters while adhering to the given positional constraints. The use of predicates like before&#x2F;3, after&#x2F;3, hobbit_neighbor&#x2F;2, and next_to&#x2F;3 helps in logically deducing the valid walking order of the characters.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Such an approach can give us a very interactive way to evolve our problem description as well as the solution. We can give a text description of new constraints to the LLM, play around with the generated code in the sandbox, and go back to the LLM to refine the descriptions of the problem until we have the right problem statement and the solution. &lt;&#x2F;p&gt;
&lt;p&gt;In this case the back and forth between the Prolog code and the text can help us further refine the puzzle. A helpful hint if one wants to experiment further: increasing the limit parameter that controls a maximum number of inferences can help to run more complex puzzles in the sandbox. Feel free to try it out with the sandbox!&lt;&#x2F;p&gt;
&lt;p&gt;I hope you enjoyed this journey into Prolog from LLMs and back again and will consider using Prolog in such a way during your quest to solve other problems as well!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>AI at Home</title>
        <published>2023-12-16T00:00:00+00:00</published>
        <updated>2023-12-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.newresalhaider.com/post/aiathome/" type="text/html"/>
        <id>https://www.newresalhaider.com/post/aiathome/</id>
        
        <content type="html">&lt;p&gt;Large Language Models (LLMs), such as those that enable Chat-GPT, have been shown to be incredibly capable for language understanding and generation tasks. With the right prompt, they can answer questions, categorize input, rewrite pieces of text, perform sentiment analysis and more. &lt;&#x2F;p&gt;
&lt;p&gt;As good as these tools are, many of them require data to be sent to a remote server and&#x2F;or take some additional costs to run. This is due to the processing power required to use them and the proprietary nature of the models. However there exist models that can be run locally, even on relatively modest hardware, such as some of the &lt;a href=&quot;https:&#x2F;&#x2F;ai.meta.com&#x2F;llama&#x2F;&quot;&gt;LLaMA&lt;&#x2F;a&gt; models from Meta. Such locally runnable models can enable modern AI setups fully running at home, without the need for data being sent to another party. This article is a brief introduction on how to get one these models up and running.&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=aiathome.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;A generated picture of an AI helping at home.&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The easiest solution that I have found for this purpose is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oobabooga&#x2F;text-generation-webui&quot;&gt;text-generation-webui&lt;&#x2F;a&gt; tool. As the name suggests it enables the use of language models by a web based UI and it can do so running only on the local machine. The setup is very straightforward: clone or download the repository, run the start script for your operating system, e.g.: &lt;code&gt;start_wsl.bat&lt;&#x2F;code&gt;for running on WSL, and you are pretty much ready to go.&lt;&#x2F;p&gt;
&lt;p&gt;This tool can use various models, but a nice one to get started is &lt;a href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;TheBloke&#x2F;Llama-2-7B-GGUF&quot;&gt;Llama-2-7B-GGUF model provided by TheBloke&lt;&#x2F;a&gt;, which is a 7 billion parameter LLaMa2 model. After loading it, we can simply start chatting.&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=aiconversation.png&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;A short conversation with the AI model.&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Although this model is on the smaller side it runs very adequately on a 2021 model Asus G14 laptop, and functions well for simple queries and conversations.&lt;&#x2F;p&gt;
&lt;p&gt;There can be a lot of possibilities to explore with such a local setup, especially with larger, more capable models. It also provides an easy way for prototyping, as one can also use an API, that is a local drop-in replacement for the API of OpenAI, to interact with the model. &lt;&#x2F;p&gt;
&lt;p&gt;I hope this article can help you get you started in exploring your AI use cases locally!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
