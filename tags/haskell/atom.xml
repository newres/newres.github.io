<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title> - Haskell</title>
	<link href="https://www.newresalhaider.com/tags/haskell/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://www.newresalhaider.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-07-04T00:00:00+00:00</updated>
	<id>https://www.newresalhaider.com/tags/haskell/atom.xml</id>
	<entry xml:lang="en">
		<title>To Curry in League of Legends</title>
		<published>2020-07-04T00:00:00+00:00</published>
		<updated>2020-07-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://www.newresalhaider.com/post/curry-lol/" type="text/html"/>
		<id>https://www.newresalhaider.com/post/curry-lol/</id>
		<content type="html">&lt;p&gt;One of the most well-known and popular online multi-player games is &lt;a href=&quot;https:&#x2F;&#x2F;euw.leagueoflegends.com&#x2F;en-gb&#x2F;&quot;&gt;League of Legends&lt;&#x2F;a&gt;. In this game two teams of five players compete against other. Within the game each player controls a champion that they can use to defeat the enemy team by destroying their base. There are many aspects required to winning a game of League of Legends: good in-game strategy, good control of champions but also selecting a good composition of 5 champions, out of more than a hundred, that fits the needs of the players and play-styles.&lt;&#x2F;p&gt;
&lt;p&gt;One of the lesser-known, but nonetheless very innovative, programming languages is &lt;a href=&quot;https:&#x2F;&#x2F;www-ps.informatik.uni-kiel.de&#x2F;currywiki&#x2F;&quot;&gt;Curry&lt;&#x2F;a&gt;. What makes this language so unique that it is a functional logic language. This means that it combines features of functional programming, composing a program through functions, and logic programming, defining the program as predicates of a logic system and searching for answers. &lt;&#x2F;p&gt;
&lt;p&gt;This article aims to give an introduction to the Curry language by creating a small system in it that matches and recommends League Of Legends champions based on player preferences.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to code along with this article, one can use &lt;a href=&quot;https:&#x2F;&#x2F;www-ps.informatik.uni-kiel.de&#x2F;smap&#x2F;smap.cgi?new&#x2F;curry&quot;&gt;SMAP&lt;&#x2F;a&gt; to evaluate Curry code online, aside from installing a Curry language implementation such as &lt;a href=&quot;https:&#x2F;&#x2F;www.informatik.uni-kiel.de&#x2F;%7Epakcs&#x2F;&quot;&gt;PACKS&lt;&#x2F;a&gt; locally. The code described in this article can be found in a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newres&#x2F;curry-league&quot;&gt;source repository&lt;&#x2F;a&gt; in its entirety as well.&lt;&#x2F;p&gt;
&lt;p&gt;In order to build such a recommendation system, the first thing we need to do is figure out a way to represent both the player preferences and the League of Legends champions in Curry.&lt;&#x2F;p&gt;
&lt;p&gt;To start off, let&#x27;s define the aspects of a champion in Curry as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span&gt;Main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tag &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Marksman &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Assassin &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Mage &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Support
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                                       
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;defense &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;magic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;difficulty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Tag&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lets just go over the above code step-by-step. &lt;&#x2F;p&gt;
&lt;p&gt;The first line is the module declaration, which is essentially a grouping of related code together. We will define all elements required for our champion recommendation program in this Main module.&lt;&#x2F;p&gt;
&lt;p&gt;Next we define the data types for our representation of Champion Tags and Champions. Curry is a statically typed language, meaning you can define the structure of the data as types, and you can check these types at compile time before the actual program is run. For example, it only allows the following Tags to be used for the Champions: Fighter, Tank, Marksman, Assassin, Mage, Support. Similarly, a Champion is a record of very specific keys and types of values. For example it has a field for &lt;code&gt;name&lt;&#x2F;code&gt; that must be a string of characters, a field for &lt;code&gt;attack&lt;&#x2F;code&gt; that must be an integer number and a field for &lt;code&gt;tags&lt;&#x2F;code&gt; which must be a list of Tags that we previously defined.&lt;&#x2F;p&gt;
&lt;p&gt;These types allow us to define various champions avaiable in League of Legends. For example, the champion Aatrox can be defined as: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;aatrox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;aatrox = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Aatrox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                       attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                       }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that this is a correct champion as it fulfills every criteria we gave to the type of Champion. If we would define this champion in the wrong way, such as: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;aatrox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;aatrox = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Aatrox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                       attack = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;high&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                       defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                       }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the compiler of Curry would give us an error, &amp;quot;Type error in record construction&amp;quot;, along with some additional information that the attack field has a value that does not match the type.&lt;&#x2F;p&gt;
&lt;p&gt;In this definition we explicitly denoted that Aatrox is of the type champion using the line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;aatrox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not a strict requirement. Curry can infer the type simply from the constructor of the record &lt;code&gt;Champion&lt;&#x2F;code&gt;. Curry can perform type inference even in many other more complex cases, but for clarity we will give the types of records and functions whenever we can.&lt;&#x2F;p&gt;
&lt;p&gt;The final part of this definition, is the portion:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without going into too much detail, these makes instances of Champions, and Tags, easy to compare and print as a string.&lt;&#x2F;p&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2020&#x2F;curry-lol&#x2F;Aatrox.jpg&quot; title=&quot;Aatrox, a champion in League of Legends Copyright Riot Games&quot; &gt;}} --&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=Aatrox.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;Aatrox, a champion in League of Legends Copyright Riot Games&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The above code should be very familiar to &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;Haskell&lt;&#x2F;a&gt; programmers! The syntax, the type system and many other aspects of Curry are heavily influenced by Haskell. Even the naming of the two languages have the same origin: they are both named after the logician &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Haskell_Curry&quot;&gt;Haskell Curry&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we got the basics out of the way let us define a lot more champions than just Aatrox. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;aatrox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;aatrox = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Aatrox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                       attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                       }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;darius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;darius = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darius&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                   attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fiora &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;fiora = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Fiora&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Assassin&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                 }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;gnar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;gnar = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gnar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                 attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                 defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                 magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                 difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                 tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                 }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;irelia &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;irelia = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Irelia&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Assassin&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;karma &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;karma = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Karma&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Mage&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Support&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;maokai &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;maokai = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Maokai&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                   attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Mage&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;neeko &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;neeko = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Neeko&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Mage&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Support&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sylas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion
&lt;&#x2F;span&gt;&lt;span&gt;sylas = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sylas&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Mage&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Assassin&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;vayne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Champion 
&lt;&#x2F;span&gt;&lt;span&gt;vayne = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Vayne&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Marksman&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Assassin&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;champions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;champions = [aatrox,
&lt;&#x2F;span&gt;&lt;span&gt;             darius,
&lt;&#x2F;span&gt;&lt;span&gt;             fiora,
&lt;&#x2F;span&gt;&lt;span&gt;             gnar,
&lt;&#x2F;span&gt;&lt;span&gt;             irelia,
&lt;&#x2F;span&gt;&lt;span&gt;             karma,
&lt;&#x2F;span&gt;&lt;span&gt;             maokai,
&lt;&#x2F;span&gt;&lt;span&gt;             neeko,
&lt;&#x2F;span&gt;&lt;span&gt;             sylas,
&lt;&#x2F;span&gt;&lt;span&gt;             vayne
&lt;&#x2F;span&gt;&lt;span&gt;            ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above code defines a total of 10 different Champions that exist in League of Legends, whose data values are derived from Riot games &lt;a href=&quot;https:&#x2F;&#x2F;developer.riotgames.com&#x2F;docs&#x2F;lol#data-dragon_champions&quot;&gt;Data Dragon API&lt;&#x2F;a&gt;. For easy access, we define a list of champions as the aptly named &lt;code&gt;champions&lt;&#x2F;code&gt;. Note that in Curry a list is denoted by elements between &lt;code&gt;[]&lt;&#x2F;code&gt;. The type for a list of elements is denoted by using these bracket in front of the type, such as &lt;code&gt;[]Tag&lt;&#x2F;code&gt;, which denotes the type of a list of Tags.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have the champion definitions out of the way, we also want to define player preferences that we aim to match champions against. Here our preferences consists of a summoner name, identifying the player, minimum requirements for the champion&#x27;s attack, defense and magic values, a maximum difficulty rating, as well as tags on type of champions the player prefers.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Preference &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Preference&lt;&#x2F;span&gt;&lt;span&gt; {summonerName :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;minAttack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;minDefense &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;minMagic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;maxDifficulty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;prefTags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Tag&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this Preference type we define two player preferences, one for Alice and one for Bob, as well as a collection for both of them.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;alicePref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Preference
&lt;&#x2F;span&gt;&lt;span&gt;alicePref = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Preference&lt;&#x2F;span&gt;&lt;span&gt; {  summonerName = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                          minAttack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                          minDefense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                          minMagic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                          maxDifficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                          prefTags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Mage&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                         }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;bobPref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Preference
&lt;&#x2F;span&gt;&lt;span&gt;bobPref = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Preference&lt;&#x2F;span&gt;&lt;span&gt; {  summonerName = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                        minAttack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        minDefense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        minMagic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        maxDifficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        prefTags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Support&lt;&#x2F;span&gt;&lt;span&gt;]}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;preferences &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Preference&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;preferences = [ alicePref,
&lt;&#x2F;span&gt;&lt;span&gt;                bobPref
&lt;&#x2F;span&gt;&lt;span&gt;              ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have now defined both the champions and the player preferences and we can move towards creating the functionality to match them together. But first a bit of introduction, or a refresher depending on the readers background, to functional programming. &lt;&#x2F;p&gt;
&lt;p&gt;As mentioned at the start of this article, Curry is a language that supports both functional and logical programming. Functional programming allows us to express the program we want to write as a composition of functions.&lt;&#x2F;p&gt;
&lt;p&gt;To use an example, suppose we want to write a program that given a list of champions, returns only those champion that have an attack of more than 5. In order to do this we can first write a function that given a champion returns true if it has an attack more than 5 and returns false if this is not the case. Then we can use this function as filter inside another function, that only returns members of a list of champions that have more than 5 attack.&lt;&#x2F;p&gt;
&lt;p&gt;To put this together, such a function would look as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;highAttackChamps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;highAttackChamps champList = filter (\ champion -&amp;gt; attack champion &amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) champList
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a couple of things to note here. &lt;&#x2F;p&gt;
&lt;p&gt;First is that the function that &amp;quot;returns true only if the attack of a champion is greater than 5&amp;quot; has no name. Such anonymous functions, also known as lambda expressions, can be defined using a form starting with a backslash (\) followed by the parameter names of the function, followed by an arrow (-&amp;gt;) and the expressions that this function should execute. In this case this expression first gets the attack of the champion and compares it, to give the right result. Anonymous functions are very convenient for expressions that we do not aim to reuse somewhere else.&lt;&#x2F;p&gt;
&lt;p&gt;The second thing to note is the function composition that allows the filtering. The &lt;code&gt;filter&lt;&#x2F;code&gt; function is a predefined function that is imported by default, as a part of a group of functions such as these called a Prelude. As mentioned before this takes a function as a parameter that returns a Bool (True or False), as well as a list, and returns only those members of the list for which the function returned true. Using a function as an argument makes the &lt;code&gt;filter&lt;&#x2F;code&gt; function very versatile. If we, for example wanted to filter based on champion defense, we could have just replaced function used as an argument. Such a composition using functions is one of the core elements of what makes functional programming so effective.&lt;&#x2F;p&gt;
&lt;p&gt;The final thing to note is how the &lt;code&gt;highAttackChamps&lt;&#x2F;code&gt; is given a type. The type declaration &lt;code&gt;highAttackChamps :: [Champion] -&amp;gt; [Champion]&lt;&#x2F;code&gt; shows that this function takes a list of champions and returns a list of champions, where the arrow &lt;code&gt;-&amp;gt;&lt;&#x2F;code&gt; functions as a separator between the type of the parameter(s) and&#x2F;or the type of returned value.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we got over the basics of functional programming lets start to put this knowledge to good use by writing a number of functions that helps us match the Preferences with the Champions. These functions are designed to match a single criteria within a Preference with the value of a Champion. If this match succeeds that the function returns True, if it fails it returns a False. We have a function to match based on attack, defense, magic and difficulty. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;matchChampionAttack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Preference -&amp;gt; Champion -&amp;gt; Bool
&lt;&#x2F;span&gt;&lt;span&gt;matchChampionAttack pref champ = (minAttack pref) &amp;lt;= (attack champ) 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;matchChampionDefense &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Preference -&amp;gt; Champion -&amp;gt; Bool
&lt;&#x2F;span&gt;&lt;span&gt;matchChampionDefense pref champ = (minDefense pref) &amp;lt;= (defense champ) 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;matchChampionMagic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Preference -&amp;gt; Champion -&amp;gt; Bool
&lt;&#x2F;span&gt;&lt;span&gt;matchChampionMagic pref champ = (minMagic pref) &amp;lt;= (magic champ) 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;matchChampionDifficulty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Preference -&amp;gt; Champion -&amp;gt; Bool
&lt;&#x2F;span&gt;&lt;span&gt;matchChampionDifficulty pref champ = (maxDifficulty pref) &amp;gt;= (difficulty champ) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the type definition now have three elements separated by an arrow (-&amp;gt;), as these functions have two parameters, a Preference and a Champion, and return a Bool (the type for True or False).&lt;&#x2F;p&gt;
&lt;p&gt;For matching the preferences, we are going to explore some of the logic programming features of Curry. In logic programming the program can be defined as a set of facts, rules and (logic) variables, where the underlying logic system can search for a suitable solution given the criteria.&lt;&#x2F;p&gt;
&lt;p&gt;Give given an example, suppose we are looking for Tag that is both part of the preferred tags of the Preferences as well as part of the tags of the Champions. We can state this problem exactly like this in Curry as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;matchChampionTag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Preference -&amp;gt; Champion -&amp;gt; Bool
&lt;&#x2F;span&gt;&lt;span&gt;matchChampionTag pref champ = (elem tag (prefTags pref) &amp;amp;&amp;amp; elem tag (tags champ)) =:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; tag free
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To go over the elements in this code &lt;code&gt;(elem tag (prefTags pref) &amp;amp;&amp;amp; elem tag (tags champ))&lt;&#x2F;code&gt; express that &lt;code&gt;tag&lt;&#x2F;code&gt; has to be an element of both the &lt;code&gt;prefTags&lt;&#x2F;code&gt; of the a given preference and &lt;code&gt;tags&lt;&#x2F;code&gt; of the given champion. Unlike with our purely functional code above, we do not give the value of &lt;code&gt;tag&lt;&#x2F;code&gt; as a parameter. Instead we say that this variable is a free variable and let Curry find the values of Tag which makes the above constraint hold True  (i.e. the &lt;code&gt;=:= True where tag free&lt;&#x2F;code&gt; portion of the function).&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have all the functions for matching individual elements (i.e.: attack, defense, magic, difficulty and tags) of champions to profiles, we can create combined functions such as &lt;code&gt;matchChampionAny&lt;&#x2F;code&gt; that holds true if any of the elements match and &lt;code&gt;matchChampionAll&lt;&#x2F;code&gt; for which all elements need to match.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;matchChampionAny &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Preference -&amp;gt; Champion -&amp;gt; Bool
&lt;&#x2F;span&gt;&lt;span&gt;matchChampionAny pref champ =  matchChampionAttack pref champ ||
&lt;&#x2F;span&gt;&lt;span&gt;                               matchChampionDefense pref champ ||
&lt;&#x2F;span&gt;&lt;span&gt;                               matchChampionMagic pref champ ||
&lt;&#x2F;span&gt;&lt;span&gt;                               matchChampionDifficulty pref champ ||
&lt;&#x2F;span&gt;&lt;span&gt;                               matchChampionTag pref champ
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;matchChampionAll &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Preference -&amp;gt; Champion -&amp;gt; Bool
&lt;&#x2F;span&gt;&lt;span&gt;matchChampionAll pref champ =  matchChampionAttack pref champ &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                                 matchChampionDefense pref champ &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                                 matchChampionMagic pref champ &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                                 matchChampionDifficulty pref champ &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                                 matchChampionTag pref champ
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of the coolest features of this language, which we can see in the above definition, is the way logic programming elements can mix with functional elements. In both &lt;code&gt;matchChampionAny&lt;&#x2F;code&gt; and &lt;code&gt;matchChampionAll&lt;&#x2F;code&gt;  we use functions that make use of functional programming, as well as logic programming, seamlessly. &lt;&#x2F;p&gt;
&lt;p&gt;Once we got our functions for matching we can use these to match, we finally have all the ingredients to create recommendations. We are going to create two recommendation functions: one for matching based on &lt;code&gt;matchChampionAny&lt;&#x2F;code&gt; which is a &amp;quot;weak&amp;quot; criteria as any there are lot of opportunities to match and one based on &lt;code&gt;matchChampionAll&lt;&#x2F;code&gt; which is a lot &amp;quot;stronger&amp;quot; as all stats of a champion has to match with the preferences.&lt;&#x2F;p&gt;
&lt;p&gt;The functions for these is given as follows: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;recommendWeak :: Preference -&amp;gt; [Champion] -&amp;gt; [String]
&lt;&#x2F;span&gt;&lt;span&gt;recommendWeak preference champList = map (\ champion -&amp;gt; name champion) (filter (\ champion -&amp;gt; matchChampionAny preference champion ) champList)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;recommendStrong :: Preference -&amp;gt; [Champion] -&amp;gt; [String]
&lt;&#x2F;span&gt;&lt;span&gt;recommendStrong preference champList = map (\champion -&amp;gt; name champion) (filter (\ champion -&amp;gt; matchChampionAll preference champion ) champList)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The constructs in here should look familiar with one exception: the use of &lt;code&gt;map (\champion -&amp;gt; name champion)&lt;&#x2F;code&gt;. The &lt;code&gt;map&lt;&#x2F;code&gt; function is similar to &lt;code&gt;filter&lt;&#x2F;code&gt; in takes a function for a parameter as well as a list. Instead of filtering, in instead applies that function to all members of that list. The anonymous function used takes a champion and returns only the name value of that champion. This allows for the matching function to return not a list of champions, but a list of strings i.e.: &lt;code&gt;[String]&lt;&#x2F;code&gt; that are the names of the champions. This makes the return value much less verbose, as we can identify champions by name. &lt;&#x2F;p&gt;
&lt;p&gt;Finally, in order to show off the code detailed here with, we put together some examples of using the all the functions we defined. We then print the answers out, line by line for each of these examples. The main function, with the return type IO (), allows us to not to return a specific value but print the values out, to the REPL or the command-line, depending on how we use our code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;example1 = highAttackChamps champions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Bool
&lt;&#x2F;span&gt;&lt;span&gt;example2 = matchChampionAttack alicePref aatrox
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Bool
&lt;&#x2F;span&gt;&lt;span&gt;example3 = matchChampionDifficulty bobPref vayne 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Bool
&lt;&#x2F;span&gt;&lt;span&gt;example4 =  matchChampionTag alicePref karma
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Bool
&lt;&#x2F;span&gt;&lt;span&gt;example5 =  matchChampionAny alicePref neeko
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: Bool
&lt;&#x2F;span&gt;&lt;span&gt;example6 =  matchChampionAll bobPref gnar
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;example7 =  recommendWeak alicePref champions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;example8 =  recommendWeak bobPref champions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example9 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;example9 =  recommendStrong alicePref champions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;example10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;example10 =  recommendStrong bobPref champions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;:: IO &lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;main = putStrLn (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 1, champions with more than 5 attack:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example1) ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 2, matching Aatrox with Alice&amp;#39;s preferences based on attack:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example2) ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 3, matching Vayne with Bob&amp;#39;s preferences based on difficulty:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example3) ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 4, matching Karma with Alice&amp;#39;s preferences based on tag(s):&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example4) ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 5, matching Neeko with Alice&amp;#39;s preferences based on any matching criteria:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example5) ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 6, matching Gnar with Bob&amp;#39;s preferences based on all matching criteria:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example6) ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 7, recommendation based on a weak criteria for Alice:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example7) ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 8, recommendation based on a weak criteria for Bob:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example8) ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 9, recommendation based on a strong criteria for Alice:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example9) ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Example 10, recommendation based on a strong criteria for Bob:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ++
&lt;&#x2F;span&gt;&lt;span&gt;                 (show example10))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This results in the following being printed out:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 1&lt;&#x2F;span&gt;&lt;span&gt;, champions with more than &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt; attack:
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Aatrox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;]},&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darius&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;]},&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Fiora&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Assassin&lt;&#x2F;span&gt;&lt;span&gt;]},&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gnar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Tank&lt;&#x2F;span&gt;&lt;span&gt;]},&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Irelia&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Fighter&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Assassin&lt;&#x2F;span&gt;&lt;span&gt;]},&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Champion&lt;&#x2F;span&gt;&lt;span&gt; {name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Vayne&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, attack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, defense = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, magic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, difficulty = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, tags = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Marksman&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Assassin&lt;&#x2F;span&gt;&lt;span&gt;]}]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 2&lt;&#x2F;span&gt;&lt;span&gt;, matching &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Aatrox&lt;&#x2F;span&gt;&lt;span&gt; with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s preferences based on attack:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 3&lt;&#x2F;span&gt;&lt;span&gt;, matching &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Vayne&lt;&#x2F;span&gt;&lt;span&gt; with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s preferences based on difficulty:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 4&lt;&#x2F;span&gt;&lt;span&gt;, matching &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Karma&lt;&#x2F;span&gt;&lt;span&gt; with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s preferences based on tag(s):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 5&lt;&#x2F;span&gt;&lt;span&gt;, matching &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Neeko&lt;&#x2F;span&gt;&lt;span&gt; with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s preferences based on any matching criteria:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 6&lt;&#x2F;span&gt;&lt;span&gt;, matching &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Gnar&lt;&#x2F;span&gt;&lt;span&gt; with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s preferences based on all matching criteria:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 7&lt;&#x2F;span&gt;&lt;span&gt;, recommendation based on a weak criteria for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Aatrox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darius&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Fiora&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gnar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Irelia&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Karma&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Maokai&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Neeko&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sylas&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Vayne&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 8&lt;&#x2F;span&gt;&lt;span&gt;, recommendation based on a weak criteria for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Aatrox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Darius&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Fiora&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gnar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Irelia&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Karma&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Maokai&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Neeko&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sylas&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Vayne&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 9&lt;&#x2F;span&gt;&lt;span&gt;, recommendation based on a strong criteria for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Maokai&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Example 10&lt;&#x2F;span&gt;&lt;span&gt;, recommendation based on a strong criteria for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;[]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hopefully the result nothing is too surprising and it matches all expectations. The result also verifies some of our assumptions: the weak criteria matches everything in this case, but a strong criteria has some nice results: Maokai is well suited for Alice, and Bob probably needs to widen his criteria, given the above 10 champions. &lt;&#x2F;p&gt;
&lt;p&gt;There are many ways we could proceed from this point on. As one could see from the examples the recommendation based on a weak criteria is quite weak, as anything matches, while a strong criteria can be too restrictive at times. Coming up with the different types of matching functions, could be a next step, if one wants to expand upon this small application. With multiple matching functions one can also write a function that takes a matching function as a parameter in order to avoid writing duplicate code for each recommendation function. &lt;&#x2F;p&gt;
&lt;p&gt;Hopefully this article has given you a bit of an intro to the Curry language and why it is so interesting. There exists a number of options for using functional and logic programming separately but this is one of the few languages that aims to combine both. If you wish to explore either paradigms further I wish you the best of luck to curry on with your endeavors. &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Art of Choosing a Programming Language</title>
		<published>2018-03-18T00:00:00+00:00</published>
		<updated>2018-03-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://www.newresalhaider.com/post/art-of-choosing-language/" type="text/html"/>
		<id>https://www.newresalhaider.com/post/art-of-choosing-language/</id>
		<content type="html">&lt;p&gt;Programmers, like professionals in other fields, are passionate about their tools. One of the main elements in the toolbox of coders are programming languages. They allow their users to express solutions through code to tackle a large variety of problems in many domains. &lt;&#x2F;p&gt;
&lt;p&gt;Programming is also an art, as described in the article by Donald Knuth titled &lt;a href=&quot;http:&#x2F;&#x2F;www.paulgraham.com&#x2F;knuth.html&quot;&gt;Computer Programming as an Art&lt;&#x2F;a&gt; and in certain aspects of programming languages can be seen as art styles.&lt;&#x2F;p&gt;
&lt;p&gt;As can be expected with many things that people are passionate about, whether viewed as a tool or an art style, coders can bond or argue about programming languages. Like philosophers of old, these discussions can go quite into depth, but to the outsider the arguments made or the sentiments behind them can be quite opaque. &lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=schoolofathens.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;If programming languages existed back then, I am sure they would be a hotly argued topic. School of Athens by Raphael&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2018&#x2F;art-of-choosing-language&#x2F;schoolofathens.jpg&quot; title=&quot;If programming languages existed back then, I am sure they would be a hotly argued topic.&quot; caption=&quot;School of Athens by Raphael&quot;&gt;}} --&gt;
&lt;p&gt;Here I hope to shed some light to the casual observer on what makes programmers passionate about these languages and why some prefer one over the other. Such analysis can be quite subjective, and very much dependent on the writers experiences and preferences, but I will try my best to give an impartial overview.&lt;&#x2F;p&gt;
&lt;p&gt;In theory many general purpose programming languages are capable of doing the same things. The most commonly used programming languages are Turing complete, meaning that they can all simulate the workings of any Turing machine. Without getting into the full description of what a Turing machine is, for the reader unfamiliar with the concept, this means that any of the languages can express programs for similar tasks.&lt;&#x2F;p&gt;
&lt;p&gt;There are thousands of programming languages. Some older, and going back to the 50s, 60s and 70s and with considerable use still. Others have been released as recently as the last 10 years, and have gained considerable following. Given as I have mentioned that theoretically all these languages can do the same things, one could wonder why new languages are designed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;history&quot;&gt;History&lt;&#x2F;h2&gt;
&lt;p&gt;Historically, the original computers were instructed by a pure machine language, for example 0s and 1s. Writing programs this way can be tedious and error prone, and the results code can be very difficult to read. This is one of reasons why assembly languages were created. These are languages that are still very much tied into the instruction set of a particular machine, but in a more human readable form, where symbolic names are given for machine instructions. These would be then translated to the pure machine language, to instruct the machine.&lt;&#x2F;p&gt;
&lt;p&gt;While reading and writing programs becomes easier this way, using assembly languages still has disadvantages. First, these languages are still very much tied to the hardware. Different instruction architectures can mean that a program for the same goal would have to be written differently for each architecture. Second, for many the instructions that one has to write this way are still very low level. The argument is made that with a better set of abstractions over assembly, programs can be written in a better way. A program written with such abstractions could be translated, compiled, to the required machine code specific for the required architecture.&lt;&#x2F;p&gt;
&lt;p&gt;The question of which abstractions need to be utilized is at the heart of why there are so many different programming languages. People have different ideas on what these abstractions might be, what the benefits and drawbacks of applying them are. This is at the heart of why people design and use newer programming languages. In the following sections we go through some of the aspects on these abstractions.&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=pyramids.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;Much like with ancients wonders of next to a modern city, with programming languages old also gives rise to the new, and often co-exists with it. The Giza Pyramids © Robbster1983&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2018&#x2F;art-of-choosing-language&#x2F;pyramids.jpg&quot; title=&quot;Much like with ancients wonders of next to a modern city, with programming languages old also gives rise to the new, and often co-exists with it .&quot; caption=&quot;The Giza Pyramids © Robbster1983&quot;&gt;}} --&gt;
&lt;h2 id=&quot;paradigms-and-style&quot;&gt;Paradigms and Style&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned before, there are different opinions on how programs could be constructed. There are various subjects about on which people have opinions about: how the code is organized and how it is executed, among other elements. This is very much similar to how art styles function. For example the same subject can be painted in two differing styles.&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=last-supper-da-vinci.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;The Last Supper (Leonardo da Vinci) one of the most famous Renaissance style paintings.&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2018&#x2F;art-of-choosing-language&#x2F;last-supper-da-vinci.jpg&quot; title=&quot;The Last Supper (Leonardo da Vinci) one of the most famous Renaissance style paintings.&quot; &gt;}} --&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=last-supper-tintoretto.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;The Last Supper (Tintoretto) depicts the same subject but in a Mannerist, proto-Baroque style.&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- {{&lt; figure src=&quot;&#x2F;img&#x2F;post&#x2F;2018&#x2F;art-of-choosing-language&#x2F;last-supper-tintoretto.jpg&quot; title=&quot;The Last Supper (Tintoretto) depicts the same subject but in a Mannerist, proto-Baroque style.&quot; &gt;}} --&gt;
&lt;p&gt;Programming languages can be be classified on the different styles, &lt;em&gt;programming paradigms&lt;&#x2F;em&gt; based on the common elements in the approaches.  Some paradigms include:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;imperative&quot;&gt;Imperative&lt;&#x2F;h3&gt;
&lt;p&gt;Imperative code can be seen as a set of commands for the computer to perform. This type of paradigm matches very strongly with how computer hardware is working, as nearly all computer hardware is designed the execute machine language, which is in itself is written in imperative style. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;procedural&quot;&gt;Procedural&lt;&#x2F;h3&gt;
&lt;p&gt;One of the ways one can structure a program is to group together a series of commands. These groups, &lt;em&gt;procedures&lt;&#x2F;em&gt;, can then be called, used or reused as a single entity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;object-oriented&quot;&gt;Object-Oriented&lt;&#x2F;h3&gt;
&lt;p&gt;Object oriented code uses the notion of &lt;em&gt;objects&lt;&#x2F;em&gt; to organize code. An object is an encapsulation of related state and behavior. For example, consider a software that needs to represent a vehicle. The elements of the state that describe the object, such as &lt;em&gt;colour&lt;&#x2F;em&gt; and &lt;em&gt;make&lt;&#x2F;em&gt;, are called attributes.  Various functionality related to the object, such as calculating the price of the car, are called methods. These concepts allow reuse, as the objects for a car and a motorcycle can share functionality. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;declarative&quot;&gt;Declarative&lt;&#x2F;h3&gt;
&lt;p&gt;In declarative programming, one describes, or more aptly declares what the problem is as opposed to detailing the steps on how to solve it. This contrasts with imperative programming, where one gives the instructions on how to solve it directly. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;functional&quot;&gt;Functional&lt;&#x2F;h3&gt;
&lt;p&gt;Functional programming is one form of declarative programming where programs are constructed using &lt;em&gt;functions&lt;&#x2F;em&gt;, which are analogous and inspired by to mathematical functions. The intention is that these functions are ideally side effect free: their output is dependent solely on their input. This can make code easier to understand and allows for easier use of code written this way. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;logic&quot;&gt;Logic&lt;&#x2F;h3&gt;
&lt;p&gt;The logic paradigm is based around expressing code as a set of logical axioms. These axioms can then be used as a from of knowledge base to derive new knowledge and query. The programs themselves then can be posed as a query in this system. For example, if the knowledge is defined with the axioms &amp;quot;Tweety is a bird&amp;quot; and &amp;quot;Birds are animals&amp;quot;, the system should be able to answer the queries: &amp;quot;Is Tweety and animal?&amp;quot;. &lt;&#x2F;p&gt;
&lt;p&gt;A language can focus on supporting a particular paradigm heavily or have a strong preference for it. For example &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;Haskell&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;clojure.org&#x2F;&quot;&gt;Clojure&lt;&#x2F;a&gt; lean quite heavily on the functional paradigm, while &lt;a href=&quot;http:&#x2F;&#x2F;www.swi-prolog.org&#x2F;&quot;&gt;Prolog&lt;&#x2F;a&gt; is one of the main logic programming languages. Others, provide an explicit merge of various methodologies, such as &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-lang.org&#x2F;&quot;&gt;Scala&lt;&#x2F;a&gt; that combines elements of object orientation and functional programming.&lt;&#x2F;p&gt;
&lt;p&gt;Preference for a particular language can go beyond the programming paradigms used. Syntax, the structure of how code is written, can matter quite a bit for person&#x27;s view on a particular language. For example &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt; uses indentation for managing the control flow of the code, as opposed to symbols in other languages.&lt;&#x2F;p&gt;
&lt;p&gt;Such preference can go even beyond the actual code itself to the tools one uses to write. While any text editor for editing text can often suffice, people can have differing expectations with regards to integrated development environments (IDEs) or other tools to edit and analyze the code. The lack or existence of specific tooling can also be a factor when deciding between languages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;available-code-and-libraries&quot;&gt;Available Code and Libraries&lt;&#x2F;h2&gt;
&lt;p&gt;Most coding is done with a particular purpose in mind, and it is rarely the case that the programmer can build everything from the ground up for such a task. In order to build interesting programs, one has to utilize existing knowledge, much like someone would utilize knowledge in a library to come to new insights.&lt;&#x2F;p&gt;
&lt;figure class=centeredfig&gt;
    &lt;img src=bibliotheca-alexandrina.jpg&gt;
    
    &lt;figcaption&gt;
        
        &lt;h4&gt;The Bibliotheca Alexandrina. Photo © Carsten Whimster licensed under CC BY 3.0 https:&amp;#x2F;&amp;#x2F;creativecommons.org&amp;#x2F;licenses&amp;#x2F;by&amp;#x2F;3.0&amp;#x2F;&lt;&#x2F;h4&gt;
        
        
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- &lt;figure&gt;
  &lt;img src=&quot;bibliotheca-alexandrina.jpg&quot;  &#x2F;&gt;
  &lt;figcaption&gt;
      &lt;h4&gt;The Bibliotheca Alexandrina. Photo © Carsten Whimster licensed under &lt;a href =&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by&#x2F;3.0&#x2F;&quot;&gt; CC BY 3.0 &lt;&#x2F;a&gt;.&lt;&#x2F;h4&gt;
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt; --&gt;
&lt;p&gt;Existing code can be used as a foundation from which the program can be built. Roughly speaking existing code comes in three main forms. It is either being part of the language (often called the standard library of the language), some external libraries extending the language for a particular purpose, or an existing code base of the application that one can improve upon.&lt;&#x2F;p&gt;
&lt;p&gt;The standard library contains various functionality included with the language itself. For example ways of manipulating files, various connection protocols, support for certain file formats, etc. Of course it is very much helpful if particular support for a certain feature that aims to use is already available with the language itself. This means less code to write and connect. On the other hand there is also some tension with regards to including too many features in the standard library, especially if certain parts of it become outdated, which enlarges the language and makes it more unwieldy. &lt;&#x2F;p&gt;
&lt;p&gt;The external libraries that one can use in a language can also influence the choice of a language. Certain languages have a lot of library support for specific tasks. For example &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt; has a large and active following in the Data Science community. Other languages have a lot of support for many different tasks simply due their age and user base such as &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt;. By using libraries one does not need to implement certain features from scratch but can reuse existing work and focus on their specific problem at hand.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, not all development starts from scratch, often one has to make additions or improvement to an existing program, in which case the choice of the language has already been made. While a rewrite of the code can often be tempting, linking between two code programming languages is not always trivial. It is often a good idea to continue with an existing language.&lt;&#x2F;p&gt;
&lt;p&gt;There are some exceptions to this as some languages have been designed with the ground up to inter-operate with other languages. A good example of this is &lt;a href=&quot;https:&#x2F;&#x2F;clojure.org&#x2F;&quot;&gt;Clojure&lt;&#x2F;a&gt; has great interop with &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt; and&#x2F;or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;JavaScript&quot;&gt;JavaScript&lt;&#x2F;a&gt;. This allows it to leverage existing libraries already written, and makes it much more attractive to use. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;existing-knowledge&quot;&gt;Existing Knowledge&lt;&#x2F;h2&gt;
&lt;p&gt;Writing code is rarely trivial, and neither is learning new programming languages. Although previous experience helps, especially when dealing with languages with known paradigms, due to slight or large differences it can take a while to get used to the new language and libraries. With constantly looming deadlines and pressure to deliver, it can make sense to minimize the work that needs to be done. It is perfectly valid to work with a language that one already knows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;curiosity&quot;&gt;Curiosity&lt;&#x2F;h2&gt;
&lt;p&gt;On the other hand learning a new language, especially in a new paradigm or other innovative features, can be quite interesting. It not only allows for work on existing code written in the new language but it also gives insights in how to program which is beneficial as a programmer in general no matter what language he is using.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;speed&quot;&gt;Speed&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned earlier, commonly used programming languages are abstractions over machine code that can do more of less the same thing computationally. What abstractions are used however can influence the speed of executing the program, as well as the time of translating the code in the programming language to machine code. &lt;&#x2F;p&gt;
&lt;p&gt;A common abstraction that can influence the speed of executing the program is how memory is managed. During the running of a program certain information needs to be stored. A way to do this is to allocate space in the computers memory, keep it around while needed and remove it afterwards. This latter portion, can be quite difficult to manage manually, as if one does it prematurely the program might crash or have other bugs. Not removing it would fill the memory with garbage, which makes the program use up more and more memory till it crashes.&lt;&#x2F;p&gt;
&lt;p&gt;A solution to these problems is automatic garbage collection: a way for the computer to automatically manage and clean up memory. While this is a good solution in many cases, this process comes with an overhead, and can be unpredictable when the time and resource consuming cleanup happens. In most cases this overhead is trivial to pay for eliminating a whole suite of potential bugs. However in certain scenarios, such as real-time high performance games, it could be too much to pay.&lt;&#x2F;p&gt;
&lt;p&gt;The other issue of speed, translating the code from the programming language to machine code, can also be a consideration. Development requires making changes to code and checking whether the changes work. If the process of getting feedback takes a long time, due to these translations, it can destroy a programmers productivity. &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Golang&lt;&#x2F;a&gt; is a language that is explicitly designed for fast compilation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;safety&quot;&gt;Safety&lt;&#x2F;h2&gt;
&lt;p&gt;Safety is in many cases the flip side to the speed argument. Certain abstractions cost you in speed but provide you with safety in return. Different languages tend to make different trade-offs with this regard. For example one of the relatively new languages, &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;en-US&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; aims at focus on zero cost abstractions: abstractions with little to no run-time performance penalty.&lt;&#x2F;p&gt;
&lt;p&gt;One contentious aspect of safety is the use of type systems. Types allow the coder to specify various categories, such as numbers, persons, cars, etc as well as their requirements to be fulfilled within the context of the program. Types can be checked both statically, before the system is run, or dynamically, during the running of the program. Some people swear by very expressive type systems: where types can specify very detailed features of the things the program wants to represent. This then can be used for checking code for correctness, both before and during the running of a program, as well as documentation. On the other hand type checking is not free: it can make translating the compilation into machine code a much slower process. Some people also consider the writing and checking of types themselves very cumbersome during initial development, where quick iteration can be slowed down by specifying detailed types.&lt;&#x2F;p&gt;
&lt;p&gt;There is a whole spectrum of possible stances with regards to type systems. For example, certain languages such as &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;Haskell&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.idris-lang.org&#x2F;&quot;&gt;Idris&lt;&#x2F;a&gt; are designed from the ground up with very expressive type systems that are statically checked. Others, for example &lt;a href=&quot;https:&#x2F;&#x2F;www.dartlang.org&#x2F;&quot;&gt;Dart&lt;&#x2F;a&gt; which started off as having optional types but adds mandatory types in the latest iteration to help with tooling, take a more balanced approach. &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Golang&lt;&#x2F;a&gt; explicitly has a static, but minimalist, type system that allows for fast compilation.  There are also languages, such as &lt;a href=&quot;https:&#x2F;&#x2F;clojure.org&#x2F;&quot;&gt;Clojure&lt;&#x2F;a&gt; that instead of static types, use contract systems to ensure safety at run-time and allow for documentation and testing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;&#x2F;h2&gt;
&lt;p&gt;While most general purpose programming languages can be made to run in all environments, they are not always available. In certain environments, such as mobile or on the web, only specific languages are supported. For example on Android &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;&quot;&gt;Kotlin&lt;&#x2F;a&gt; are officially supported, while on the web &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;JavaScript&quot;&gt;JavaScript&lt;&#x2F;a&gt; is the current Lingua Franca of the web. This means that it can be quite a herculean effort to make other languages work in such environments, and going with the most supported option is easier. &lt;&#x2F;p&gt;
&lt;p&gt;The way certain languages can get around on this hindrance is by using the more commonly supported language as the target to translate into. For example &lt;a href=&quot;https:&#x2F;&#x2F;clojurescript.org&#x2F;&quot;&gt;ClojureScript&lt;&#x2F;a&gt; compiles into &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;JavaScript&quot;&gt;JavaScript&lt;&#x2F;a&gt;. And in some cases, other developers have made the effort to get frameworks up and running that allow the use of a different language, such as the use of &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react-native&#x2F;&quot;&gt;React Native&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;flutter.io&#x2F;&quot;&gt;Flutter&lt;&#x2F;a&gt; that allow the use of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;JavaScript&quot;&gt;JavaScript&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.dartlang.org&#x2F;&quot;&gt;Dart&lt;&#x2F;a&gt; respectively to develop mobile applications. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-team-and-beyond&quot;&gt;The Team and Beyond&lt;&#x2F;h2&gt;
&lt;p&gt;One final aspect of choosing a programming language, which can be surprisingly significant, is which language is beneficial to the team, as opposed to an individual developer. Different teams bring different expertise to the table, and while most professionals are often quite willing and able to use a new language if it is most suited to the task at hand, this can still be a cost that might be better spent on developing the application. From an employers perspective it can also often be beneficial to stick to more commonly used languages as it can be easier to find future employees versed in the language used. On the other hand, there are many professionals that would be quite willing to jump on the chance of using the latest programming languages, in which case the choice for a newer or more niche language can be a competitive advantage from a recruiting perspective.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;I hope this article gave some insight on why programmers pick and argue about programming languages. Despite all the various differences and arguments it is also very important to note, that great software has been written in many different languages, that is both excellent code and solves important problems. And while picking the right tool for the job is an important, it can be just an aspect of the art of solving problems with code.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
